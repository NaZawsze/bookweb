(function(e,t){typeof exports=="object"&&typeof module!="undefined"?t(exports):typeof define=="function"&&define.amd?define(["exports"],t):(e=typeof globalThis!="undefined"?globalThis:e||self,t(e.THREE={}))})(this,function(e){"use strict";const Oo="139",dh={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},ch={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},Ur=0,pa=1,nc=2,k3=3,_3=0,na=1,Ac=2,Dt=3,pt=0,U=1,gt=2,Qi=1,B2=2,fe=0,xt=1,Ki=2,Wi=3,Ti=4,Ol=5,ht=100,Fl=101,Ll=102,fi=103,ai=104,Pl=200,Il=201,Bl=202,Vl=203,oi=204,si=205,Kl=206,Yl=207,Gl=208,Zl=209,Jl=210,od=0,ld=1,hd=2,zo=3,md=4,fd=5,gd=6,vd=7,gn=0,bd=1,jd=2,le=0,Ed=1,kd=2,zd=3,Pd=4,Hd=5,Eo=300,Be=301,Ve=302,mn=303,Sn=304,Qt=306,Tn=1e3,R=1001,Dn=1002,O=1003,xo=1004,g4=1004,yo=1005,l4=1005,j=1006,ni=1007,r4=1007,ct=1008,a4=1008,Fe=1009,qd=1010,Yd=1011,Pt=1012,Gd=1013,Bn=1014,xe=1015,vt=1016,eu=1017,su=1018,Et=1020,ou=1021,pu=1022,q=1023,gu=1024,v1=1025,Re=1026,ft=1027,b1=1028,g1=1029,m1=1030,r1=1031,i1=1033,Hs=33776,Ps=33777,Ms=33778,ks=33779,ia=35840,aa=35841,ra=35842,ca=35843,Eu=36196,da=37492,ua=37496,ha=37808,ga=37809,ja=37810,xa=37811,Ca=37812,Aa=37813,Sa=37814,Ma=37815,Na=37816,La=37817,Ha=37818,Ia=37819,Ba=37820,Va=37821,$a=36492,wc=2200,Qu=2201,o1=2202,Zn=2300,Qn=2301,$s=2302,wt=2400,Ot=2401,Gn=2402,Ws=2500,Ri=2501,h1=0,O1=1,d2=2,ce=3e3,p=3001,Ua=3200,y1=3201,mt=0,ru=1,D1="",ue="srgb",Ne="srgb-linear",N1=0,no=7680,R1=7681,Y1=7682,G1=7683,Z1=34055,e4=34056,t4=5386,c4=512,d4=513,u4=514,h4=515,p4=516,q4=517,r0=518,sd=519,tn=35044,nn=35048,m0=35040,p0=35045,v0=35049,b0=35041,j0=35046,y0=35050,_0=35042,w0="100",li="300 es",mo=1035;class Ee{addEventListener(e,t){this._listeners===void 0&&(this._listeners={});const n=this._listeners;n[e]===void 0&&(n[e]=[]),n[e].indexOf(t)===-1&&n[e].push(t)}hasEventListener(e,t){if(this._listeners===void 0)return!1;const n=this._listeners;return n[e]!==void 0&&n[e].indexOf(t)!==-1}removeEventListener(e,t){if(this._listeners===void 0)return;const s=this._listeners,n=s[e];if(n!==void 0){const e=n.indexOf(t);e!==-1&&n.splice(e,1)}}dispatchEvent(e){if(this._listeners===void 0)return;const n=this._listeners,t=n[e.type];if(t!==void 0){e.target=this;const n=t.slice(0);for(let t=0,s=n.length;t<s;t++)n[t].call(this,e);e.target=null}}}const z=[];for(let e=0;e<256;e++)z[e]=(e<16?"0":"")+e.toString(16);let Rl=1234567;const Ye=Math.PI/180,bn=180/Math.PI;function $(){const e=Math.random()*4294967295|0,t=Math.random()*4294967295|0,n=Math.random()*4294967295|0,s=Math.random()*4294967295|0,o=z[e&255]+z[e>>8&255]+z[e>>16&255]+z[e>>24&255]+"-"+z[t&255]+z[t>>8&255]+"-"+z[t>>16&15|64]+z[t>>24&255]+"-"+z[n&63|128]+z[n>>8&255]+"-"+z[n>>16&255]+z[n>>24&255]+z[s&255]+z[s>>8&255]+z[s>>16&255]+z[s>>24&255];return o.toLowerCase()}function b(e,t,n){return Math.max(t,Math.min(n,e))}function vi(e,t){return(e%t+t)%t}function u2(e,t,n,s,o){return s+(e-t)*(o-s)/(n-t)}function m2(e,t,n){return e!==t?(n-e)/(t-e):0}function xn(e,t,n){return(1-n)*e+n*t}function g2(e,t,n,s){return xn(e,t,1-Math.exp(-n*s))}function v2(e,t=1){return t-Math.abs(vi(e,t*2)-t)}function j2(e,t,n){return e<=t?0:e>=n?1:(e=(e-t)/(n-t),e*e*(3-2*e))}function y2(e,t,n){return e<=t?0:e>=n?1:(e=(e-t)/(n-t),e*e*e*(e*(e*6-15)+10))}function k2(e,t){return e+Math.floor(Math.random()*(t-e+1))}function A2(e,t){return e+Math.random()*(t-e)}function D2(e){return e*(.5-Math.random())}function W2(e){e!==void 0&&(Rl=e);let t=Rl+=1831565813;return t=Math.imul(t^t>>>15,t|1),t^=t+Math.imul(t^t>>>7,t|61),((t^t>>>14)>>>0)/4294967296}function Q2(e){return e*Ye}function J2(e){return e*bn}function ta(e){return(e&e-1)===0&&e!==0}function Cc(e){return Math.pow(2,Math.ceil(Math.log(e)/Math.LN2))}function Ss(e){return Math.pow(2,Math.floor(Math.log(e)/Math.LN2))}function h3(e,t,n,s,o){const l=Math.cos,d=Math.sin,i=l(n/2),a=d(n/2),r=l((t+s)/2),c=d((t+s)/2),u=l((t-s)/2),h=d((t-s)/2),m=l((s-t)/2),f=d((s-t)/2);switch(o){case"XYX":e.set(i*c,a*u,a*h,i*r);break;case"YZY":e.set(a*h,i*c,a*u,i*r);break;case"ZXZ":e.set(a*u,a*h,i*c,i*r);break;case"XZX":e.set(i*c,a*f,a*m,i*r);break;case"YXY":e.set(a*m,i*c,a*f,i*r);break;case"ZYZ":e.set(a*f,a*m,i*c,i*r);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+o)}}function v3(e,t){switch(t.constructor){case Float32Array:return e;case Uint16Array:return e/65535;case Uint8Array:return e/255;case Int16Array:return Math.max(e/32767,-1);case Int8Array:return Math.max(e/127,-1);default:throw new Error("Invalid component type.")}}function O3(e,t){switch(t.constructor){case Float32Array:return e;case Uint16Array:return Math.round(e*65535);case Uint8Array:return Math.round(e*255);case Int16Array:return Math.round(e*32767);case Int8Array:return Math.round(e*127);default:throw new Error("Invalid component type.")}}var hc=Object.freeze({__proto__:null,DEG2RAD:Ye,RAD2DEG:bn,generateUUID:$,clamp:b,euclideanModulo:vi,mapLinear:u2,inverseLerp:m2,lerp:xn,damp:g2,pingpong:v2,smoothstep:j2,smootherstep:y2,randInt:k2,randFloat:A2,randFloatSpread:D2,seededRandom:W2,degToRad:Q2,radToDeg:J2,isPowerOfTwo:ta,ceilPowerOfTwo:Cc,floorPowerOfTwo:Ss,setQuaternionFromProperEuler:h3,normalize:O3,denormalize:v3}),fu,Ju,Xu,Gu,Bu,Iu,Hu,Ru,Nu,Du,zu,Fu,Mu,Su,Au,ku,Cu,xu,Ou,wu,_u,yu,ju,vu,mu,hu,du,lu,nu,tu,Cd,_d,dd,rd,vl,gl,pl,fl,nl,Yc,Wc,Bc,Hc,Pc,Rc,Nc,Dc,Tc,Fc,xc,Oc,Ya,Dl,Ka,qa,Wa,Ga,Xa,Qa,Za,Ja,er,tr,nr,sr,or,ir,ar,rr,cr,lr,dr,ur,hr,mr,fr,pr,gr,vr,br,jr,yr,_r,wr,Or,xr,Cr,Er,kr,Ar,Sr,Mr,Fr,Tr,zr,Dr,Nr,Lr,Rr,Pr,Hr,Ir,Br,Vr,$r,jo,Lo;class n{constructor(e=0,t=0){this.x=e,this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){return this.x=e,this.y=t,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e,t){return t!==void 0?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this)}addScalar(e){return this.x+=e,this.y+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this}sub(e,t){return t!==void 0?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this)}subScalar(e){return this.x-=e,this.y-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const n=this.x,s=this.y,t=e.elements;return this.x=t[0]*n+t[3]*s+t[6],this.y=t[1]*n+t[4]*s+t[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){const e=Math.atan2(-this.y,-this.x)+Math.PI;return e}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y;return t*t+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e}fromBufferAttribute(e,t,n){return n!==void 0&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this}rotateAround(e,t){const n=Math.cos(t),s=Math.sin(t),o=this.x-e.x,i=this.y-e.y;return this.x=o*n-i*s+e.x,this.y=o*s+i*n+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}n.prototype.isVector2=!0;class E{constructor(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}set(e,t,n,s,o,i,a,r,c){const l=this.elements;return l[0]=e,l[1]=s,l[2]=a,l[3]=t,l[4]=o,l[5]=r,l[6]=n,l[7]=i,l[8]=c,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],this}extractBasis(e,t,n){return e.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(e){const t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,s=t.elements,o=this.elements,i=n[0],a=n[3],r=n[6],c=n[1],l=n[4],d=n[7],u=n[2],h=n[5],m=n[8],f=s[0],p=s[3],g=s[6],v=s[1],b=s[4],j=s[7],y=s[2],_=s[5],w=s[8];return o[0]=i*f+a*v+r*y,o[3]=i*p+a*b+r*_,o[6]=i*g+a*j+r*w,o[1]=c*f+l*v+d*y,o[4]=c*p+l*b+d*_,o[7]=c*g+l*j+d*w,o[2]=u*f+h*v+m*y,o[5]=u*p+h*b+m*_,o[8]=u*g+h*j+m*w,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[1],s=e[2],o=e[3],i=e[4],a=e[5],r=e[6],c=e[7],l=e[8];return t*i*l-t*a*c-n*o*l+n*a*r+s*o*c-s*i*r}invert(){const e=this.elements,n=e[0],s=e[1],o=e[2],d=e[3],a=e[4],i=e[5],r=e[6],c=e[7],l=e[8],u=l*a-i*c,h=i*r-l*d,m=c*d-a*r,f=n*u+s*h+o*m;if(f===0)return this.set(0,0,0,0,0,0,0,0,0);const t=1/f;return e[0]=u*t,e[1]=(o*c-l*s)*t,e[2]=(i*s-o*a)*t,e[3]=h*t,e[4]=(l*n-o*r)*t,e[5]=(o*d-i*n)*t,e[6]=m*t,e[7]=(s*r-c*n)*t,e[8]=(a*n-s*d)*t,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this}setUvTransform(e,t,n,s,o,i,a){const r=Math.cos(o),c=Math.sin(o);return this.set(n*r,n*c,-n*(r*i+c*a)+i+e,-s*c,s*r,-s*(-c*i+r*a)+a+t,0,0,1),this}scale(e,t){const n=this.elements;return n[0]*=e,n[3]*=e,n[6]*=e,n[1]*=t,n[4]*=t,n[7]*=t,this}rotate(e){const n=Math.cos(e),s=Math.sin(e),t=this.elements,o=t[0],i=t[3],a=t[6],r=t[1],c=t[4],l=t[7];return t[0]=n*o+s*r,t[3]=n*i+s*c,t[6]=n*a+s*l,t[1]=-s*o+n*r,t[4]=-s*i+n*c,t[7]=-s*a+n*l,this}translate(e,t){const n=this.elements;return n[0]+=e*n[2],n[3]+=e*n[5],n[6]+=e*n[8],n[1]+=t*n[2],n[4]+=t*n[5],n[7]+=t*n[8],this}equals(e){const t=this.elements,n=e.elements;for(let e=0;e<9;e++)if(t[e]!==n[e])return!1;return!0}fromArray(e,t=0){for(let n=0;n<9;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e}clone(){return(new this.constructor).fromArray(this.elements)}}E.prototype.isMatrix3=!0;function uc(e){for(let t=e.length-1;t>=0;--t)if(e[t]>65535)return!0;return!1}const $3={Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array};function Mt(e,t){return new $3[e](t)}function qn(e){return document.createElementNS("http://www.w3.org/1999/xhtml",e)}function Ct(e){return e<.04045?e*.0773993808:Math.pow(e*.9478672986+.0521327014,2.4)}function js(e){return e<.0031308?e*12.92:1.055*Math.pow(e,.41666)-.055}const _a={[ue]:{[Ne]:Ct},[Ne]:{[ue]:js}},Q={legacyMode:!0,get workingColorSpace(){return Ne},set workingColorSpace(e){console.warn("THREE.ColorManagement: .workingColorSpace is readonly.")},convert:function(e,t,n){if(this.legacyMode||t===n||!t||!n)return e;if(_a[t]&&_a[t][n]!==void 0){const s=_a[t][n];return e.r=s(e.r),e.g=s(e.g),e.b=s(e.b),e}throw new Error("Unsupported color space conversion.")},fromWorkingColorSpace:function(e,t){return this.convert(e,this.workingColorSpace,t)},toWorkingColorSpace:function(e,t){return this.convert(e,t,this.workingColorSpace)}},Xr={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},k={r:0,g:0,b:0},se={h:0,s:0,l:0},ms={h:0,s:0,l:0};function ka(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+(t-e)*6*n:n<1/2?t:n<2/3?e+(t-e)*6*(2/3-n):e}function us(e,t){return t.r=e.r,t.g=e.g,t.b=e.b,t}class o{constructor(e,t,n){return t===void 0&&n===void 0?this.set(e):this.setRGB(e,t,n)}set(e){return e&&e.isColor?this.copy(e):typeof e=="number"?this.setHex(e):typeof e=="string"&&this.setStyle(e),this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e,t=ue){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(e&255)/255,Q.toWorkingColorSpace(this,t),this}setRGB(e,t,n,s=Ne){return this.r=e,this.g=t,this.b=n,Q.toWorkingColorSpace(this,s),this}setHSL(e,t,n,s=Ne){if(e=vi(e,1),t=b(t,0,1),n=b(n,0,1),t===0)this.r=this.g=this.b=n;else{const s=n<=.5?n*(1+t):n+t-n*t,o=2*n-s;this.r=ka(o,s,e+1/3),this.g=ka(o,s,e),this.b=ka(o,s,e-1/3)}return Q.toWorkingColorSpace(this,s),this}setStyle(e,t=ue){function s(t){if(t===void 0)return;parseFloat(t)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}let n;if(n=/^((?:rgb|hsl)a?)\(([^)]*)\)/.exec(e)){let e;const i=n[1],o=n[2];switch(i){case"rgb":case"rgba":if(e=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))return this.r=Math.min(255,parseInt(e[1],10))/255,this.g=Math.min(255,parseInt(e[2],10))/255,this.b=Math.min(255,parseInt(e[3],10))/255,Q.toWorkingColorSpace(this,t),s(e[4]),this;if(e=/^\s*(\d+)%\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))return this.r=Math.min(100,parseInt(e[1],10))/100,this.g=Math.min(100,parseInt(e[2],10))/100,this.b=Math.min(100,parseInt(e[3],10))/100,Q.toWorkingColorSpace(this,t),s(e[4]),this;break;case"hsl":case"hsla":if(e=/^\s*(\d*\.?\d+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o)){const n=parseFloat(e[1])/360,o=parseInt(e[2],10)/100,i=parseInt(e[3],10)/100;return s(e[4]),this.setHSL(n,o,i,t)}break}}else if(n=/^#([A-Fa-f\d]+)$/.exec(e)){const e=n[1],s=e.length;if(s===3)return this.r=parseInt(e.charAt(0)+e.charAt(0),16)/255,this.g=parseInt(e.charAt(1)+e.charAt(1),16)/255,this.b=parseInt(e.charAt(2)+e.charAt(2),16)/255,Q.toWorkingColorSpace(this,t),this;if(s===6)return this.r=parseInt(e.charAt(0)+e.charAt(1),16)/255,this.g=parseInt(e.charAt(2)+e.charAt(3),16)/255,this.b=parseInt(e.charAt(4)+e.charAt(5),16)/255,Q.toWorkingColorSpace(this,t),this}return e&&e.length>0?this.setColorName(e,t):this}setColorName(e,t=ue){const n=Xr[e.toLowerCase()];return n!==void 0?this.setHex(n,t):console.warn("THREE.Color: Unknown color "+e),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copySRGBToLinear(e){return this.r=Ct(e.r),this.g=Ct(e.g),this.b=Ct(e.b),this}copyLinearToSRGB(e){return this.r=js(e.r),this.g=js(e.g),this.b=js(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(e=ue){return Q.fromWorkingColorSpace(us(this,k),e),b(k.r*255,0,255)<<16^b(k.g*255,0,255)<<8^b(k.b*255,0,255)<<0}getHexString(e=ue){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,t=Ne){Q.fromWorkingColorSpace(us(this,k),t);const a=k.r,n=k.g,s=k.b,o=Math.max(a,n,s),r=Math.min(a,n,s);let i,c;const l=(r+o)/2;if(r===o)i=0,c=0;else{const e=o-r;switch(c=l<=.5?e/(o+r):e/(2-o-r),o){case a:i=(n-s)/e+(n<s?6:0);break;case n:i=(s-a)/e+2;break;case s:i=(a-n)/e+4;break}i/=6}return e.h=i,e.s=c,e.l=l,e}getRGB(e,t=Ne){return Q.fromWorkingColorSpace(us(this,k),t),e.r=k.r,e.g=k.g,e.b=k.b,e}getStyle(e=ue){return Q.fromWorkingColorSpace(us(this,k),e),e!==ue?`color(${e} ${k.r} ${k.g} ${k.b})`:`rgb(${k.r*255|0},${k.g*255|0},${k.b*255|0})`}offsetHSL(e,t,n){return this.getHSL(se),se.h+=e,se.s+=t,se.l+=n,this.setHSL(se.h,se.s,se.l),this}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}lerp(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this}lerpColors(e,t,n){return this.r=e.r+(t.r-e.r)*n,this.g=e.g+(t.g-e.g)*n,this.b=e.b+(t.b-e.b)*n,this}lerpHSL(e,t){this.getHSL(se),e.getHSL(ms);const n=xn(se.h,ms.h,t),s=xn(se.s,ms.s,t),o=xn(se.l,ms.l,t);return this.setHSL(n,s,o),this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){return this.r=e[t],this.g=e[t+1],this.b=e[t+2],this}toArray(e=[],t=0){return e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}fromBufferAttribute(e,t){return this.r=e.getX(t),this.g=e.getY(t),this.b=e.getZ(t),e.normalized===!0&&(this.r/=255,this.g/=255,this.b/=255),this}toJSON(){return this.getHex()}}o.NAMES=Xr,o.prototype.isColor=!0,o.prototype.r=1,o.prototype.g=1,o.prototype.b=1;let It;class Ue{static getDataURL(e){if(/^data:/i.test(e.src))return e.src;if(typeof HTMLCanvasElement=="undefined")return e.src;let t;if(e instanceof HTMLCanvasElement)t=e;else{It===void 0&&(It=qn("canvas")),It.width=e.width,It.height=e.height;const n=It.getContext("2d");e instanceof ImageData?n.putImageData(e,0,0):n.drawImage(e,0,0,e.width,e.height),t=It}return t.width>2048||t.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",e),t.toDataURL("image/jpeg",.6)):t.toDataURL("image/png")}static sRGBToLinear(e){if(typeof HTMLImageElement!="undefined"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement!="undefined"&&e instanceof HTMLCanvasElement||typeof ImageBitmap!="undefined"&&e instanceof ImageBitmap){const t=qn("canvas");t.width=e.width,t.height=e.height;const n=t.getContext("2d");n.drawImage(e,0,0,e.width,e.height);const o=n.getImageData(0,0,e.width,e.height),s=o.data;for(let e=0;e<s.length;e++)s[e]=Ct(s[e]/255)*255;return n.putImageData(o,0,0),t}if(e.data){const t=e.data.slice(0);for(let e=0;e<t.length;e++)t instanceof Uint8Array||t instanceof Uint8ClampedArray?t[e]=Math.floor(Ct(t[e]/255)*255):t[e]=Ct(t[e]);return{data:t,width:e.width,height:e.height}}return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),e}}class st{constructor(e=null){this.uuid=$(),this.data=e,this.version=0}set needsUpdate(e){e===!0&&this.version++}toJSON(e){const s=e===void 0||typeof e=="string";if(!s&&e.images[this.uuid]!==void 0)return e.images[this.uuid];const n={uuid:this.uuid,url:""},t=this.data;if(t!==null){let e;if(Array.isArray(t)){e=[];for(let n=0,s=t.length;n<s;n++)t[n].isDataTexture?e.push(Gi(t[n].image)):e.push(Gi(t[n]))}else e=Gi(t);n.url=e}return s||(e.images[this.uuid]=n),n}}function Gi(e){return typeof HTMLImageElement!="undefined"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement!="undefined"&&e instanceof HTMLCanvasElement||typeof ImageBitmap!="undefined"&&e instanceof ImageBitmap?Ue.getDataURL(e):e.data?{data:Array.prototype.slice.call(e.data),width:e.width,height:e.height,type:e.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}st.prototype.isSource=!0;let lh=0;class A extends Ee{constructor(e=A.DEFAULT_IMAGE,t=A.DEFAULT_MAPPING,s=R,o=R,i=j,a=ct,r=q,c=Fe,l=1,d=ce){super(),Object.defineProperty(this,"id",{value:lh++}),this.uuid=$(),this.name="",this.source=new st(e),this.mipmaps=[],this.mapping=t,this.wrapS=s,this.wrapT=o,this.magFilter=i,this.minFilter=a,this.anisotropy=l,this.format=r,this.internalFormat=null,this.type=c,this.offset=new n(0,0),this.repeat=new n(1,1),this.center=new n(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new E,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=d,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}get image(){return this.source.data}set image(e){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return(new this.constructor).copy(this)}copy(e){return this.name=e.name,this.source=e.source,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.internalFormat=e.internalFormat,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.encoding=e.encoding,this.userData=JSON.parse(JSON.stringify(e.userData)),this.needsUpdate=!0,this}toJSON(e){const n=e===void 0||typeof e=="string";if(!n&&e.textures[this.uuid]!==void 0)return e.textures[this.uuid];const t={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return JSON.stringify(this.userData)!=="{}"&&(t.userData=this.userData),n||(e.textures[this.uuid]=t),t}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(this.mapping!==Eo)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case Tn:e.x=e.x-Math.floor(e.x);break;case R:e.x=e.x<0?0:1;break;case Dn:Math.abs(Math.floor(e.x)%2)===1?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x);break}if(e.y<0||e.y>1)switch(this.wrapT){case Tn:e.y=e.y-Math.floor(e.y);break;case R:e.y=e.y<0?0:1;break;case Dn:Math.abs(Math.floor(e.y)%2)===1?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y);break}return this.flipY&&(e.y=1-e.y),e}set needsUpdate(e){e===!0&&(this.version++,this.source.needsUpdate=!0)}}A.DEFAULT_IMAGE=null,A.DEFAULT_MAPPING=Eo,A.prototype.isTexture=!0;class h{constructor(e=0,t=0,n=0,s=1){this.x=e,this.y=t,this.z=n,this.w=s}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,n,s){return this.x=e,this.y=t,this.z=n,this.w=s,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w!==void 0?e.w:1,this}add(e,t){return t!==void 0?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this)}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this}sub(e,t){return t!==void 0?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this)}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){const n=this.x,s=this.y,o=this.z,i=this.w,t=e.elements;return this.x=t[0]*n+t[4]*s+t[8]*o+t[12]*i,this.y=t[1]*n+t[5]*s+t[9]*o+t[13]*i,this.z=t[2]*n+t[6]*s+t[10]*o+t[14]*i,this.w=t[3]*n+t[7]*s+t[11]*o+t[15]*i,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this}setAxisAngleFromRotationMatrix(e){let v,n,s,o;const a=.01,m=.1,t=e.elements,f=t[0],i=t[4],r=t[8],c=t[1],p=t[5],l=t[9],d=t[2],u=t[6],g=t[10];if(Math.abs(i-c)<a&&Math.abs(r-d)<a&&Math.abs(l-u)<a){if(Math.abs(i+c)<m&&Math.abs(r+d)<m&&Math.abs(l+u)<m&&Math.abs(f+p+g-3)<m)return this.set(1,0,0,0),this;v=Math.PI;const e=(f+1)/2,t=(p+1)/2,h=(g+1)/2,b=(i+c)/4,j=(r+d)/4,y=(l+u)/4;return e>t&&e>h?e<a?(n=0,s=.707106781,o=.707106781):(n=Math.sqrt(e),s=b/n,o=j/n):t>h?t<a?(n=.707106781,s=0,o=.707106781):(s=Math.sqrt(t),n=b/s,o=y/s):h<a?(n=.707106781,s=.707106781,o=0):(o=Math.sqrt(h),n=j/o,s=y/o),this.set(n,s,o,v),this}let h=Math.sqrt((u-l)*(u-l)+(r-d)*(r-d)+(c-i)*(c-i));return Math.abs(h)<.001&&(h=1),this.x=(u-l)/h,this.y=(r-d)/h,this.z=(c-i)/h,this.w=Math.acos((f+p+g-1)/2),this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this.w=Math.max(e.w,Math.min(t.w,this.w)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this.w=Math.max(e,Math.min(t,this.w)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this.w=e.w+(t.w-e.w)*n,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}fromBufferAttribute(e,t,n){return n!==void 0&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}h.prototype.isVector4=!0;class I extends Ee{constructor(e,t,n={}){super(),this.width=e,this.height=t,this.depth=1,this.scissor=new h(0,0,e,t),this.scissorTest=!1,this.viewport=new h(0,0,e,t);const s={width:e,height:t,depth:1};this.texture=new A(s,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),this.texture.isRenderTargetTexture=!0,this.texture.flipY=!1,this.texture.generateMipmaps=n.generateMipmaps!==void 0&&n.generateMipmaps,this.texture.internalFormat=n.internalFormat!==void 0?n.internalFormat:null,this.texture.minFilter=n.minFilter!==void 0?n.minFilter:j,this.depthBuffer=n.depthBuffer===void 0||n.depthBuffer,this.stencilBuffer=n.stencilBuffer!==void 0&&n.stencilBuffer,this.depthTexture=n.depthTexture!==void 0?n.depthTexture:null,this.samples=n.samples!==void 0?n.samples:0}setSize(e,t,n=1){(this.width!==e||this.height!==t||this.depth!==n)&&(this.width=e,this.height=t,this.depth=n,this.texture.image.width=e,this.texture.image.height=t,this.texture.image.depth=n,this.dispose()),this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)}clone(){return(new this.constructor).copy(this)}copy(e){return this.width=e.width,this.height=e.height,this.depth=e.depth,this.viewport.copy(e.viewport),this.texture=e.texture.clone(),this.texture.isRenderTargetTexture=!0,this.texture.image=Object.assign({},e.texture.image),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,e.depthTexture!==null&&(this.depthTexture=e.depthTexture.clone()),this.samples=e.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}I.prototype.isWebGLRenderTarget=!0;class Tt extends A{constructor(e=null,t=1,n=1,s=1){super(null),this.image={data:e,width:t,height:n,depth:s},this.magFilter=O,this.minFilter=O,this.wrapR=R,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}Tt.prototype.isDataArrayTexture=!0;class Qr extends I{constructor(e,t,n){super(e,t),this.depth=n,this.texture=new Tt(null,e,t,n),this.texture.isRenderTargetTexture=!0}}Qr.prototype.isWebGLArrayRenderTarget=!0;class Xn extends A{constructor(e=null,t=1,n=1,s=1){super(null),this.image={data:e,width:t,height:n,depth:s},this.magFilter=O,this.minFilter=O,this.wrapR=R,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}Xn.prototype.isData3DTexture=!0;class ec extends I{constructor(e,t,n){super(e,t),this.depth=n,this.texture=new Xn(null,e,t,n),this.texture.isRenderTargetTexture=!0}}ec.prototype.isWebGL3DRenderTarget=!0;class tc extends I{constructor(e,t,n,s={}){super(e,t,s);const o=this.texture;this.texture=[];for(let e=0;e<n;e++)this.texture[e]=o.clone(),this.texture[e].isRenderTargetTexture=!0}setSize(e,t,n=1){if(this.width!==e||this.height!==t||this.depth!==n){this.width=e,this.height=t,this.depth=n;for(let s=0,o=this.texture.length;s<o;s++)this.texture[s].image.width=e,this.texture[s].image.height=t,this.texture[s].image.depth=n;this.dispose()}return this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t),this}copy(e){this.dispose(),this.width=e.width,this.height=e.height,this.depth=e.depth,this.viewport.set(0,0,this.width,this.height),this.scissor.set(0,0,this.width,this.height),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,this.depthTexture=e.depthTexture,this.texture.length=0;for(let t=0,n=e.texture.length;t<n;t++)this.texture[t]=e.texture[t].clone();return this}}tc.prototype.isWebGLMultipleRenderTargets=!0;class T{constructor(e=0,t=0,n=0,s=1){this._x=e,this._y=t,this._z=n,this._w=s}static slerp(e,t,n,s){return console.warn("THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead."),n.slerpQuaternions(e,t,s)}static slerpFlat(e,t,n,s,o,i,a){let r=n[s+0],c=n[s+1],l=n[s+2],d=n[s+3];const u=o[i+0],h=o[i+1],m=o[i+2],f=o[i+3];if(a===0){e[t+0]=r,e[t+1]=c,e[t+2]=l,e[t+3]=d;return}if(a===1){e[t+0]=u,e[t+1]=h,e[t+2]=m,e[t+3]=f;return}if(d!==f||r!==u||c!==h||l!==m){let e=1-a;const t=r*u+c*h+l*m+d*f,s=t>=0?1:-1,o=1-t*t;if(o>Number.EPSILON){const n=Math.sqrt(o),i=Math.atan2(n,t*s);e=Math.sin(e*i)/n,a=Math.sin(a*i)/n}const n=a*s;if(r=r*e+u*n,c=c*e+h*n,l=l*e+m*n,d=d*e+f*n,e===1-a){const e=1/Math.sqrt(r*r+c*c+l*l+d*d);r*=e,c*=e,l*=e,d*=e}}e[t]=r,e[t+1]=c,e[t+2]=l,e[t+3]=d}static multiplyQuaternionsFlat(e,t,n,s,o,i){const a=n[s],r=n[s+1],c=n[s+2],l=n[s+3],d=o[i],u=o[i+1],h=o[i+2],m=o[i+3];return e[t]=a*m+l*d+r*h-c*u,e[t+1]=r*m+l*u+c*d-a*h,e[t+2]=c*m+l*h+a*u-r*d,e[t+3]=l*m-a*d-r*u-c*h,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,t,n,s){return this._x=e,this._y=t,this._z=n,this._w=s,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,t){if(!e||!e.isEuler)throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");const d=e._x,u=e._y,h=e._z,m=e._order,c=Math.cos,l=Math.sin,n=c(d/2),s=c(u/2),o=c(h/2),i=l(d/2),a=l(u/2),r=l(h/2);switch(m){case"XYZ":this._x=i*s*o+n*a*r,this._y=n*a*o-i*s*r,this._z=n*s*r+i*a*o,this._w=n*s*o-i*a*r;break;case"YXZ":this._x=i*s*o+n*a*r,this._y=n*a*o-i*s*r,this._z=n*s*r-i*a*o,this._w=n*s*o+i*a*r;break;case"ZXY":this._x=i*s*o-n*a*r,this._y=n*a*o+i*s*r,this._z=n*s*r+i*a*o,this._w=n*s*o-i*a*r;break;case"ZYX":this._x=i*s*o-n*a*r,this._y=n*a*o+i*s*r,this._z=n*s*r-i*a*o,this._w=n*s*o+i*a*r;break;case"YZX":this._x=i*s*o+n*a*r,this._y=n*a*o+i*s*r,this._z=n*s*r-i*a*o,this._w=n*s*o-i*a*r;break;case"XZY":this._x=i*s*o-n*a*r,this._y=n*a*o-i*s*r,this._z=n*s*r+i*a*o,this._w=n*s*o+i*a*r;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+m)}return t!==!1&&this._onChangeCallback(),this}setFromAxisAngle(e,t){const s=t/2,n=Math.sin(s);return this._x=e.x*n,this._y=e.y*n,this._z=e.z*n,this._w=Math.cos(s),this._onChangeCallback(),this}setFromRotationMatrix(e){const t=e.elements,n=t[0],i=t[4],a=t[8],r=t[1],s=t[5],c=t[9],l=t[2],d=t[6],o=t[10],u=n+s+o;if(u>0){const e=.5/Math.sqrt(u+1);this._w=.25/e,this._x=(d-c)*e,this._y=(a-l)*e,this._z=(r-i)*e}else if(n>s&&n>o){const e=2*Math.sqrt(1+n-s-o);this._w=(d-c)/e,this._x=.25*e,this._y=(i+r)/e,this._z=(a+l)/e}else if(s>o){const e=2*Math.sqrt(1+s-n-o);this._w=(a-l)/e,this._x=(i+r)/e,this._y=.25*e,this._z=(c+d)/e}else{const e=2*Math.sqrt(1+o-n-s);this._w=(r-i)/e,this._x=(a+l)/e,this._y=(c+d)/e,this._z=.25*e}return this._onChangeCallback(),this}setFromUnitVectors(e,t){let n=e.dot(t)+1;return n<Number.EPSILON?(n=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=n):(this._x=0,this._y=-e.z,this._z=e.y,this._w=n)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=n),this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(b(this.dot(e),-1,1)))}rotateTowards(e,t){const n=this.angleTo(e);if(n===0)return this;const s=Math.min(1,t/n);return this.slerp(e,s),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();return e===0?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(e,t){return t!==void 0?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(e,t)):this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const n=e._x,s=e._y,o=e._z,i=e._w,a=t._x,r=t._y,c=t._z,l=t._w;return this._x=n*l+i*a+s*c-o*r,this._y=s*l+i*r+o*a-n*c,this._z=o*l+i*c+n*r-s*a,this._w=i*l-n*a-s*r-o*c,this._onChangeCallback(),this}slerp(e,t){if(t===0)return this;if(t===1)return this.copy(e);const s=this._x,o=this._y,i=this._z,a=this._w;let n=a*e._w+s*e._x+o*e._y+i*e._z;if(n<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,n=-n):this.copy(e),n>=1)return this._w=a,this._x=s,this._y=o,this._z=i,this;const d=1-n*n;if(d<=Number.EPSILON){const e=1-t;return this._w=e*a+t*this._w,this._x=e*s+t*this._x,this._y=e*o+t*this._y,this._z=e*i+t*this._z,this.normalize(),this._onChangeCallback(),this}const l=Math.sqrt(d),u=Math.atan2(l,n),r=Math.sin((1-t)*u)/l,c=Math.sin(t*u)/l;return this._w=a*r+this._w*c,this._x=s*r+this._x*c,this._y=o*r+this._y*c,this._z=i*r+this._z*c,this._onChangeCallback(),this}slerpQuaternions(e,t,n){return this.copy(e).slerp(t,n)}random(){const e=Math.random(),t=Math.sqrt(1-e),n=Math.sqrt(e),s=2*Math.PI*Math.random(),o=2*Math.PI*Math.random();return this.set(t*Math.cos(s),n*Math.sin(o),n*Math.cos(o),t*Math.sin(s))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){return this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e}fromBufferAttribute(e,t){return this._x=e.getX(t),this._y=e.getY(t),this._z=e.getZ(t),this._w=e.getW(t),this}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}}T.prototype.isQuaternion=!0;class t{constructor(e=0,t=0,n=0){this.x=e,this.y=t,this.z=n}set(e,t,n){return n===void 0&&(n=this.z),this.x=e,this.y=t,this.z=n,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e,t){return t!==void 0?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this)}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this}sub(e,t){return t!==void 0?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this)}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}multiply(e,t){return t!==void 0?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(e,t)):(this.x*=e.x,this.y*=e.y,this.z*=e.z,this)}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this}applyEuler(e){return e&&e.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(oc.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(oc.setFromAxisAngle(e,t))}applyMatrix3(e){const n=this.x,s=this.y,o=this.z,t=e.elements;return this.x=t[0]*n+t[3]*s+t[6]*o,this.y=t[1]*n+t[4]*s+t[7]*o,this.z=t[2]*n+t[5]*s+t[8]*o,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const n=this.x,s=this.y,o=this.z,t=e.elements,i=1/(t[3]*n+t[7]*s+t[11]*o+t[15]);return this.x=(t[0]*n+t[4]*s+t[8]*o+t[12])*i,this.y=(t[1]*n+t[5]*s+t[9]*o+t[13])*i,this.z=(t[2]*n+t[6]*s+t[10]*o+t[14])*i,this}applyQuaternion(e){const i=this.x,a=this.y,r=this.z,t=e.x,n=e.y,s=e.z,o=e.w,c=o*i+n*r-s*a,l=o*a+s*i-t*r,d=o*r+t*a-n*i,u=-t*i-n*a-s*r;return this.x=c*o+u*-t+l*-s-d*-n,this.y=l*o+u*-n+d*-t-c*-s,this.z=d*o+u*-s+c*-n-l*-t,this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const n=this.x,s=this.y,o=this.z,t=e.elements;return this.x=t[0]*n+t[4]*s+t[8]*o,this.y=t[1]*n+t[5]*s+t[9]*o,this.z=t[2]*n+t[6]*s+t[10]*o,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this}cross(e,t){return t!==void 0?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(e,t)):this.crossVectors(this,e)}crossVectors(e,t){const n=e.x,s=e.y,o=e.z,i=t.x,a=t.y,r=t.z;return this.x=s*r-o*a,this.y=o*i-n*r,this.z=n*a-s*i,this}projectOnVector(e){const t=e.lengthSq();if(t===0)return this.set(0,0,0);const n=e.dot(this)/t;return this.copy(e).multiplyScalar(n)}projectOnPlane(e){return fa.copy(this).projectOnVector(e),this.sub(fa)}reflect(e){return this.sub(fa.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(b(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y,s=this.z-e.z;return t*t+n*n+s*s}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,n){const s=Math.sin(t)*e;return this.x=s*Math.sin(n),this.y=Math.cos(t)*e,this.z=s*Math.cos(n),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,n){return this.x=e*Math.sin(t),this.y=n,this.z=e*Math.cos(t),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length(),n=this.setFromMatrixColumn(e,1).length(),s=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=n,this.z=s,this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,t*4)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,t*3)}setFromEuler(e){return this.x=e._x,this.y=e._y,this.z=e._z,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t,n){return n!==void 0&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const e=(Math.random()-.5)*2,t=Math.random()*Math.PI*2,n=Math.sqrt(1-e**2);return this.x=n*Math.cos(t),this.y=n*Math.sin(t),this.z=e,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}t.prototype.isVector3=!0;const fa=new t,oc=new T;class Y{constructor(e=new t(+(1/0),+(1/0),+(1/0)),n=new t(-(1/0),-(1/0),-(1/0))){this.min=e,this.max=n}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromArray(e){let t=+(1/0),n=+(1/0),s=+(1/0),o=-(1/0),i=-(1/0),a=-(1/0);for(let r=0,u=e.length;r<u;r+=3){const c=e[r],l=e[r+1],d=e[r+2];c<t&&(t=c),l<n&&(n=l),d<s&&(s=d),c>o&&(o=c),l>i&&(i=l),d>a&&(a=d)}return this.min.set(t,n,s),this.max.set(o,i,a),this}setFromBufferAttribute(e){let t=+(1/0),n=+(1/0),s=+(1/0),o=-(1/0),i=-(1/0),a=-(1/0);for(let r=0,u=e.count;r<u;r++){const c=e.getX(r),l=e.getY(r),d=e.getZ(r);c<t&&(t=c),l<n&&(n=l),d<s&&(s=d),c>o&&(o=c),l>i&&(i=l),d>a&&(a=d)}return this.min.set(t,n,s),this.max.set(o,i,a),this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const n=lt.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}setFromObject(e,t=!1){return this.makeEmpty(),this.expandByObject(e,t)}clone(){return(new this.constructor).copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=+(1/0),this.max.x=this.max.y=this.max.z=-(1/0),this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(e,t=!1){e.updateWorldMatrix(!1,!1);const n=e.geometry;if(n!==void 0)if(t&&n.attributes!=void 0&&n.attributes.position!==void 0){const t=n.attributes.position;for(let n=0,s=t.count;n<s;n++)lt.fromBufferAttribute(t,n).applyMatrix4(e.matrixWorld),this.expandByPoint(lt)}else n.boundingBox===null&&n.computeBoundingBox(),la.copy(n.boundingBox),la.applyMatrix4(e.matrixWorld),this.union(la);const s=e.children;for(let e=0,n=s.length;e<n;e++)this.expandByObject(s[e],t);return this}containsPoint(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z)}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z)}intersectsSphere(e){return this.clampPoint(e.center,lt),lt.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,n;return e.normal.x>0?(t=e.normal.x*this.min.x,n=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,n=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,n+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,n+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,n+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,n+=e.normal.z*this.min.z),t<=-e.constant&&n>=-e.constant}intersectsTriangle(e){if(this.isEmpty())return!1;this.getCenter(zn),Ds.subVectors(this.max,zn),Bt.subVectors(e.a,zn),kt.subVectors(e.b,zn),rn.subVectors(e.c,zn),He.subVectors(kt,Bt),Le.subVectors(rn,kt),qe.subVectors(Bt,rn);let t=[0,-He.z,He.y,0,-Le.z,Le.y,0,-qe.z,qe.y,He.z,0,-He.x,Le.z,0,-Le.x,qe.z,0,-qe.x,-He.y,He.x,0,-Le.y,Le.x,0,-qe.y,qe.x,0];return!!Xi(t,Bt,kt,rn,Ds)&&(t=[1,0,0,0,1,0,0,0,1],!!Xi(t,Bt,kt,rn,Ds)&&(Ns.crossVectors(He,Le),t=[Ns.x,Ns.y,Ns.z],Xi(t,Bt,kt,rn,Ds)))}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){const t=lt.copy(e).clamp(this.min,this.max);return t.sub(e).length()}getBoundingSphere(e){return this.getCenter(e.center),e.radius=this.getSize(lt).length()*.5,e}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}applyMatrix4(e){return this.isEmpty()?this:(be[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),be[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),be[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),be[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),be[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),be[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),be[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),be[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(be),this)}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}Y.prototype.isBox3=!0;const be=[new t,new t,new t,new t,new t,new t,new t,new t],lt=new t,la=new Y,Bt=new t,kt=new t,rn=new t,He=new t,Le=new t,qe=new t,zn=new t,Ds=new t,Ns=new t,Ze=new t;function Xi(e,t,n,s,o){for(let i=0,l=e.length-3;i<=l;i+=3){Ze.fromArray(e,i);const d=o.x*Math.abs(Ze.x)+o.y*Math.abs(Ze.y)+o.z*Math.abs(Ze.z),a=t.dot(Ze),r=n.dot(Ze),c=s.dot(Ze);if(Math.max(-Math.max(a,r,c),Math.min(a,r,c))>d)return!1}return!0}const $2=new Y,Vc=new t,Is=new t,Ui=new t;class ke{constructor(e=new t,n=-1){this.center=e,this.radius=n}set(e,t){return this.center.copy(e),this.radius=t,this}setFromPoints(e,t){const n=this.center;t!==void 0?n.copy(t):$2.setFromPoints(e).getCenter(n);let s=0;for(let t=0,o=e.length;t<o;t++)s=Math.max(s,n.distanceToSquared(e[t]));return this.radius=Math.sqrt(s),this}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const n=this.center.distanceToSquared(e);return t.copy(e),n>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t}getBoundingBox(e){return this.isEmpty()?(e.makeEmpty(),e):(e.set(this.center,this.center),e.expandByScalar(this.radius),e)}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}translate(e){return this.center.add(e),this}expandByPoint(e){Ui.subVectors(e,this.center);const t=Ui.lengthSq();if(t>this.radius*this.radius){const e=Math.sqrt(t),n=(e-this.radius)*.5;this.center.add(Ui.multiplyScalar(n/e)),this.radius+=n}return this}union(e){return this.center.equals(e.center)===!0?Is.set(0,0,1).multiplyScalar(e.radius):Is.subVectors(e.center,this.center).normalize().multiplyScalar(e.radius),this.expandByPoint(Vc.copy(e.center).add(Is)),this.expandByPoint(Vc.copy(e.center).sub(Is)),this}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return(new this.constructor).copy(this)}}const ye=new t,Vi=new t,Us=new t,ze=new t,Pi=new t,Ys=new t,Li=new t;class Te{constructor(e=new t,n=new t(0,0,-1)){this.origin=e,this.direction=n}set(e,t){return this.origin.copy(e),this.direction.copy(t),this}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}at(e,t){return t.copy(this.direction).multiplyScalar(e).add(this.origin)}lookAt(e){return this.direction.copy(e).sub(this.origin).normalize(),this}recast(e){return this.origin.copy(this.at(e,ye)),this}closestPointToPoint(e,t){t.subVectors(e,this.origin);const n=t.dot(this.direction);return n<0?t.copy(this.origin):t.copy(this.direction).multiplyScalar(n).add(this.origin)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const t=ye.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(ye.copy(this.direction).multiplyScalar(t).add(this.origin),ye.distanceToSquared(e))}distanceSqToSegment(e,t,n,s){Vi.copy(e).add(t).multiplyScalar(.5),Us.copy(t).sub(e).normalize(),ze.copy(this.origin).sub(Vi);const a=e.distanceTo(t)*.5,r=-this.direction.dot(Us),l=ze.dot(this.direction),c=-ze.dot(Us),u=ze.lengthSq(),m=Math.abs(1-r*r);let i,o,d,h;if(m>0)if(i=r*c-l,o=r*l-c,h=a*m,i>=0)if(o>=-h)if(o<=h){const e=1/m;i*=e,o*=e,d=i*(i+r*o+2*l)+o*(r*i+o+2*c)+u}else o=a,i=Math.max(0,-(r*o+l)),d=-i*i+o*(o+2*c)+u;else o=-a,i=Math.max(0,-(r*o+l)),d=-i*i+o*(o+2*c)+u;else o<=-h?(i=Math.max(0,-(-r*a+l)),o=i>0?-a:Math.min(Math.max(-a,-c),a),d=-i*i+o*(o+2*c)+u):o<=h?(i=0,o=Math.min(Math.max(-a,-c),a),d=o*(o+2*c)+u):(i=Math.max(0,-(r*a+l)),o=i>0?a:Math.min(Math.max(-a,-c),a),d=-i*i+o*(o+2*c)+u);else o=r>0?-a:a,i=Math.max(0,-(r*o+l)),d=-i*i+o*(o+2*c)+u;return n&&n.copy(this.direction).multiplyScalar(i).add(this.origin),s&&s.copy(Us).multiplyScalar(o).add(Vi),d}intersectSphere(e,t){ye.subVectors(e.center,this.origin);const n=ye.dot(this.direction),o=ye.dot(ye)-n*n,i=e.radius*e.radius;if(o>i)return null;const a=Math.sqrt(i-o),s=n-a,r=n+a;return s<0&&r<0?null:s<0?this.at(r,t):this.at(s,t)}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(t===0)return e.distanceToPoint(this.origin)===0?0:null;const n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null}intersectPlane(e,t){const n=this.distanceToPlane(e);return n===null?null:this.at(n,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);if(t===0)return!0;const n=e.normal.dot(this.direction);return n*t<0}intersectBox(e,t){let n,s,i,a,r,c;const l=1/this.direction.x,d=1/this.direction.y,u=1/this.direction.z,o=this.origin;return l>=0?(n=(e.min.x-o.x)*l,s=(e.max.x-o.x)*l):(n=(e.max.x-o.x)*l,s=(e.min.x-o.x)*l),d>=0?(i=(e.min.y-o.y)*d,a=(e.max.y-o.y)*d):(i=(e.max.y-o.y)*d,a=(e.min.y-o.y)*d),n>a||i>s?null:((i>n||n!==n)&&(n=i),(a<s||s!==s)&&(s=a),u>=0?(r=(e.min.z-o.z)*u,c=(e.max.z-o.z)*u):(r=(e.max.z-o.z)*u,c=(e.min.z-o.z)*u),n>c||r>s?null:((r>n||n!==n)&&(n=r),(c<s||s!==s)&&(s=c),s<0?null:this.at(n>=0?n:s,t)))}intersectsBox(e){return this.intersectBox(e,ye)!==null}intersectTriangle(e,t,n,s,o){Pi.subVectors(t,e),Ys.subVectors(n,e),Li.crossVectors(Pi,Ys);let i=this.direction.dot(Li),a;if(i>0){if(s)return null;a=1}else if(i<0)a=-1,i=-i;else return null;ze.subVectors(this.origin,e);const r=a*this.direction.dot(Ys.crossVectors(ze,Ys));if(r<0)return null;const c=a*this.direction.dot(Pi.cross(ze));if(c<0)return null;if(r+c>i)return null;const l=-a*ze.dot(Li);return l<0?null:this.at(l/i,o)}applyMatrix4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}class a{constructor(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}set(e,t,n,s,o,i,a,r,c,l,d,u,h,m,f,p){const g=this.elements;return g[0]=e,g[4]=t,g[8]=n,g[12]=s,g[1]=o,g[5]=i,g[9]=a,g[13]=r,g[2]=c,g[6]=l,g[10]=d,g[14]=u,g[3]=h,g[7]=m,g[11]=f,g[15]=p,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return(new a).fromArray(this.elements)}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],this}copyPosition(e){const t=this.elements,n=e.elements;return t[12]=n[12],t[13]=n[13],t[14]=n[14],this}setFromMatrix3(e){const t=e.elements;return this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1),this}extractBasis(e,t,n){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(e,t,n){return this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1),this}extractRotation(e){const t=this.elements,n=e.elements,s=1/en.setFromMatrixColumn(e,0).length(),o=1/en.setFromMatrixColumn(e,1).length(),i=1/en.setFromMatrixColumn(e,2).length();return t[0]=n[0]*s,t[1]=n[1]*s,t[2]=n[2]*s,t[3]=0,t[4]=n[4]*o,t[5]=n[5]*o,t[6]=n[6]*o,t[7]=0,t[8]=n[8]*i,t[9]=n[9]*i,t[10]=n[10]*i,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(e){e&&e.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");const t=this.elements,c=e.x,l=e.y,d=e.z,i=Math.cos(c),n=Math.sin(c),a=Math.cos(l),s=Math.sin(l),r=Math.cos(d),o=Math.sin(d);if(e.order==="XYZ"){const e=i*r,c=i*o,l=n*r,d=n*o;t[0]=a*r,t[4]=-a*o,t[8]=s,t[1]=c+l*s,t[5]=e-d*s,t[9]=-n*a,t[2]=d-e*s,t[6]=l+c*s,t[10]=i*a}else if(e.order==="YXZ"){const e=a*r,c=a*o,l=s*r,d=s*o;t[0]=e+d*n,t[4]=l*n-c,t[8]=i*s,t[1]=i*o,t[5]=i*r,t[9]=-n,t[2]=c*n-l,t[6]=d+e*n,t[10]=i*a}else if(e.order==="ZXY"){const e=a*r,c=a*o,l=s*r,d=s*o;t[0]=e-d*n,t[4]=-i*o,t[8]=l+c*n,t[1]=c+l*n,t[5]=i*r,t[9]=d-e*n,t[2]=-i*s,t[6]=n,t[10]=i*a}else if(e.order==="ZYX"){const e=i*r,c=i*o,l=n*r,d=n*o;t[0]=a*r,t[4]=l*s-c,t[8]=e*s+d,t[1]=a*o,t[5]=d*s+e,t[9]=c*s-l,t[2]=-s,t[6]=n*a,t[10]=i*a}else if(e.order==="YZX"){const e=i*a,c=i*s,l=n*a,d=n*s;t[0]=a*r,t[4]=d-e*o,t[8]=l*o+c,t[1]=o,t[5]=i*r,t[9]=-n*r,t[2]=-s*r,t[6]=c*o+l,t[10]=e-d*o}else if(e.order==="XZY"){const e=i*a,c=i*s,l=n*a,d=n*s;t[0]=a*r,t[4]=-o,t[8]=s*r,t[1]=e*o+d,t[5]=i*r,t[9]=c*o-l,t[2]=l*o-c,t[6]=n*r,t[10]=d*o+e}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(e){return this.compose(p2,e,f2)}lookAt(e,t,n){const s=this.elements;return W.subVectors(e,t),W.lengthSq()===0&&(W.z=1),W.normalize(),Me.crossVectors(n,W),Me.lengthSq()===0&&(Math.abs(n.z)===1?W.x+=1e-4:W.z+=1e-4,W.normalize(),Me.crossVectors(n,W)),Me.normalize(),so.crossVectors(W,Me),s[0]=Me.x,s[4]=so.x,s[8]=W.x,s[1]=Me.y,s[5]=so.y,s[9]=W.y,s[2]=Me.z,s[6]=so.z,s[10]=W.z,this}multiply(e,t){return t!==void 0?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(e,t)):this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,s=t.elements,o=this.elements,i=n[0],a=n[4],r=n[8],c=n[12],l=n[1],d=n[5],u=n[9],h=n[13],m=n[2],f=n[6],p=n[10],g=n[14],v=n[3],b=n[7],j=n[11],y=n[15],_=s[0],w=s[4],O=s[8],x=s[12],C=s[1],E=s[5],k=s[9],A=s[13],S=s[2],M=s[6],F=s[10],T=s[14],z=s[3],D=s[7],N=s[11],L=s[15];return o[0]=i*_+a*C+r*S+c*z,o[4]=i*w+a*E+r*M+c*D,o[8]=i*O+a*k+r*F+c*N,o[12]=i*x+a*A+r*T+c*L,o[1]=l*_+d*C+u*S+h*z,o[5]=l*w+d*E+u*M+h*D,o[9]=l*O+d*k+u*F+h*N,o[13]=l*x+d*A+u*T+h*L,o[2]=m*_+f*C+p*S+g*z,o[6]=m*w+f*E+p*M+g*D,o[10]=m*O+f*k+p*F+g*N,o[14]=m*x+f*A+p*T+g*L,o[3]=v*_+b*C+j*S+y*z,o[7]=v*w+b*E+j*M+y*D,o[11]=v*O+b*k+j*F+y*N,o[15]=v*x+b*A+j*T+y*L,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[4],s=e[8],o=e[12],i=e[1],a=e[5],r=e[9],c=e[13],l=e[2],d=e[6],u=e[10],h=e[14],m=e[3],f=e[7],p=e[11],g=e[15];return m*(+o*r*d-s*c*d-o*a*u+n*c*u+s*a*h-n*r*h)+f*(+t*r*h-t*c*u+o*i*u-s*i*h+s*c*l-o*r*l)+p*(+t*c*d-t*a*h-o*i*d+n*i*h+o*a*l-n*c*l)+g*(-s*a*l-t*r*d+t*a*u+s*i*d-n*i*u+n*r*l)}transpose(){const e=this.elements;let t;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this}setPosition(e,t,n){const s=this.elements;return e.isVector3?(s[12]=e.x,s[13]=e.y,s[14]=e.z):(s[12]=e,s[13]=t,s[14]=n),this}invert(){const e=this.elements,t=e[0],n=e[1],s=e[2],o=e[3],d=e[4],f=e[5],r=e[6],c=e[7],l=e[8],i=e[9],u=e[10],h=e[11],m=e[12],a=e[13],p=e[14],g=e[15],b=i*p*c-a*u*c+a*r*h-f*p*h-i*r*g+f*u*g,j=m*u*c-l*p*c-m*r*h+d*p*h+l*r*g-d*u*g,y=l*a*c-m*i*c+m*f*h-d*a*h-l*f*g+d*i*g,_=m*i*r-l*a*r-m*f*u+d*a*u+l*f*p-d*i*p,w=t*b+n*j+s*y+o*_;if(w===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const v=1/w;return e[0]=b*v,e[1]=(a*u*o-i*p*o-a*s*h+n*p*h+i*s*g-n*u*g)*v,e[2]=(f*p*o-a*r*o+a*s*c-n*p*c-f*s*g+n*r*g)*v,e[3]=(i*r*o-f*u*o-i*s*c+n*u*c+f*s*h-n*r*h)*v,e[4]=j*v,e[5]=(l*p*o-m*u*o+m*s*h-t*p*h-l*s*g+t*u*g)*v,e[6]=(m*r*o-d*p*o-m*s*c+t*p*c+d*s*g-t*r*g)*v,e[7]=(d*u*o-l*r*o+l*s*c-t*u*c-d*s*h+t*r*h)*v,e[8]=y*v,e[9]=(m*i*o-l*a*o-m*n*h+t*a*h+l*n*g-t*i*g)*v,e[10]=(d*a*o-m*f*o+m*n*c-t*a*c-d*n*g+t*f*g)*v,e[11]=(l*f*o-d*i*o-l*n*c+t*i*c+d*n*h-t*f*h)*v,e[12]=_*v,e[13]=(l*a*s-m*i*s+m*n*u-t*a*u-l*n*p+t*i*p)*v,e[14]=(m*f*s-d*a*s-m*n*r+t*a*r+d*n*p-t*f*p)*v,e[15]=(d*i*s-l*f*s+l*n*r-t*i*r-d*n*u+t*f*u)*v,this}scale(e){const t=this.elements,n=e.x,s=e.y,o=e.z;return t[0]*=n,t[4]*=s,t[8]*=o,t[1]*=n,t[5]*=s,t[9]*=o,t[2]*=n,t[6]*=s,t[10]*=o,t[3]*=n,t[7]*=s,t[11]*=o,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],s=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,s))}makeTranslation(e,t,n){return this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1),this}makeRotationX(e){const t=Math.cos(e),n=Math.sin(e);return this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1),this}makeRotationY(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1),this}makeRotationZ(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,t){const a=Math.cos(t),s=Math.sin(t),c=1-a,r=e.x,o=e.y,n=e.z,i=c*r,l=c*o;return this.set(i*r+a,i*o-s*n,i*n+s*o,0,i*o+s*n,l*o+a,l*n-s*r,0,i*n-s*o,l*n+s*r,c*n*n+a,0,0,0,0,1),this}makeScale(e,t,n){return this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1),this}makeShear(e,t,n,s,o,i){return this.set(1,n,o,0,e,1,i,0,t,s,1,0,0,0,0,1),this}compose(e,t,n){const s=this.elements,o=t._x,i=t._y,r=t._z,c=t._w,w=o+o,d=i+i,a=r+r,_=o*w,y=o*d,m=o*a,f=i*d,p=i*a,g=r*a,v=c*w,b=c*d,j=c*a,h=n.x,u=n.y,l=n.z;return s[0]=(1-(f+g))*h,s[1]=(y+j)*h,s[2]=(m-b)*h,s[3]=0,s[4]=(y-j)*u,s[5]=(1-(_+g))*u,s[6]=(p+v)*u,s[7]=0,s[8]=(m+b)*l,s[9]=(p-v)*l,s[10]=(1-(_+f))*l,s[11]=0,s[12]=e.x,s[13]=e.y,s[14]=e.z,s[15]=1,this}decompose(e,t,n){const s=this.elements;let o=en.set(s[0],s[1],s[2]).length();const c=en.set(s[4],s[5],s[6]).length(),l=en.set(s[8],s[9],s[10]).length(),d=this.determinant();d<0&&(o=-o),e.x=s[12],e.y=s[13],e.z=s[14],te.copy(this);const i=1/o,a=1/c,r=1/l;return te.elements[0]*=i,te.elements[1]*=i,te.elements[2]*=i,te.elements[4]*=a,te.elements[5]*=a,te.elements[6]*=a,te.elements[8]*=r,te.elements[9]*=r,te.elements[10]*=r,t.setFromRotationMatrix(te),n.x=o,n.y=c,n.z=l,this}makePerspective(e,t,n,s,o,i){i===void 0&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");const a=this.elements,r=2*o/(t-e),c=2*o/(n-s),l=(t+e)/(t-e),d=(n+s)/(n-s),u=-(i+o)/(i-o),h=-2*i*o/(i-o);return a[0]=r,a[4]=0,a[8]=l,a[12]=0,a[1]=0,a[5]=c,a[9]=d,a[13]=0,a[2]=0,a[6]=0,a[10]=u,a[14]=h,a[3]=0,a[7]=0,a[11]=-1,a[15]=0,this}makeOrthographic(e,t,n,s,o,i){const a=this.elements,r=1/(t-e),c=1/(n-s),l=1/(i-o),d=(t+e)*r,u=(n+s)*c,h=(i+o)*l;return a[0]=2*r,a[4]=0,a[8]=0,a[12]=-d,a[1]=0,a[5]=2*c,a[9]=0,a[13]=-u,a[2]=0,a[6]=0,a[10]=-2*l,a[14]=-h,a[3]=0,a[7]=0,a[11]=0,a[15]=1,this}equals(e){const t=this.elements,n=e.elements;for(let e=0;e<16;e++)if(t[e]!==n[e])return!1;return!0}fromArray(e,t=0){for(let n=0;n<16;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e[t+9]=n[9],e[t+10]=n[10],e[t+11]=n[11],e[t+12]=n[12],e[t+13]=n[13],e[t+14]=n[14],e[t+15]=n[15],e}}a.prototype.isMatrix4=!0;const en=new t,te=new a,p2=new t(0,0,0),f2=new t(1,1,1),Me=new t,so=new t,W=new t,wl=new a,Cl=new T;class Ge{constructor(e=0,t=0,n=0,s=Ge.DefaultOrder){this._x=e,this._y=t,this._z=n,this._order=s}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e,this._onChangeCallback()}set(e,t,n,s=this._order){return this._x=e,this._y=t,this._z=n,this._order=s,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this}setFromRotationMatrix(e,t=this._order,n=!0){const s=e.elements,o=s[0],r=s[4],c=s[8],l=s[1],i=s[5],d=s[9],u=s[2],h=s[6],a=s[10];switch(t){case"XYZ":this._y=Math.asin(b(c,-1,1)),Math.abs(c)<.9999999?(this._x=Math.atan2(-d,a),this._z=Math.atan2(-r,o)):(this._x=Math.atan2(h,i),this._z=0);break;case"YXZ":this._x=Math.asin(-b(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(c,a),this._z=Math.atan2(l,i)):(this._y=Math.atan2(-u,o),this._z=0);break;case"ZXY":this._x=Math.asin(b(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(-u,a),this._z=Math.atan2(-r,i)):(this._y=0,this._z=Math.atan2(l,o));break;case"ZYX":this._y=Math.asin(-b(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(h,a),this._z=Math.atan2(l,o)):(this._x=0,this._z=Math.atan2(-r,i));break;case"YZX":this._z=Math.asin(b(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(-d,i),this._y=Math.atan2(-u,o)):(this._x=0,this._y=Math.atan2(c,a));break;case"XZY":this._z=Math.asin(-b(r,-1,1)),Math.abs(r)<.9999999?(this._x=Math.atan2(h,i),this._y=Math.atan2(c,o)):(this._x=Math.atan2(-d,a),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}return this._order=t,n===!0&&this._onChangeCallback(),this}setFromQuaternion(e,t,n){return wl.makeRotationFromQuaternion(e),this.setFromRotationMatrix(wl,t,n)}setFromVector3(e,t=this._order){return this.set(e.x,e.y,e.z,t)}reorder(e){return Cl.setFromEuler(this),this.setFromQuaternion(Cl,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){return this._x=e[0],this._y=e[1],this._z=e[2],e[3]!==void 0&&(this._order=e[3]),this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}}Ge.prototype.isEuler=!0,Ge.DefaultOrder="XYZ",Ge.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];class co{constructor(){this.mask=1|0}set(e){this.mask=(1<<e|0)>>>0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=4294967295|0}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!==0}isEnabled(e){return(this.mask&(1<<e|0))!==0}}let o2=0;const Ml=new t,dn=new T,Oe=new a,fo=new t,pn=new t,U0=new t,V0=new T,$l=new t(1,0,0),Wl=new t(0,1,0),ql=new t(0,0,1),A0={type:"added"},ed={type:"removed"};class l extends Ee{constructor(){super(),Object.defineProperty(this,"id",{value:o2++}),this.uuid=$(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=l.DefaultUp.clone();const s=new t,e=new Ge,n=new T,o=new t(1,1,1);function i(){n.setFromEuler(e,!1)}function r(){e.setFromQuaternion(n,void 0,!1)}e._onChange(i),n._onChange(r),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:s},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:o},modelViewMatrix:{value:new a},normalMatrix:{value:new E}}),this.matrix=new a,this.matrixWorld=new a,this.matrixAutoUpdate=l.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new co,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){return this.quaternion.premultiply(e),this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,!0)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,t){return dn.setFromAxisAngle(e,t),this.quaternion.multiply(dn),this}rotateOnWorldAxis(e,t){return dn.setFromAxisAngle(e,t),this.quaternion.premultiply(dn),this}rotateX(e){return this.rotateOnAxis($l,e)}rotateY(e){return this.rotateOnAxis(Wl,e)}rotateZ(e){return this.rotateOnAxis(ql,e)}translateOnAxis(e,t){return Ml.copy(e).applyQuaternion(this.quaternion),this.position.add(Ml.multiplyScalar(t)),this}translateX(e){return this.translateOnAxis($l,e)}translateY(e){return this.translateOnAxis(Wl,e)}translateZ(e){return this.translateOnAxis(ql,e)}localToWorld(e){return e.applyMatrix4(this.matrixWorld)}worldToLocal(e){return e.applyMatrix4(Oe.copy(this.matrixWorld).invert())}lookAt(e,t,n){e.isVector3?fo.copy(e):fo.set(e,t,n);const s=this.parent;this.updateWorldMatrix(!0,!1),pn.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Oe.lookAt(pn,fo,this.up):Oe.lookAt(fo,pn,this.up),this.quaternion.setFromRotationMatrix(Oe),s&&(Oe.extractRotation(s.matrixWorld),dn.setFromRotationMatrix(Oe),this.quaternion.premultiply(dn.invert()))}add(e){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(e.parent!==null&&e.parent.remove(e),e.parent=this,this.children.push(e),e.dispatchEvent(A0)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)}remove(e){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.remove(arguments[e]);return this}const t=this.children.indexOf(e);return t!==-1&&(e.parent=null,this.children.splice(t,1),e.dispatchEvent(ed)),this}removeFromParent(){const e=this.parent;return e!==null&&e.remove(this),this}clear(){for(let e=0;e<this.children.length;e++){const t=this.children[e];t.parent=null,t.dispatchEvent(ed)}return this.children.length=0,this}attach(e){return this.updateWorldMatrix(!0,!1),Oe.copy(this.matrixWorld).invert(),e.parent!==null&&(e.parent.updateWorldMatrix(!0,!1),Oe.multiply(e.parent.matrixWorld)),e.applyMatrix4(Oe),this.add(e),e.updateWorldMatrix(!1,!0),this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,t){if(this[e]===t)return this;for(let n=0,o=this.children.length;n<o;n++){const i=this.children[n],s=i.getObjectByProperty(e,t);if(s!==void 0)return s}}getWorldPosition(e){return this.updateWorldMatrix(!0,!1),e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(pn,e,U0),e}getWorldScale(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(pn,V0,e),e}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(e){e(this);const t=this.children;for(let n=0,s=t.length;n<s;n++)t[n].traverse(e)}traverseVisible(e){if(this.visible===!1)return;e(this);const t=this.children;for(let n=0,s=t.length;n<s;n++)t[n].traverseVisible(e)}traverseAncestors(e){const t=this.parent;t!==null&&(e(t),t.traverseAncestors(e))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0);const t=this.children;for(let n=0,s=t.length;n<s;n++)t[n].updateMatrixWorld(e)}updateWorldMatrix(e,t){const n=this.parent;if(e===!0&&n!==null&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),t===!0){const e=this.children;for(let t=0,n=e.length;t<n;t++)e[t].updateWorldMatrix(!1,!0)}}toJSON(e){const i=e===void 0||typeof e=="string",n={};i&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const t={};t.uuid=this.uuid,t.type=this.type,this.name!==""&&(t.name=this.name),this.castShadow===!0&&(t.castShadow=!0),this.receiveShadow===!0&&(t.receiveShadow=!0),this.visible===!1&&(t.visible=!1),this.frustumCulled===!1&&(t.frustumCulled=!1),this.renderOrder!==0&&(t.renderOrder=this.renderOrder),JSON.stringify(this.userData)!=="{}"&&(t.userData=this.userData),t.layers=this.layers.mask,t.matrix=this.matrix.toArray(),this.matrixAutoUpdate===!1&&(t.matrixAutoUpdate=!1),this.isInstancedMesh&&(t.type="InstancedMesh",t.count=this.count,t.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(t.instanceColor=this.instanceColor.toJSON()));function o(t,n){return t[n.uuid]===void 0&&(t[n.uuid]=n.toJSON(e)),n.uuid}if(this.isScene)this.background&&(this.background.isColor?t.background=this.background.toJSON():this.background.isTexture&&(t.background=this.background.toJSON(e).uuid)),this.environment&&this.environment.isTexture&&(t.environment=this.environment.toJSON(e).uuid);else if(this.isMesh||this.isLine||this.isPoints){t.geometry=o(e.geometries,this.geometry);const n=this.geometry.parameters;if(n!==void 0&&n.shapes!==void 0){const t=n.shapes;if(Array.isArray(t))for(let n=0,s=t.length;n<s;n++){const i=t[n];o(e.shapes,i)}else o(e.shapes,t)}}if(this.isSkinnedMesh&&(t.bindMode=this.bindMode,t.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(o(e.skeletons,this.skeleton),t.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const n=[];for(let t=0,s=this.material.length;t<s;t++)n.push(o(e.materials,this.material[t]));t.material=n}else t.material=o(e.materials,this.material);if(this.children.length>0){t.children=[];for(let n=0;n<this.children.length;n++)t.children.push(this.children[n].toJSON(e).object)}if(this.animations.length>0){t.animations=[];for(let n=0;n<this.animations.length;n++){const s=this.animations[n];t.animations.push(o(e.animations,s))}}if(i){const t=s(e.geometries),o=s(e.materials),i=s(e.textures),a=s(e.images),r=s(e.shapes),c=s(e.skeletons),l=s(e.animations),d=s(e.nodes);t.length>0&&(n.geometries=t),o.length>0&&(n.materials=o),i.length>0&&(n.textures=i),a.length>0&&(n.images=a),r.length>0&&(n.shapes=r),c.length>0&&(n.skeletons=c),l.length>0&&(n.animations=l),d.length>0&&(n.nodes=d)}return n.object=t,n;function s(e){const t=[];for(const s in e){const n=e[s];delete n.metadata,t.push(n)}return t}}clone(e){return(new this.constructor).copy(this,e)}copy(e,t=!0){if(this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.rotation.order=e.rotation.order,this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.userData=JSON.parse(JSON.stringify(e.userData)),t===!0)for(let t=0;t<e.children.length;t++){const n=e.children[t];this.add(n.clone())}return this}}l.DefaultUp=new t(0,1,0),l.DefaultMatrixAutoUpdate=!0,l.prototype.isObject3D=!0;const oe=new t,he=new t,Ko=new t,we=new t,At=new t,an=new t,td=new t,Bo=new t,Ho=new t,Po=new t;class w{constructor(e=new t,n=new t,s=new t){this.a=e,this.b=n,this.c=s}static getNormal(e,t,n,s){s.subVectors(n,t),oe.subVectors(e,t),s.cross(oe);const o=s.lengthSq();return o>0?s.multiplyScalar(1/Math.sqrt(o)):s.set(0,0,0)}static getBarycoord(e,t,n,s,o){oe.subVectors(s,t),he.subVectors(n,t),Ko.subVectors(e,t);const a=oe.dot(oe),i=oe.dot(he),r=oe.dot(Ko),c=he.dot(he),l=he.dot(Ko),d=a*c-i*i;if(d===0)return o.set(-2,-1,-1);const u=1/d,h=(c*r-i*l)*u,m=(a*l-i*r)*u;return o.set(1-h-m,m,h)}static containsPoint(e,t,n,s){return this.getBarycoord(e,t,n,s,we),we.x>=0&&we.y>=0&&we.x+we.y<=1}static getUV(e,t,n,s,o,i,a,r){return this.getBarycoord(e,t,n,s,we),r.set(0,0),r.addScaledVector(o,we.x),r.addScaledVector(i,we.y),r.addScaledVector(a,we.z),r}static isFrontFacing(e,t,n,s){return oe.subVectors(n,t),he.subVectors(e,t),oe.cross(he).dot(s)<0}set(e,t,n){return this.a.copy(e),this.b.copy(t),this.c.copy(n),this}setFromPointsAndIndices(e,t,n,s){return this.a.copy(e[t]),this.b.copy(e[n]),this.c.copy(e[s]),this}setFromAttributeAndIndices(e,t,n,s){return this.a.fromBufferAttribute(e,t),this.b.fromBufferAttribute(e,n),this.c.fromBufferAttribute(e,s),this}clone(){return(new this.constructor).copy(this)}copy(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this}getArea(){return oe.subVectors(this.c,this.b),he.subVectors(this.a,this.b),oe.cross(he).length()*.5}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return w.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return w.getBarycoord(e,this.a,this.b,this.c,t)}getUV(e,t,n,s,o){return w.getUV(e,this.a,this.b,this.c,t,n,s,o)}containsPoint(e){return w.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return w.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){const o=this.a,d=this.b,h=this.c;let u,i;At.subVectors(d,o),an.subVectors(h,o),Bo.subVectors(e,o);const a=At.dot(Bo),r=an.dot(Bo);if(a<=0&&r<=0)return t.copy(o);Ho.subVectors(e,d);const n=At.dot(Ho),c=an.dot(Ho);if(n>=0&&c<=n)return t.copy(d);const m=a*c-n*r;if(m<=0&&a>=0&&n<=0)return u=a/(a-n),t.copy(o).addScaledVector(At,u);Po.subVectors(e,h);const l=At.dot(Po),s=an.dot(Po);if(s>=0&&l<=s)return t.copy(h);const f=l*r-a*s;if(f<=0&&r>=0&&s<=0)return i=r/(r-s),t.copy(o).addScaledVector(an,i);const p=n*s-l*c;if(p<=0&&c-n>=0&&l-s>=0)return td.subVectors(h,d),i=(c-n)/(c-n+(l-s)),t.copy(d).addScaledVector(td,i);const g=1/(p+f+m);return u=f*g,i=m*g,t.copy(o).addScaledVector(At,u).addScaledVector(an,i)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}let f0=0;class y extends Ee{constructor(){super(),Object.defineProperty(this,"id",{value:f0++}),this.uuid=$(),this.name="",this.type="Material",this.fog=!0,this.blending=xt,this.side=pt,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=oi,this.blendDst=si,this.blendEquation=ht,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=zo,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=sd,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=no,this.stencilZFail=no,this.stencilZPass=no,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){this._alphaTest>0!==e>0&&this.version++,this._alphaTest=e}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(e===void 0)return;for(const s in e){const t=e[s];if(t===void 0){console.warn("THREE.Material: '"+s+"' parameter is undefined.");continue}if(s==="shading"){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=t===Qi;continue}const n=this[s];if(n===void 0){console.warn("THREE."+this.type+": '"+s+"' is not a property of this material.");continue}n&&n.isColor?n.set(t):n&&n.isVector3&&t&&t.isVector3?n.copy(t):this[s]=t}}toJSON(e){const n=e===void 0||typeof e=="string";n&&(e={textures:{},images:{}});const t={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};t.uuid=this.uuid,t.type=this.type,this.name!==""&&(t.name=this.name),this.color&&this.color.isColor&&(t.color=this.color.getHex()),this.roughness!==void 0&&(t.roughness=this.roughness),this.metalness!==void 0&&(t.metalness=this.metalness),this.sheen!==void 0&&(t.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(t.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(t.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(t.emissive=this.emissive.getHex()),this.emissiveIntensity&&this.emissiveIntensity!==1&&(t.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(t.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(t.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(t.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(t.shininess=this.shininess),this.clearcoat!==void 0&&(t.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(t.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(t.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(t.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(t.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,t.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.map&&this.map.isTexture&&(t.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(t.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(t.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(t.lightMap=this.lightMap.toJSON(e).uuid,t.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(t.aoMap=this.aoMap.toJSON(e).uuid,t.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(t.bumpMap=this.bumpMap.toJSON(e).uuid,t.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(t.normalMap=this.normalMap.toJSON(e).uuid,t.normalMapType=this.normalMapType,t.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(t.displacementMap=this.displacementMap.toJSON(e).uuid,t.displacementScale=this.displacementScale,t.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(t.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(t.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(t.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(t.specularMap=this.specularMap.toJSON(e).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(t.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(t.specularColorMap=this.specularColorMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(t.envMap=this.envMap.toJSON(e).uuid,this.combine!==void 0&&(t.combine=this.combine)),this.envMapIntensity!==void 0&&(t.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(t.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(t.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(t.gradientMap=this.gradientMap.toJSON(e).uuid),this.transmission!==void 0&&(t.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(t.transmissionMap=this.transmissionMap.toJSON(e).uuid),this.thickness!==void 0&&(t.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(t.thicknessMap=this.thicknessMap.toJSON(e).uuid),this.attenuationDistance!==void 0&&(t.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(t.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(t.size=this.size),this.shadowSide!==null&&(t.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(t.sizeAttenuation=this.sizeAttenuation),this.blending!==xt&&(t.blending=this.blending),this.side!==pt&&(t.side=this.side),this.vertexColors&&(t.vertexColors=!0),this.opacity<1&&(t.opacity=this.opacity),this.transparent===!0&&(t.transparent=this.transparent),t.depthFunc=this.depthFunc,t.depthTest=this.depthTest,t.depthWrite=this.depthWrite,t.colorWrite=this.colorWrite,t.stencilWrite=this.stencilWrite,t.stencilWriteMask=this.stencilWriteMask,t.stencilFunc=this.stencilFunc,t.stencilRef=this.stencilRef,t.stencilFuncMask=this.stencilFuncMask,t.stencilFail=this.stencilFail,t.stencilZFail=this.stencilZFail,t.stencilZPass=this.stencilZPass,this.rotation!==void 0&&this.rotation!==0&&(t.rotation=this.rotation),this.polygonOffset===!0&&(t.polygonOffset=!0),this.polygonOffsetFactor!==0&&(t.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(t.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(t.linewidth=this.linewidth),this.dashSize!==void 0&&(t.dashSize=this.dashSize),this.gapSize!==void 0&&(t.gapSize=this.gapSize),this.scale!==void 0&&(t.scale=this.scale),this.dithering===!0&&(t.dithering=!0),this.alphaTest>0&&(t.alphaTest=this.alphaTest),this.alphaToCoverage===!0&&(t.alphaToCoverage=this.alphaToCoverage),this.premultipliedAlpha===!0&&(t.premultipliedAlpha=this.premultipliedAlpha),this.wireframe===!0&&(t.wireframe=this.wireframe),this.wireframeLinewidth>1&&(t.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(t.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(t.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(t.flatShading=this.flatShading),this.visible===!1&&(t.visible=!1),this.toneMapped===!1&&(t.toneMapped=!1),JSON.stringify(this.userData)!=="{}"&&(t.userData=this.userData);function s(e){const t=[];for(const s in e){const n=e[s];delete n.metadata,t.push(n)}return t}if(n){const n=s(e.textures),o=s(e.images);n.length>0&&(t.textures=n),o.length>0&&(t.images=o)}return t}clone(){return(new this.constructor).copy(this)}copy(e){this.name=e.name,this.fog=e.fog,this.blending=e.blending,this.side=e.side,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let n=null;if(t!==null){const e=t.length;n=new Array(e);for(let s=0;s!==e;++s)n[s]=t[s].clone()}return this.clippingPlanes=n,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.alphaToCoverage=e.alphaToCoverage,this.premultipliedAlpha=e.premultipliedAlpha,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){e===!0&&this.version++}}y.prototype.isMaterial=!0,y.fromType=function(){return null};class ve extends y{constructor(e){super(),this.type="MeshBasicMaterial",this.color=new o(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=gn,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this}}ve.prototype.isMeshBasicMaterial=!0;const C=new t,To=new n;class d{constructor(e,t,n){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=e,this.itemSize=t,this.count=e!==void 0?e.length/t:0,this.normalized=n===!0,this.usage=tn,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}copy(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this}copyAt(e,t,n){e*=this.itemSize,n*=t.itemSize;for(let s=0,o=this.itemSize;s<o;s++)this.array[e+s]=t.array[n+s];return this}copyArray(e){return this.array.set(e),this}copyColorsArray(e){const t=this.array;let n=0;for(let i=0,a=e.length;i<a;i++){let s=e[i];s===void 0&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",i),s=new o),t[n++]=s.r,t[n++]=s.g,t[n++]=s.b}return this}copyVector2sArray(e){const t=this.array;let s=0;for(let o=0,a=e.length;o<a;o++){let i=e[o];i===void 0&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",o),i=new n),t[s++]=i.x,t[s++]=i.y}return this}copyVector3sArray(e){const n=this.array;let s=0;for(let i=0,a=e.length;i<a;i++){let o=e[i];o===void 0&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",i),o=new t),n[s++]=o.x,n[s++]=o.y,n[s++]=o.z}return this}copyVector4sArray(e){const t=this.array;let n=0;for(let o=0,i=e.length;o<i;o++){let s=e[o];s===void 0&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",o),s=new h),t[n++]=s.x,t[n++]=s.y,t[n++]=s.z,t[n++]=s.w}return this}applyMatrix3(e){if(this.itemSize===2)for(let t=0,n=this.count;t<n;t++)To.fromBufferAttribute(this,t),To.applyMatrix3(e),this.setXY(t,To.x,To.y);else if(this.itemSize===3)for(let t=0,n=this.count;t<n;t++)C.fromBufferAttribute(this,t),C.applyMatrix3(e),this.setXYZ(t,C.x,C.y,C.z);return this}applyMatrix4(e){for(let t=0,n=this.count;t<n;t++)C.fromBufferAttribute(this,t),C.applyMatrix4(e),this.setXYZ(t,C.x,C.y,C.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)C.fromBufferAttribute(this,t),C.applyNormalMatrix(e),this.setXYZ(t,C.x,C.y,C.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)C.fromBufferAttribute(this,t),C.transformDirection(e),this.setXYZ(t,C.x,C.y,C.z);return this}set(e,t=0){return this.array.set(e,t),this}getX(e){return this.array[e*this.itemSize]}setX(e,t){return this.array[e*this.itemSize]=t,this}getY(e){return this.array[e*this.itemSize+1]}setY(e,t){return this.array[e*this.itemSize+1]=t,this}getZ(e){return this.array[e*this.itemSize+2]}setZ(e,t){return this.array[e*this.itemSize+2]=t,this}getW(e){return this.array[e*this.itemSize+3]}setW(e,t){return this.array[e*this.itemSize+3]=t,this}setXY(e,t,n){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this}setXYZ(e,t,n,s){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=s,this}setXYZW(e,t,n,s,o){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=s,this.array[e+3]=o,this}onUpload(e){return this.onUploadCallback=e,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized};return this.name!==""&&(e.name=this.name),this.usage!==tn&&(e.usage=this.usage),(this.updateRange.offset!==0||this.updateRange.count!==-1)&&(e.updateRange=this.updateRange),e}}d.prototype.isBufferAttribute=!0;class Dd extends d{constructor(e,t,n){super(new Int8Array(e),t,n)}}class Nd extends d{constructor(e,t,n){super(new Uint8Array(e),t,n)}}class Rd extends d{constructor(e,t,n){super(new Uint8ClampedArray(e),t,n)}}class Id extends d{constructor(e,t,n){super(new Int16Array(e),t,n)}}class ko extends d{constructor(e,t,n){super(new Uint16Array(e),t,n)}}class Bd extends d{constructor(e,t,n){super(new Int32Array(e),t,n)}}class Co extends d{constructor(e,t,n){super(new Uint32Array(e),t,n)}}class Vd extends d{constructor(e,t,n){super(new Uint16Array(e),t,n)}}Vd.prototype.isFloat16BufferAttribute=!0;class i extends d{constructor(e,t,n){super(new Float32Array(e),t,n)}}class Wd extends d{constructor(e,t,n){super(new Float64Array(e),t,n)}}let m4=0;const X=new a,Jo=new l,Gt=new t,K=new Y,Nn=new Y,M=new t;class r extends Ee{constructor(){super(),Object.defineProperty(this,"id",{value:m4++}),this.uuid=$(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(e){return Array.isArray(e)?this.index=new(uc(e)?Co:ko)(e,1):this.index=e,this}getAttribute(e){return this.attributes[e]}setAttribute(e,t){return this.attributes[e]=t,this}deleteAttribute(e){return delete this.attributes[e],this}hasAttribute(e){return this.attributes[e]!==void 0}addGroup(e,t,n=0){this.groups.push({start:e,count:t,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}applyMatrix4(e){const t=this.attributes.position;t!==void 0&&(t.applyMatrix4(e),t.needsUpdate=!0);const n=this.attributes.normal;if(n!==void 0){const t=(new E).getNormalMatrix(e);n.applyNormalMatrix(t),n.needsUpdate=!0}const s=this.attributes.tangent;return s!==void 0&&(s.transformDirection(e),s.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(e){return X.makeRotationFromQuaternion(e),this.applyMatrix4(X),this}rotateX(e){return X.makeRotationX(e),this.applyMatrix4(X),this}rotateY(e){return X.makeRotationY(e),this.applyMatrix4(X),this}rotateZ(e){return X.makeRotationZ(e),this.applyMatrix4(X),this}translate(e,t,n){return X.makeTranslation(e,t,n),this.applyMatrix4(X),this}scale(e,t,n){return X.makeScale(e,t,n),this.applyMatrix4(X),this}lookAt(e){return Jo.lookAt(e),Jo.updateMatrix(),this.applyMatrix4(Jo.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Gt).negate(),this.translate(Gt.x,Gt.y,Gt.z),this}setFromPoints(e){const t=[];for(let n=0,o=e.length;n<o;n++){const s=e[n];t.push(s.x,s.y,s.z||0)}return this.setAttribute("position",new i(t,3)),this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new Y);const e=this.attributes.position,n=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingBox.set(new t(-(1/0),-(1/0),-(1/0)),new t(+(1/0),+(1/0),+(1/0)));return}if(e!==void 0){if(this.boundingBox.setFromBufferAttribute(e),n)for(let e=0,t=n.length;e<t;e++){const s=n[e];K.setFromBufferAttribute(s),this.morphTargetsRelative?(M.addVectors(this.boundingBox.min,K.min),this.boundingBox.expandByPoint(M),M.addVectors(this.boundingBox.max,K.max),this.boundingBox.expandByPoint(M)):(this.boundingBox.expandByPoint(K.min),this.boundingBox.expandByPoint(K.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new ke);const e=this.attributes.position,n=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingSphere.set(new t,1/0);return}if(e){const s=this.boundingSphere.center;if(K.setFromBufferAttribute(e),n)for(let e=0,t=n.length;e<t;e++){const s=n[e];Nn.setFromBufferAttribute(s),this.morphTargetsRelative?(M.addVectors(K.min,Nn.min),K.expandByPoint(M),M.addVectors(K.max,Nn.max),K.expandByPoint(M)):(K.expandByPoint(Nn.min),K.expandByPoint(Nn.max))}K.getCenter(s);let t=0;for(let n=0,o=e.count;n<o;n++)M.fromBufferAttribute(e,n),t=Math.max(t,s.distanceToSquared(M));if(n)for(let o=0,a=n.length;o<a;o++){const i=n[o],r=this.morphTargetsRelative;for(let n=0,o=i.count;n<o;n++)M.fromBufferAttribute(i,n),r&&(Gt.fromBufferAttribute(e,n),M.add(Gt)),t=Math.max(t,s.distanceToSquared(M))}this.boundingSphere.radius=Math.sqrt(t),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const x=this.index,s=this.attributes;if(x===null||s.position===void 0||s.normal===void 0||s.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const e=x.array,v=s.position.array,k=s.normal.array,y=s.uv.array,w=v.length/3;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new d(new Float32Array(4*w),4));const h=this.getAttribute("tangent").array,r=[],l=[];for(let e=0;e<w;e++)r[e]=new t,l[e]=new t;const b=new t,m=new t,u=new t,j=new n,i=new n,o=new n,p=new t,g=new t;function E(e,t,n){b.fromArray(v,e*3),m.fromArray(v,t*3),u.fromArray(v,n*3),j.fromArray(y,e*2),i.fromArray(y,t*2),o.fromArray(y,n*2),m.sub(b),u.sub(b),i.sub(j),o.sub(j);const s=1/(i.x*o.y-o.x*i.y);if(!isFinite(s))return;p.copy(m).multiplyScalar(o.y).addScaledVector(u,-i.y).multiplyScalar(s),g.copy(u).multiplyScalar(i.x).addScaledVector(m,-o.x).multiplyScalar(s),r[e].add(p),r[t].add(p),r[n].add(p),l[e].add(g),l[t].add(g),l[n].add(g)}let a=this.groups;a.length===0&&(a=[{start:0,count:e.length}]);for(let t=0,o=a.length;t<o;++t){const n=a[t],s=n.start,i=n.count;for(let t=s,n=s+i;t<n;t+=3)E(e[t+0],e[t+1],e[t+2])}const c=new t,O=new t,f=new t,C=new t;function _(e){f.fromArray(k,e*3),C.copy(f);const t=r[e];c.copy(t),c.sub(f.multiplyScalar(f.dot(t))).normalize(),O.crossVectors(C,t);const n=O.dot(l[e]),s=n<0?-1:1;h[e*4]=c.x,h[e*4+1]=c.y,h[e*4+2]=c.z,h[e*4+3]=s}for(let t=0,o=a.length;t<o;++t){const n=a[t],s=n.start,i=n.count;for(let t=s,n=s+i;t<n;t+=3)_(e[t+0]),_(e[t+1]),_(e[t+2])}}computeVertexNormals(){const n=this.index,e=this.getAttribute("position");if(e!==void 0){let o=this.getAttribute("normal");if(o===void 0)o=new d(new Float32Array(e.count*3),3),this.setAttribute("normal",o);else for(let e=0,t=o.count;e<t;e++)o.setXYZ(e,0,0,0);const l=new t,i=new t,u=new t,a=new t,r=new t,c=new t,s=new t,h=new t;if(n)for(let t=0,p=n.count;t<p;t+=3){const d=n.getX(t+0),m=n.getX(t+1),f=n.getX(t+2);l.fromBufferAttribute(e,d),i.fromBufferAttribute(e,m),u.fromBufferAttribute(e,f),s.subVectors(u,i),h.subVectors(l,i),s.cross(h),a.fromBufferAttribute(o,d),r.fromBufferAttribute(o,m),c.fromBufferAttribute(o,f),a.add(s),r.add(s),c.add(s),o.setXYZ(d,a.x,a.y,a.z),o.setXYZ(m,r.x,r.y,r.z),o.setXYZ(f,c.x,c.y,c.z)}else for(let t=0,n=e.count;t<n;t+=3)l.fromBufferAttribute(e,t+0),i.fromBufferAttribute(e,t+1),u.fromBufferAttribute(e,t+2),s.subVectors(u,i),h.subVectors(l,i),s.cross(h),o.setXYZ(t+0,s.x,s.y,s.z),o.setXYZ(t+1,s.x,s.y,s.z),o.setXYZ(t+2,s.x,s.y,s.z);this.normalizeNormals(),o.needsUpdate=!0}}merge(e,t){if(!e||!e.isBufferGeometry){console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",e);return}t===void 0&&(t=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));const n=this.attributes;for(const s in n){if(e.attributes[s]===void 0)continue;const c=n[s],o=c.array,i=e.attributes[s],a=i.array,r=i.itemSize*t,l=Math.min(a.length,o.length-r);for(let e=0,t=r;e<l;e++,t++)o[t]=a[e]}return this}normalizeNormals(){const e=this.attributes.normal;for(let t=0,n=e.count;t<n;t++)M.fromBufferAttribute(e,t),M.normalize(),e.setXYZ(t,M.x,M.y,M.z)}toNonIndexed(){function t(e,t){const o=e.array,n=e.itemSize,a=e.normalized,i=new o.constructor(t.length*n);let s=0,r=0;for(let a=0,c=t.length;a<c;a++){e.isInterleavedBufferAttribute?s=t[a]*e.data.stride+e.offset:s=t[a]*n;for(let e=0;e<n;e++)i[r++]=o[s++]}return new d(i,n,a)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new r,n=this.index.array,s=this.attributes;for(const o in s){const i=s[o],a=t(i,n);e.setAttribute(o,a)}const o=this.morphAttributes;for(const s in o){const i=[],a=o[s];for(let e=0,s=a.length;e<s;e++){const o=a[e],r=t(o,n);i.push(r)}e.morphAttributes[s]=i}e.morphTargetsRelative=this.morphTargetsRelative;const i=this.groups;for(let t=0,s=i.length;t<s;t++){const n=i[t];e.addGroup(n.start,n.count,n.materialIndex)}return e}toJSON(){const e={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,this.name!==""&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),this.parameters!==void 0){const t=this.parameters;for(const n in t)t[n]!==void 0&&(e[n]=t[n]);return e}e.data={attributes:{}};const t=this.index;t!==null&&(e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});const s=this.attributes;for(const t in s){const n=s[t];e.data.attributes[t]=n.toJSON(e.data)}const o={};let i=!1;for(const n in this.morphAttributes){const s=this.morphAttributes[n],t=[];for(let n=0,o=s.length;n<o;n++){const i=s[n];t.push(i.toJSON(e.data))}t.length>0&&(o[n]=t,i=!0)}i&&(e.data.morphAttributes=o,e.data.morphTargetsRelative=this.morphTargetsRelative);const a=this.groups;a.length>0&&(e.data.groups=JSON.parse(JSON.stringify(a)));const n=this.boundingSphere;return n!==null&&(e.data.boundingSphere={center:n.center.toArray(),radius:n.radius}),e}clone(){return(new this.constructor).copy(this)}copy(e){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const t={};this.name=e.name;const n=e.index;n!==null&&this.setIndex(n.clone(t));const s=e.attributes;for(const e in s){const n=s[e];this.setAttribute(e,n.clone(t))}const o=e.morphAttributes;for(const e in o){const n=[],s=o[e];for(let e=0,o=s.length;e<o;e++)n.push(s[e].clone(t));this.morphAttributes[e]=n}this.morphTargetsRelative=e.morphTargetsRelative;const i=e.groups;for(let e=0,n=i.length;e<n;e++){const t=i[e];this.addGroup(t.start,t.count,t.materialIndex)}const a=e.boundingBox;a!==null&&(this.boundingBox=a.clone());const r=e.boundingSphere;return r!==null&&(this.boundingSphere=r.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,e.parameters!==void 0&&(this.parameters=Object.assign({},e.parameters)),this}dispose(){this.dispatchEvent({type:"dispose"})}}r.prototype.isBufferGeometry=!0;const Qd=new a,Wt=new Te,ri=new ke,Ie=new t,Pe=new t,De=new t,ui=new t,hi=new t,mi=new t,ho=new t,uo=new t,lo=new t,ro=new n,ao=new n,io=new n,yi=new t,oo=new t;class x extends l{constructor(e=new r,t=new ve){super(),this.type="Mesh",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e){return super.copy(e),e.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),e.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this.material=e.material,this.geometry=e.geometry,this}updateMorphTargets(){const e=this.geometry;if(e.isBufferGeometry){{const t=e.morphAttributes,n=Object.keys(t);if(n.length>0){const e=t[n[0]];if(e!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let t=0,n=e.length;t<n;t++){const s=e[t].name||String(t);this.morphTargetInfluences.push(0),this.morphTargetDictionary[s]=t}}}}}else{const t=e.morphTargets;t!==void 0&&t.length>0&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}raycast(e,t){const s=this.geometry,o=this.material,i=this.matrixWorld;if(o===void 0)return;if(s.boundingSphere===null&&s.computeBoundingSphere(),ri.copy(s.boundingSphere),ri.applyMatrix4(i),e.ray.intersectsSphere(ri)===!1)return;if(Qd.copy(i).invert(),Wt.copy(e.ray).applyMatrix4(Qd),s.boundingBox!==null&&Wt.intersectsBox(s.boundingBox)===!1)return;let n;if(s.isBufferGeometry){{const a=s.index,r=s.attributes.position,c=s.morphAttributes.position,l=s.morphTargetsRelative,d=s.attributes.uv,u=s.attributes.uv2,h=s.groups,i=s.drawRange;if(a!==null)if(Array.isArray(o))for(let m=0,f=h.length;m<f;m++){const s=h[m],p=o[s.materialIndex],g=Math.max(s.start,i.start),v=Math.min(a.count,Math.min(s.start+s.count,i.start+i.count));for(let o=g,i=v;o<i;o+=3){const h=a.getX(o),m=a.getX(o+1),f=a.getX(o+2);n=to(this,p,e,Wt,r,c,l,d,u,h,m,f),n&&(n.faceIndex=Math.floor(o/3),n.face.materialIndex=s.materialIndex,t.push(n))}}else{const s=Math.max(0,i.start),h=Math.min(a.count,i.start+i.count);for(let i=s,m=h;i<m;i+=3){const f=a.getX(i),p=a.getX(i+1),g=a.getX(i+2);n=to(this,o,e,Wt,r,c,l,d,u,f,p,g),n&&(n.faceIndex=Math.floor(i/3),t.push(n))}}else if(r!==void 0)if(Array.isArray(o))for(let a=0,m=h.length;a<m;a++){const s=h[a],f=o[s.materialIndex],p=Math.max(s.start,i.start),g=Math.min(r.count,Math.min(s.start+s.count,i.start+i.count));for(let o=p,i=g;o<i;o+=3){const a=o,h=o+1,m=o+2;n=to(this,f,e,Wt,r,c,l,d,u,a,h,m),n&&(n.faceIndex=Math.floor(o/3),n.face.materialIndex=s.materialIndex,t.push(n))}}else{const s=Math.max(0,i.start),a=Math.min(r.count,i.start+i.count);for(let i=s,h=a;i<h;i+=3){const m=i,f=i+1,p=i+2;n=to(this,o,e,Wt,r,c,l,d,u,m,f,p),n&&(n.faceIndex=Math.floor(i/3),t.push(n))}}}}else s.isGeometry&&console.error("THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}x.prototype.isMesh=!0;function L1(e,t,n,s,o,i,a,r){let c;if(t.side===U?c=s.intersectTriangle(a,i,o,!0,r):c=s.intersectTriangle(o,i,a,t.side!==gt,r),c===null)return null;oo.copy(r),oo.applyMatrix4(e.matrixWorld);const l=n.ray.origin.distanceTo(oo);return l<n.near||l>n.far?null:{distance:l,point:oo.clone(),object:e}}function to(e,s,o,i,a,r,c,l,d,u,h,m){Ie.fromBufferAttribute(a,u),Pe.fromBufferAttribute(a,h),De.fromBufferAttribute(a,m);const p=e.morphTargetInfluences;if(r&&p){ho.set(0,0,0),uo.set(0,0,0),lo.set(0,0,0);for(let t=0,s=r.length;t<s;t++){const e=p[t],n=r[t];if(e===0)continue;ui.fromBufferAttribute(n,u),hi.fromBufferAttribute(n,h),mi.fromBufferAttribute(n,m),c?(ho.addScaledVector(ui,e),uo.addScaledVector(hi,e),lo.addScaledVector(mi,e)):(ho.addScaledVector(ui.sub(Ie),e),uo.addScaledVector(hi.sub(Pe),e),lo.addScaledVector(mi.sub(De),e))}Ie.add(ho),Pe.add(uo),De.add(lo)}e.isSkinnedMesh&&(e.boneTransform(u,Ie),e.boneTransform(h,Pe),e.boneTransform(m,De));const f=L1(e,s,o,i,Ie,Pe,De,yi);if(f){l&&(ro.fromBufferAttribute(l,u),ao.fromBufferAttribute(l,h),io.fromBufferAttribute(l,m),f.uv=w.getUV(yi,Ie,Pe,De,ro,ao,io,new n)),d&&(ro.fromBufferAttribute(d,u),ao.fromBufferAttribute(d,h),io.fromBufferAttribute(d,m),f.uv2=w.getUV(yi,Ie,Pe,De,ro,ao,io,new n));const e={a:u,b:h,c:m,normal:new t,materialIndex:0};w.getNormal(Ie,Pe,De,e.normal),f.face=e}return f}class Ae extends r{constructor(e=1,n=1,s=1,o=1,a=1,r=1){super(),this.type="BoxGeometry",this.parameters={width:e,height:n,depth:s,widthSegments:o,heightSegments:a,depthSegments:r};const p=this;o=Math.floor(o),a=Math.floor(a),r=Math.floor(r);const d=[],h=[],m=[],u=[];let l=0,f=0;c("z","y","x",-1,-1,s,n,e,r,a,0),c("z","y","x",1,-1,s,n,-e,r,a,1),c("x","z","y",1,1,e,s,n,o,r,2),c("x","z","y",1,-1,e,s,-n,o,r,3),c("x","y","z",1,-1,e,n,s,o,a,4),c("x","y","z",-1,-1,e,n,-s,o,a,5),this.setIndex(d),this.setAttribute("position",new i(h,3)),this.setAttribute("normal",new i(m,3)),this.setAttribute("uv",new i(u,2));function c(e,n,s,o,i,a,r,c,g,v,b){const O=a/g,x=r/v,C=a/2,E=r/2,k=c/2,y=g+1,A=v+1;let w=0,_=0;const j=new t;for(let t=0;t<A;t++){const a=t*x-E;for(let r=0;r<y;r++){const l=r*O-C;j[e]=l*o,j[n]=a*i,j[s]=k,h.push(j.x,j.y,j.z),j[e]=0,j[n]=0,j[s]=c>0?1:-1,m.push(j.x,j.y,j.z),u.push(r/g),u.push(1-t/v),w+=1}}for(let e=0;e<v;e++)for(let t=0;t<g;t++){const o=l+t+y*e,n=l+t+y*(e+1),i=l+(t+1)+y*(e+1),s=l+(t+1)+y*e;d.push(o,n,s),d.push(n,i,s),_+=6}p.addGroup(f,_,b),f+=_,l+=w}}static fromJSON(e){return new Ae(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}}function Lt(e){const t={};for(const n in e){t[n]={};for(const o in e[n]){const s=e[n][o];s&&(s.isColor||s.isMatrix3||s.isMatrix4||s.isVector2||s.isVector3||s.isVector4||s.isTexture||s.isQuaternion)?t[n][o]=s.clone():Array.isArray(s)?t[n][o]=s.slice():t[n][o]=s}}return t}function D(e){const t={};for(let n=0;n<e.length;n++){const s=Lt(e[n]);for(const e in s)t[e]=s[e]}return t}const uu={clone:Lt,merge:D};fu=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,Ju=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class G extends y{constructor(e){super(),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader=fu,this.fragmentShader=Ju,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,e!==void 0&&(e.attributes!==void 0&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(e))}copy(e){return super.copy(e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=Lt(e.uniforms),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.lights=e.lights,this.clipping=e.clipping,this.extensions=Object.assign({},e.extensions),this.glslVersion=e.glslVersion,this}toJSON(e){const t=super.toJSON(e);t.glslVersion=this.glslVersion,t.uniforms={};for(const s in this.uniforms){const o=this.uniforms[s],n=o.value;n&&n.isTexture?t.uniforms[s]={type:"t",value:n.toJSON(e).uuid}:n&&n.isColor?t.uniforms[s]={type:"c",value:n.getHex()}:n&&n.isVector2?t.uniforms[s]={type:"v2",value:n.toArray()}:n&&n.isVector3?t.uniforms[s]={type:"v3",value:n.toArray()}:n&&n.isVector4?t.uniforms[s]={type:"v4",value:n.toArray()}:n&&n.isMatrix3?t.uniforms[s]={type:"m3",value:n.toArray()}:n&&n.isMatrix4?t.uniforms[s]={type:"m4",value:n.toArray()}:t.uniforms[s]={value:n}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader;const n={};for(const e in this.extensions)this.extensions[e]===!0&&(n[e]=!0);return Object.keys(n).length>0&&(t.extensions=n),t}}G.prototype.isShaderMaterial=!0;class Wn extends l{constructor(){super(),this.type="Camera",this.matrixWorldInverse=new a,this.projectionMatrix=new a,this.projectionMatrixInverse=new a}copy(e,t){return super.copy(e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(-t[8],-t[9],-t[10]).normalize()}updateMatrixWorld(e){super.updateMatrixWorld(e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}}Wn.prototype.isCamera=!0;class F extends Wn{constructor(e=50,t=1,n=.1,s=2e3){super(),this.type="PerspectiveCamera",this.fov=e,this.zoom=1,this.near=n,this.far=s,this.focus=10,this.aspect=t,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=e.view===null?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this}setFocalLength(e){const t=.5*this.getFilmHeight()/e;this.fov=bn*2*Math.atan(t),this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan(Ye*.5*this.fov);return.5*this.getFilmHeight()/e}getEffectiveFOV(){return bn*2*Math.atan(Math.tan(Ye*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(e,t,n,s,o,i){this.aspect=e/t,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=s,this.view.width=o,this.view.height=i,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const i=this.near;let t=i*Math.tan(Ye*.5*this.fov)/this.zoom,n=2*t,s=this.aspect*n,o=-.5*s;const e=this.view;if(this.view!==null&&this.view.enabled){const i=e.fullWidth,a=e.fullHeight;o+=e.offsetX*s/i,t-=e.offsetY*n/a,s*=e.width/i,n*=e.height/a}const a=this.filmOffset;a!==0&&(o+=i*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(o,o+s,t,t-n,i,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,this.view!==null&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}}F.prototype.isPerspectiveCamera=!0;const Kt=90,un=1;class Gs extends l{constructor(e,n,s){if(super(),this.type="CubeCamera",s.isWebGLCubeRenderTarget!==!0){console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");return}this.renderTarget=s;const o=new F(Kt,un,e,n);o.layers=this.layers,o.up.set(0,-1,0),o.lookAt(new t(1,0,0)),this.add(o);const i=new F(Kt,un,e,n);i.layers=this.layers,i.up.set(0,-1,0),i.lookAt(new t(-1,0,0)),this.add(i);const a=new F(Kt,un,e,n);a.layers=this.layers,a.up.set(0,0,1),a.lookAt(new t(0,1,0)),this.add(a);const r=new F(Kt,un,e,n);r.layers=this.layers,r.up.set(0,0,-1),r.lookAt(new t(0,-1,0)),this.add(r);const c=new F(Kt,un,e,n);c.layers=this.layers,c.up.set(0,-1,0),c.lookAt(new t(0,0,1)),this.add(c);const l=new F(Kt,un,e,n);l.layers=this.layers,l.up.set(0,-1,0),l.lookAt(new t(0,0,-1)),this.add(l)}update(e,t){this.parent===null&&this.updateMatrixWorld();const n=this.renderTarget,[s,o,i,a,r,c]=this.children,l=e.getRenderTarget(),d=e.outputEncoding,u=e.toneMapping,h=e.xr.enabled;e.outputEncoding=ce,e.toneMapping=le,e.xr.enabled=!1;const m=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,e.setRenderTarget(n,0),e.render(t,s),e.setRenderTarget(n,1),e.render(t,o),e.setRenderTarget(n,2),e.render(t,i),e.setRenderTarget(n,3),e.render(t,a),e.setRenderTarget(n,4),e.render(t,r),n.texture.generateMipmaps=m,e.setRenderTarget(n,5),e.render(t,c),e.setRenderTarget(l),e.outputEncoding=d,e.toneMapping=u,e.xr.enabled=h,n.texture.needsPMREMUpdate=!0}}class St extends A{constructor(e,t,n,s,o,i,a,r,c,l){e=e!==void 0?e:[],t=t!==void 0?t:Be,super(e,t,n,s,o,i,a,r,c,l),this.flipY=!1}get images(){return this.image}set images(e){this.image=e}}St.prototype.isCubeTexture=!0;class qs extends I{constructor(e,t={}){super(e,e,t);const n={width:e,height:e,depth:1},s=[n,n,n,n,n,n];this.texture=new St(s,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.encoding),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=t.generateMipmaps!==void 0&&t.generateMipmaps,this.texture.minFilter=t.minFilter!==void 0?t.minFilter:j}fromEquirectangularTexture(e,t){this.texture.type=t.type,this.texture.encoding=t.encoding,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},i=new Ae(5,5,5),o=new G({name:"CubemapFromEquirect",uniforms:Lt(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:U,blending:fe});o.uniforms.tEquirect.value=t;const s=new x(i,o),a=t.minFilter;t.minFilter===ct&&(t.minFilter=j);const r=new Gs(1,10,this);return r.update(e,s),t.minFilter=a,s.geometry.dispose(),s.material.dispose(),this}clear(e,t,n,s){const o=e.getRenderTarget();for(let o=0;o<6;o++)e.setRenderTarget(this,o),e.clear(t,n,s);e.setRenderTarget(o)}}qs.prototype.isWebGLCubeRenderTarget=!0;const Hi=new t,x1=new t,C1=new E;class re{constructor(e=new t(1,0,0),n=0){this.normal=e,this.constant=n}set(e,t){return this.normal.copy(e),this.constant=t,this}setComponents(e,t,n,s){return this.normal.set(e,t,n),this.constant=s,this}setFromNormalAndCoplanarPoint(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this}setFromCoplanarPoints(e,t,n){const s=Hi.subVectors(n,t).cross(x1.subVectors(e,t)).normalize();return this.setFromNormalAndCoplanarPoint(s,e),this}copy(e){return this.normal.copy(e.normal),this.constant=e.constant,this}normalize(){const e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t.copy(this.normal).multiplyScalar(-this.distanceToPoint(e)).add(e)}intersectLine(e,t){const s=e.delta(Hi),o=this.normal.dot(s);if(o===0)return this.distanceToPoint(e.start)===0?t.copy(e.start):null;const n=-(e.start.dot(this.normal)+this.constant)/o;return n<0||n>1?null:t.copy(s).multiplyScalar(n).add(e.start)}intersectsLine(e){const t=this.distanceToPoint(e.start),n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const n=t||C1.getNormalMatrix(e),s=this.coplanarPoint(Hi).applyMatrix4(e),o=this.normal.applyMatrix3(n).normalize();return this.constant=-s.dot(o),this}translate(e){return this.constant-=e.dot(this.normal),this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return(new this.constructor).copy(this)}}re.prototype.isPlane=!0;const Ft=new ke,Vs=new t;class Jn{constructor(e=new re,t=new re,n=new re,s=new re,o=new re,i=new re){this.planes=[e,t,n,s,o,i]}set(e,t,n,s,o,i){const a=this.planes;return a[0].copy(e),a[1].copy(t),a[2].copy(n),a[3].copy(s),a[4].copy(o),a[5].copy(i),this}copy(e){const t=this.planes;for(let n=0;n<6;n++)t[n].copy(e.planes[n]);return this}setFromProjectionMatrix(e){const n=this.planes,t=e.elements,b=t[0],f=t[1],d=t[2],a=t[3],l=t[4],c=t[5],r=t[6],i=t[7],u=t[8],h=t[9],m=t[10],o=t[11],p=t[12],g=t[13],v=t[14],s=t[15];return n[0].setComponents(a-b,i-l,o-u,s-p).normalize(),n[1].setComponents(a+b,i+l,o+u,s+p).normalize(),n[2].setComponents(a+f,i+c,o+h,s+g).normalize(),n[3].setComponents(a-f,i-c,o-h,s-g).normalize(),n[4].setComponents(a-d,i-r,o-m,s-v).normalize(),n[5].setComponents(a+d,i+r,o+m,s+v).normalize(),this}intersectsObject(e){const t=e.geometry;return t.boundingSphere===null&&t.computeBoundingSphere(),Ft.copy(t.boundingSphere).applyMatrix4(e.matrixWorld),this.intersectsSphere(Ft)}intersectsSprite(e){return Ft.center.set(0,0,0),Ft.radius=.7071067811865476,Ft.applyMatrix4(e.matrixWorld),this.intersectsSphere(Ft)}intersectsSphere(e){const t=this.planes,n=e.center,s=-e.radius;for(let e=0;e<6;e++){const o=t[e].distanceToPoint(n);if(o<s)return!1}return!0}intersectsBox(e){const t=this.planes;for(let s=0;s<6;s++){const n=t[s];if(Vs.x=n.normal.x>0?e.max.x:e.min.x,Vs.y=n.normal.y>0?e.max.y:e.min.y,Vs.z=n.normal.z>0?e.max.z:e.min.z,n.distanceToPoint(Vs)<0)return!1}return!0}containsPoint(e){const t=this.planes;for(let n=0;n<6;n++)if(t[n].distanceToPoint(e)<0)return!1;return!0}clone(){return(new this.constructor).copy(this)}}function t1(){let e=null,t=!1,n=null,s=null;function o(t,i){n(t,i),s=e.requestAnimationFrame(o)}return{start:function(){if(t===!0)return;if(n===null)return;s=e.requestAnimationFrame(o),t=!0},stop:function(){e.cancelAnimationFrame(s),t=!1},setAnimationLoop:function(e){n=e},setContext:function(t){e=t}}}function E1(e,t){const s=t.isWebGL2,n=new WeakMap;function o(t,n){const o=t.array,r=t.usage,a=e.createBuffer();e.bindBuffer(n,a),e.bufferData(n,o,r),t.onUploadCallback();let i;if(o instanceof Float32Array)i=e.FLOAT;else if(o instanceof Uint16Array)if(t.isFloat16BufferAttribute)if(s)i=e.HALF_FLOAT;else throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");else i=e.UNSIGNED_SHORT;else if(o instanceof Int16Array)i=e.SHORT;else if(o instanceof Uint32Array)i=e.UNSIGNED_INT;else if(o instanceof Int32Array)i=e.INT;else if(o instanceof Int8Array)i=e.BYTE;else if(o instanceof Uint8Array)i=e.UNSIGNED_BYTE;else if(o instanceof Uint8ClampedArray)i=e.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+o);return{buffer:a,type:i,bytesPerElement:o.BYTES_PER_ELEMENT,version:t.version}}function i(t,n,o){const a=n.array,i=n.updateRange;e.bindBuffer(o,t),i.count===-1?e.bufferSubData(o,0,a):(s?e.bufferSubData(o,i.offset*a.BYTES_PER_ELEMENT,a,i.offset,i.count):e.bufferSubData(o,i.offset*a.BYTES_PER_ELEMENT,a.subarray(i.offset,i.offset+i.count)),i.count=-1)}function a(e){return e.isInterleavedBufferAttribute&&(e=e.data),n.get(e)}function r(t){t.isInterleavedBufferAttribute&&(t=t.data);const s=n.get(t);s&&(e.deleteBuffer(s.buffer),n.delete(t))}function c(e,t){if(e.isGLBufferAttribute){const t=n.get(e);(!t||t.version<e.version)&&n.set(e,{buffer:e.buffer,type:e.type,bytesPerElement:e.elementSize,version:e.version});return}e.isInterleavedBufferAttribute&&(e=e.data);const s=n.get(e);s===void 0?n.set(e,o(e,t)):s.version<e.version&&(i(s.buffer,e,t),s.version=e.version)}return{get:a,remove:r,update:c}}class zt extends r{constructor(e=1,t=1,n=1,s=1){super(),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:s};const h=e/2,m=t/2,a=Math.floor(n),r=Math.floor(s),o=a+1,f=r+1,p=e/a,g=t/r,c=[],d=[],u=[],l=[];for(let e=0;e<f;e++){const t=e*g-m;for(let n=0;n<o;n++){const s=n*p-h;d.push(s,-t,0),u.push(0,0,1),l.push(n/a),l.push(1-e/r)}}for(let e=0;e<r;e++)for(let t=0;t<a;t++){const i=t+o*e,n=t+o*(e+1),r=t+1+o*(e+1),s=t+1+o*e;c.push(i,n,s),c.push(n,r,s)}this.setIndex(c),this.setAttribute("position",new i(d,3)),this.setAttribute("normal",new i(u,3)),this.setAttribute("uv",new i(l,2))}static fromJSON(e){return new zt(e.width,e.height,e.widthSegments,e.heightSegments)}}Xu=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vUv ).g;
#endif`,Gu=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,Bu=`#ifdef USE_ALPHATEST
	if ( diffuseColor.a < alphaTest ) discard;
#endif`,Iu=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,Hu=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,Ru=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,Nu="vec3 transformed = vec3( position );",Du=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,zu=`vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
	float D = D_GGX( alpha, dotNH );
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif`,Fu=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vUv );
		vec2 dSTdy = dFdy( vUv );
		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );
		vec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,Mu=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#pragma unroll_loop_start
	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
		plane = clippingPlanes[ i ];
		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
	}
	#pragma unroll_loop_end
	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
		bool clipped = true;
		#pragma unroll_loop_start
		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
		}
		#pragma unroll_loop_end
		if ( clipped ) discard;
	#endif
#endif`,Su=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,Au=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,ku=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,Cu=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,xu=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,Ou=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	varying vec3 vColor;
#endif`,wu=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif`,_u=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
struct GeometricContext {
	vec3 position;
	vec3 normal;
	vec3 viewDir;
#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal;
#endif
};
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float linearToRelativeLuminance( const in vec3 color ) {
	vec3 weights = vec3( 0.2126, 0.7152, 0.0722 );
	return dot( weights, color.rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}`,yu=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		vec2 uv = getUV( direction, face ) * ( faceSize - 1.0 ) + 0.5;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define r0 1.0
	#define v0 0.339
	#define m0 - 2.0
	#define r1 0.8
	#define v1 0.276
	#define m1 - 1.0
	#define r4 0.4
	#define v4 0.046
	#define m4 2.0
	#define r5 0.305
	#define v5 0.016
	#define m5 3.0
	#define r6 0.21
	#define v6 0.0038
	#define m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= r1 ) {
			mip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;
		} else if ( roughness >= r4 ) {
			mip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;
		} else if ( roughness >= r5 ) {
			mip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;
		} else if ( roughness >= r6 ) {
			mip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,ju=`vec3 transformedNormal = objectNormal;
#ifdef USE_INSTANCING
	mat3 m = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );
	transformedNormal = m * transformedNormal;
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,vu=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,mu=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );
#endif`,hu=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vUv );
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,du=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,lu="gl_FragColor = linearToOutputTexel( gl_FragColor );",nu=`vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 LinearTosRGB( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,tu=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,Cd=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,_d=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,dd=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,rd=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,vl=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,gl=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,pl=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,fl=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,nl=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		return ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );
	#endif
}`,Yc=`#ifdef USE_LIGHTMAP
	vec4 lightMapTexel = texture2D( lightMap, vUv2 );
	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
	reflectedLight.indirectDiffuse += lightMapIrradiance;
#endif`,Wc=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,Bc=`vec3 diffuse = vec3( 1.0 );
GeometricContext geometry;
geometry.position = mvPosition.xyz;
geometry.normal = normalize( transformedNormal );
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );
GeometricContext backGeometry;
backGeometry.position = geometry.position;
backGeometry.normal = -geometry.normal;
backGeometry.viewDir = geometry.viewDir;
vLightFront = vec3( 0.0 );
vIndirectFront = vec3( 0.0 );
#ifdef DOUBLE_SIDED
	vLightBack = vec3( 0.0 );
	vIndirectBack = vec3( 0.0 );
#endif
IncidentLight directLight;
float dotNL;
vec3 directLightColor_Diffuse;
vIndirectFront += getAmbientLightIrradiance( ambientLightColor );
vIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );
#ifdef DOUBLE_SIDED
	vIndirectBack += getAmbientLightIrradiance( ambientLightColor );
	vIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );
#endif
#if NUM_POINT_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		getPointLightInfo( pointLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_SPOT_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		getSpotLightInfo( spotLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_DIR_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		getDirectionalLightInfo( directionalLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_HEMI_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
		vIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );
		#ifdef DOUBLE_SIDED
			vIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );
		#endif
	}
	#pragma unroll_loop_end
#endif`,Hc=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
uniform vec3 lightProbe[ 9 ];
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	#if defined ( PHYSICALLY_CORRECT_LIGHTS )
		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
		if ( cutoffDistance > 0.0 ) {
			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
		}
		return distanceFalloff;
	#else
		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );
		}
		return 1.0;
	#endif
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometry.position;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometry.position;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,Pc=`#if defined( USE_ENVMAP )
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
#endif`,Rc=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,Nc=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon
#define Material_LightProbeLOD( material )	(0)`,Dc=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,Tc=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong
#define Material_LightProbeLOD( material )	(0)`,Fc=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	#ifdef SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULARINTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;
		#endif
		#ifdef USE_SPECULARCOLORMAP
			specularColorFactor *= texture2D( specularColorMap, vUv ).rgb;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEENCOLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEENROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;
	#endif
#endif`,xc=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
};
vec3 clearcoatSpecular = vec3( 0.0 );
vec3 sheenSpecular = vec3( 0.0 );
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	vec3 FssEss = specularColor * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometry.normal;
		vec3 viewDir = geometry.viewDir;
		vec3 position = geometry.position;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(		0, 1,		0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	computeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	vec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,Oc=`
GeometricContext geometry;
geometry.position = - vViewPosition;
geometry.normal = normal;
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
#ifdef USE_CLEARCOAT
	geometry.clearcoatNormal = clearcoatNormal;
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,Ya=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vUv2 );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometry.normal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	radiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,Dl=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );
#endif`,Ka=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,qa=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,Wa=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		varying float vFragDepth;
		varying float vIsPerspective;
	#else
		uniform float logDepthBufFC;
	#endif
#endif`,Ga=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
	#else
		if ( isPerspectiveMatrix( projectionMatrix ) ) {
			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;
			gl_Position.z *= gl_Position.w;
		}
	#endif
#endif`,Xa=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,Qa=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,Za=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,Ja=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	uniform mat3 uvTransform;
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,er=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vUv );
	metalnessFactor *= texelMetalness.b;
#endif`,tr=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,nr=`#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,sr=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
	#endif
#endif`,or=`#ifdef USE_MORPHTARGETS
	uniform float morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
		uniform sampler2DArray morphTargetsTexture;
		uniform ivec2 morphTargetsTextureSize;
		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
			int y = texelIndex / morphTargetsTextureSize.x;
			int x = texelIndex - y * morphTargetsTextureSize.x;
			ivec3 morphUV = ivec3( x, y, morphTargetIndex );
			return texelFetch( morphTargetsTexture, morphUV, 0 );
		}
	#else
		#ifndef USE_MORPHNORMALS
			uniform float morphTargetInfluences[ 8 ];
		#else
			uniform float morphTargetInfluences[ 4 ];
		#endif
	#endif
#endif`,ir=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		transformed += morphTarget0 * morphTargetInfluences[ 0 ];
		transformed += morphTarget1 * morphTargetInfluences[ 1 ];
		transformed += morphTarget2 * morphTargetInfluences[ 2 ];
		transformed += morphTarget3 * morphTargetInfluences[ 3 ];
		#ifndef USE_MORPHNORMALS
			transformed += morphTarget4 * morphTargetInfluences[ 4 ];
			transformed += morphTarget5 * morphTargetInfluences[ 5 ];
			transformed += morphTarget6 * morphTargetInfluences[ 6 ];
			transformed += morphTarget7 * morphTargetInfluences[ 7 ];
		#endif
	#endif
#endif`,ar=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );
	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	#ifdef USE_TANGENT
		vec3 tangent = normalize( vTangent );
		vec3 bitangent = normalize( vBitangent );
		#ifdef DOUBLE_SIDED
			tangent = tangent * faceDirection;
			bitangent = bitangent * faceDirection;
		#endif
		#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )
			mat3 vTBN = mat3( tangent, bitangent, normal );
		#endif
	#endif
#endif
vec3 geometryNormal = normal;`,rr=`#ifdef OBJECTSPACE_NORMALMAP
	normal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( TANGENTSPACE_NORMALMAP )
	vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	#ifdef USE_TANGENT
		normal = normalize( vTBN * mapN );
	#else
		normal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );
	#endif
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,cr=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,lr=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,dr=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,ur=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef OBJECTSPACE_NORMALMAP
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )
	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {
		vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );
		vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );
		vec2 st0 = dFdx( vUv.st );
		vec2 st1 = dFdy( vUv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );
		return normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );
	}
#endif`,hr=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = geometryNormal;
#endif`,mr=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	#ifdef USE_TANGENT
		clearcoatNormal = normalize( vTBN * clearcoatMapN );
	#else
		clearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );
	#endif
#endif`,fr=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif`,pr=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= transmissionAlpha + 0.1;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,gr=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {
	return linearClipZ * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * invClipZ - far );
}`,vr=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,br=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,jr=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,yr=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,_r=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vUv );
	roughnessFactor *= texelRoughness.g;
#endif`,wr=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,Or=`#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );
		bool inFrustum = all( inFrustumVec );
		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );
		bool frustumTest = all( frustumTestVec );
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), 
							texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
							f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), 
							texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
							f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return shadow;
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
		vec3 lightToPosition = shadowCoord.xyz;
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;
		vec3 bd3D = normalize( lightToPosition );
		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );
		#else
			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
		#endif
	}
#endif`,xr=`#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];
		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,Cr=`#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0
		vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		vec4 shadowWorldPosition;
	#endif
	#if NUM_DIR_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );
		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
#endif`,Er=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,kr=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,Ar=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	#ifdef BONE_TEXTURE
		uniform highp sampler2D boneTexture;
		uniform int boneTextureSize;
		mat4 getBoneMatrix( const in float i ) {
			float j = i * 4.0;
			float x = mod( j, float( boneTextureSize ) );
			float y = floor( j / float( boneTextureSize ) );
			float dx = 1.0 / float( boneTextureSize );
			float dy = 1.0 / float( boneTextureSize );
			y = dy * ( y + 0.5 );
			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );
			mat4 bone = mat4( v1, v2, v3, v4 );
			return bone;
		}
	#else
		uniform mat4 boneMatrices[ MAX_BONES ];
		mat4 getBoneMatrix( const in float i ) {
			mat4 bone = boneMatrices[ int(i) ];
			return bone;
		}
	#endif
#endif`,Sr=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,Mr=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,Fr=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,Tr=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,zr=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,Dr=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return toneMappingExposure * color;
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(	1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,	1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,	1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,Nr=`#ifdef USE_TRANSMISSION
	float transmissionAlpha = 1.0;
	float transmissionFactor = transmission;
	float thicknessFactor = thickness;
	#ifdef USE_TRANSMISSIONMAP
		transmissionFactor *= texture2D( transmissionMap, vUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		thicknessFactor *= texture2D( thicknessMap, vUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmission = getIBLVolumeRefraction(
		n, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,
		attenuationColor, attenuationDistance );
	totalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );
	transmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );
#endif`,Lr=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		#ifdef texture2DLodEXT
			return texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );
		#else
			return texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );
		#endif
	}
	vec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( attenuationDistance == 0.0 ) {
			return radiance;
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance * radiance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
		vec3 refractedRayExit = position + transmissionRay;
		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
		vec2 refractionCoords = ndcPos.xy / ndcPos.w;
		refractionCoords += 1.0;
		refractionCoords /= 2.0;
		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
		vec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		return vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );
	}
#endif`,Rr=`#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )
	varying vec2 vUv;
#endif`,Pr=`#ifdef USE_UV
	#ifdef UVS_VERTEX_ONLY
		vec2 vUv;
	#else
		varying vec2 vUv;
	#endif
	uniform mat3 uvTransform;
#endif`,Hr=`#ifdef USE_UV
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
#endif`,Ir=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	varying vec2 vUv2;
#endif`,Br=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	attribute vec2 uv2;
	varying vec2 vUv2;
	uniform mat3 uv2Transform;
#endif`,Vr=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	vUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;
#endif`,$r=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const uh=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,rh=`uniform sampler2D t2D;
varying vec2 vUv;
void main() {
	gl_FragColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		gl_FragColor = vec4( mix( pow( gl_FragColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), gl_FragColor.rgb * 0.0773993808, vec3( lessThanEqual( gl_FragColor.rgb, vec3( 0.04045 ) ) ) ), gl_FragColor.w );
	#endif
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,ah=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,ih=`#include <envmap_common_pars_fragment>
uniform float opacity;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	vec3 vReflect = vWorldDirection;
	#include <envmap_fragment>
	gl_FragColor = envColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,oh=`#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,th=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`,J3=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,Z3=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,Q3=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,Y3=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,q3=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,K3=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,W3=`#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,B3=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vUv2 );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,I3=`#define LAMBERT
varying vec3 vLightFront;
varying vec3 vIndirectFront;
#ifdef DOUBLE_SIDED
	varying vec3 vLightBack;
	varying vec3 vIndirectBack;
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <envmap_pars_vertex>
#include <bsdfs>
#include <lights_pars_begin>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <lights_lambert_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,H3=`uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
varying vec3 vLightFront;
varying vec3 vIndirectFront;
#ifdef DOUBLE_SIDED
	varying vec3 vLightBack;
	varying vec3 vIndirectBack;
#endif
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <fog_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <emissivemap_fragment>
	#ifdef DOUBLE_SIDED
		reflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;
	#else
		reflectedLight.indirectDiffuse += vIndirectFront;
	#endif
	#include <lightmap_fragment>
	reflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );
	#ifdef DOUBLE_SIDED
		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;
	#else
		reflectedLight.directDiffuse = vLightFront;
	#endif
	reflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,R3=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,N3=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,D3=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	vViewPosition = - mvPosition.xyz;
#endif
}`,F3=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,M3=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,S3=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,A3=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,C3=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULARINTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
	#ifdef USE_SPECULARCOLORMAP
		uniform sampler2D specularColorMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEENCOLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEENROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <bsdfs>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;
	#endif
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,x3=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,w3=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,y3=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,g3=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,f3=`#include <common>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,m3=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,u3=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,l3=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,c={alphamap_fragment:Xu,alphamap_pars_fragment:Gu,alphatest_fragment:Bu,alphatest_pars_fragment:Iu,aomap_fragment:Hu,aomap_pars_fragment:Ru,begin_vertex:Nu,beginnormal_vertex:Du,bsdfs:zu,bumpmap_pars_fragment:Fu,clipping_planes_fragment:Mu,clipping_planes_pars_fragment:Su,clipping_planes_pars_vertex:Au,clipping_planes_vertex:ku,color_fragment:Cu,color_pars_fragment:xu,color_pars_vertex:Ou,color_vertex:wu,common:_u,cube_uv_reflection_fragment:yu,defaultnormal_vertex:ju,displacementmap_pars_vertex:vu,displacementmap_vertex:mu,emissivemap_fragment:hu,emissivemap_pars_fragment:du,encodings_fragment:lu,encodings_pars_fragment:nu,envmap_fragment:tu,envmap_common_pars_fragment:Cd,envmap_pars_fragment:_d,envmap_pars_vertex:dd,envmap_physical_pars_fragment:Pc,envmap_vertex:rd,fog_vertex:vl,fog_pars_vertex:gl,fog_fragment:pl,fog_pars_fragment:fl,gradientmap_pars_fragment:nl,lightmap_fragment:Yc,lightmap_pars_fragment:Wc,lights_lambert_vertex:Bc,lights_pars_begin:Hc,lights_toon_fragment:Rc,lights_toon_pars_fragment:Nc,lights_phong_fragment:Dc,lights_phong_pars_fragment:Tc,lights_physical_fragment:Fc,lights_physical_pars_fragment:xc,lights_fragment_begin:Oc,lights_fragment_maps:Ya,lights_fragment_end:Dl,logdepthbuf_fragment:Ka,logdepthbuf_pars_fragment:qa,logdepthbuf_pars_vertex:Wa,logdepthbuf_vertex:Ga,map_fragment:Xa,map_pars_fragment:Qa,map_particle_fragment:Za,map_particle_pars_fragment:Ja,metalnessmap_fragment:er,metalnessmap_pars_fragment:tr,morphcolor_vertex:nr,morphnormal_vertex:sr,morphtarget_pars_vertex:or,morphtarget_vertex:ir,normal_fragment_begin:ar,normal_fragment_maps:rr,normal_pars_fragment:cr,normal_pars_vertex:lr,normal_vertex:dr,normalmap_pars_fragment:ur,clearcoat_normal_fragment_begin:hr,clearcoat_normal_fragment_maps:mr,clearcoat_pars_fragment:fr,output_fragment:pr,packing:gr,premultiplied_alpha_fragment:vr,project_vertex:br,dithering_fragment:jr,dithering_pars_fragment:yr,roughnessmap_fragment:_r,roughnessmap_pars_fragment:wr,shadowmap_pars_fragment:Or,shadowmap_pars_vertex:xr,shadowmap_vertex:Cr,shadowmask_pars_fragment:Er,skinbase_vertex:kr,skinning_pars_vertex:Ar,skinning_vertex:Sr,skinnormal_vertex:Mr,specularmap_fragment:Fr,specularmap_pars_fragment:Tr,tonemapping_fragment:zr,tonemapping_pars_fragment:Dr,transmission_fragment:Nr,transmission_pars_fragment:Lr,uv_pars_fragment:Rr,uv_pars_vertex:Pr,uv_vertex:Hr,uv2_pars_fragment:Ir,uv2_pars_vertex:Br,uv2_vertex:Vr,worldpos_vertex:$r,background_vert:uh,background_frag:rh,cube_vert:ah,cube_frag:ih,depth_vert:oh,depth_frag:th,distanceRGBA_vert:J3,distanceRGBA_frag:Z3,equirect_vert:Q3,equirect_frag:Y3,linedashed_vert:q3,linedashed_frag:K3,meshbasic_vert:W3,meshbasic_frag:B3,meshlambert_vert:I3,meshlambert_frag:H3,meshmatcap_vert:R3,meshmatcap_frag:N3,meshnormal_vert:D3,meshnormal_frag:F3,meshphong_vert:M3,meshphong_frag:S3,meshphysical_vert:A3,meshphysical_frag:C3,meshtoon_vert:x3,meshtoon_frag:w3,points_vert:y3,points_frag:g3,shadow_vert:f3,shadow_frag:m3,sprite_vert:u3,sprite_frag:l3},s={common:{diffuse:{value:new o(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new E},uv2Transform:{value:new E},alphaMap:{value:null},alphaTest:{value:0}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new n(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new o(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new o(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new E}},sprite:{diffuse:{value:new o(16777215)},opacity:{value:1},center:{value:new n(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new E}}},Z={basic:{uniforms:D([s.common,s.specularmap,s.envmap,s.aomap,s.lightmap,s.fog]),vertexShader:c.meshbasic_vert,fragmentShader:c.meshbasic_frag},lambert:{uniforms:D([s.common,s.specularmap,s.envmap,s.aomap,s.lightmap,s.emissivemap,s.fog,s.lights,{emissive:{value:new o(0)}}]),vertexShader:c.meshlambert_vert,fragmentShader:c.meshlambert_frag},phong:{uniforms:D([s.common,s.specularmap,s.envmap,s.aomap,s.lightmap,s.emissivemap,s.bumpmap,s.normalmap,s.displacementmap,s.fog,s.lights,{emissive:{value:new o(0)},specular:{value:new o(1118481)},shininess:{value:30}}]),vertexShader:c.meshphong_vert,fragmentShader:c.meshphong_frag},standard:{uniforms:D([s.common,s.envmap,s.aomap,s.lightmap,s.emissivemap,s.bumpmap,s.normalmap,s.displacementmap,s.roughnessmap,s.metalnessmap,s.fog,s.lights,{emissive:{value:new o(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:c.meshphysical_vert,fragmentShader:c.meshphysical_frag},toon:{uniforms:D([s.common,s.aomap,s.lightmap,s.emissivemap,s.bumpmap,s.normalmap,s.displacementmap,s.gradientmap,s.fog,s.lights,{emissive:{value:new o(0)}}]),vertexShader:c.meshtoon_vert,fragmentShader:c.meshtoon_frag},matcap:{uniforms:D([s.common,s.bumpmap,s.normalmap,s.displacementmap,s.fog,{matcap:{value:null}}]),vertexShader:c.meshmatcap_vert,fragmentShader:c.meshmatcap_frag},points:{uniforms:D([s.points,s.fog]),vertexShader:c.points_vert,fragmentShader:c.points_frag},dashed:{uniforms:D([s.common,s.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:c.linedashed_vert,fragmentShader:c.linedashed_frag},depth:{uniforms:D([s.common,s.displacementmap]),vertexShader:c.depth_vert,fragmentShader:c.depth_frag},normal:{uniforms:D([s.common,s.bumpmap,s.normalmap,s.displacementmap,{opacity:{value:1}}]),vertexShader:c.meshnormal_vert,fragmentShader:c.meshnormal_frag},sprite:{uniforms:D([s.sprite,s.fog]),vertexShader:c.sprite_vert,fragmentShader:c.sprite_frag},background:{uniforms:{uvTransform:{value:new E},t2D:{value:null}},vertexShader:c.background_vert,fragmentShader:c.background_frag},cube:{uniforms:D([s.envmap,{opacity:{value:1}}]),vertexShader:c.cube_vert,fragmentShader:c.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:c.equirect_vert,fragmentShader:c.equirect_frag},distanceRGBA:{uniforms:D([s.common,s.displacementmap,{referencePosition:{value:new t},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:c.distanceRGBA_vert,fragmentShader:c.distanceRGBA_frag},shadow:{uniforms:D([s.lights,s.fog,{color:{value:new o(0)},opacity:{value:1}}]),vertexShader:c.shadow_vert,fragmentShader:c.shadow_frag}};Z.physical={uniforms:D([Z.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new n(1,1)},clearcoatNormalMap:{value:null},sheen:{value:0},sheenColor:{value:new o(0)},sheenColorMap:{value:null},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new n},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationColor:{value:new o(0)},specularIntensity:{value:1},specularIntensityMap:{value:null},specularColor:{value:new o(1,1,1)},specularColorMap:{value:null}}]),vertexShader:c.meshphysical_vert,fragmentShader:c.meshphysical_frag};function c3(e,t,n,s,i,a){const d=new o(0);let l=i===!0?0:1,c,r,u=null,h=0,m=null;function p(n,o){let a=!1,i=o.isScene===!0?o.background:null;i&&i.isTexture&&(i=t.get(i));const p=e.xr,g=p.getSession&&p.getSession();g&&g.environmentBlendMode==="additive"&&(i=null),i===null?f(d,l):i&&i.isColor&&(f(i,1),a=!0),(e.autoClear||a)&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),i&&(i.isCubeTexture||i.mapping===Qt)?(r===void 0&&(r=new x(new Ae(1,1,1),new G({name:"BackgroundCubeMaterial",uniforms:Lt(Z.cube.uniforms),vertexShader:Z.cube.vertexShader,fragmentShader:Z.cube.fragmentShader,side:U,depthTest:!1,depthWrite:!1,fog:!1})),r.geometry.deleteAttribute("normal"),r.geometry.deleteAttribute("uv"),r.onBeforeRender=function(e,t,n){this.matrixWorld.copyPosition(n.matrixWorld)},Object.defineProperty(r.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),s.update(r)),r.material.uniforms.envMap.value=i,r.material.uniforms.flipEnvMap.value=i.isCubeTexture&&i.isRenderTargetTexture===!1?-1:1,(u!==i||h!==i.version||m!==e.toneMapping)&&(r.material.needsUpdate=!0,u=i,h=i.version,m=e.toneMapping),n.unshift(r,r.geometry,r.material,0,0,null)):i&&i.isTexture&&(c===void 0&&(c=new x(new zt(2,2),new G({name:"BackgroundMaterial",uniforms:Lt(Z.background.uniforms),vertexShader:Z.background.vertexShader,fragmentShader:Z.background.fragmentShader,side:pt,depthTest:!1,depthWrite:!1,fog:!1})),c.geometry.deleteAttribute("normal"),Object.defineProperty(c.material,"map",{get:function(){return this.uniforms.t2D.value}}),s.update(c)),c.material.uniforms.t2D.value=i,i.matrixAutoUpdate===!0&&i.updateMatrix(),c.material.uniforms.uvTransform.value.copy(i.matrix),(u!==i||h!==i.version||m!==e.toneMapping)&&(c.material.needsUpdate=!0,u=i,h=i.version,m=e.toneMapping),n.unshift(c,c.geometry,c.material,0,0,null))}function f(e,t){n.buffers.color.setClear(e.r,e.g,e.b,t,a)}return{getClearColor:function(){return d},setClearColor:function(e,t=1){d.set(e),l=t,f(d,l)},getClearAlpha:function(){return l},setClearAlpha:function(e){l=e,f(d,l)},render:p}}function X2(e,t,n,s){const O=e.getParameter(e.MAX_VERTEX_ATTRIBS),r=s.isWebGL2?null:t.get("OES_vertex_array_object"),j=s.isWebGL2||r!==null,i={},a=h(null);let o=a,d=!1;function y(t,s,i,a,r){let c=!1;if(j){const e=A(a,i,s);o!==e&&(o=e,b(o.object)),c=w(a,r),c&&_(a,r)}else{const e=s.wireframe===!0;(o.geometry!==a.id||o.program!==i.id||o.wireframe!==e)&&(o.geometry=a.id,o.program=i.id,o.wireframe=e,c=!0)}t.isInstancedMesh===!0&&(c=!0),r!==null&&n.update(r,e.ELEMENT_ARRAY_BUFFER),(c||d)&&(d=!1,x(t,s,i,a),r!==null&&e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n.get(r).buffer))}function S(){return s.isWebGL2?e.createVertexArray():r.createVertexArrayOES()}function b(t){return s.isWebGL2?e.bindVertexArray(t):r.bindVertexArrayOES(t)}function c(t){return s.isWebGL2?e.deleteVertexArray(t):r.deleteVertexArrayOES(t)}function A(e,t,n){const r=n.wireframe===!0;let s=i[e.id];s===void 0&&(s={},i[e.id]=s);let o=s[t.id];o===void 0&&(o={},s[t.id]=o);let a=o[r];return a===void 0&&(a=h(S()),o[r]=a),a}function h(e){const t=[],n=[],s=[];for(let e=0;e<O;e++)t[e]=0,n[e]=0,s[e]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:t,enabledAttributes:n,attributeDivisors:s,object:e,attributes:{},index:null}}function w(e,t){const i=o.attributes,n=e.attributes;let s=0;for(const t in n){const e=i[t],o=n[t];if(e===void 0)return!0;if(e.attribute!==o)return!0;if(e.data!==o.data)return!0;s++}return o.attributesNum!==s||o.index!==t}function _(e,t){const n={},s=e.attributes;let i=0;for(const o in s){const e=s[o],t={};t.attribute=e,e.data&&(t.data=e.data),n[o]=t,i++}o.attributes=n,o.attributesNum=i,o.index=t}function m(){const e=o.newAttributes;for(let t=0,n=e.length;t<n;t++)e[t]=0}function u(e){l(e,0)}function l(n,i){const c=o.newAttributes,a=o.enabledAttributes,r=o.attributeDivisors;if(c[n]=1,a[n]===0&&(e.enableVertexAttribArray(n),a[n]=1),r[n]!==i){const o=s.isWebGL2?e:t.get("ANGLE_instanced_arrays");o[s.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](n,i),r[n]=i}}function v(){const n=o.newAttributes,t=o.enabledAttributes;for(let s=0,o=t.length;s<o;s++)t[s]!==n[s]&&(e.disableVertexAttribArray(s),t[s]=0)}function g(t,n,o,i,a,r){s.isWebGL2===!0&&(o===e.INT||o===e.UNSIGNED_INT)?e.vertexAttribIPointer(t,n,o,a,r):e.vertexAttribPointer(t,n,o,i,a,r)}function x(o,i,a,r){if(s.isWebGL2===!1&&(o.isInstancedMesh||r.isInstancedBufferGeometry)&&t.get("ANGLE_instanced_arrays")===null)return;m();const h=r.attributes,c=a.getAttributes(),d=i.defaultAttributeValues;for(const s in c){const t=c[s];if(t.location>=0){let i=h[s];if(i===void 0&&(s==="instanceMatrix"&&o.instanceMatrix&&(i=o.instanceMatrix),s==="instanceColor"&&o.instanceColor&&(i=o.instanceColor)),i!==void 0){const d=i.normalized,s=i.itemSize,a=n.get(i);if(a===void 0)continue;const h=a.buffer,m=a.type,c=a.bytesPerElement;if(i.isInterleavedBufferAttribute){const n=i.data,a=n.stride,f=i.offset;if(n.isInstancedInterleavedBuffer){for(let e=0;e<t.locationSize;e++)l(t.location+e,n.meshPerAttribute);o.isInstancedMesh!==!0&&r._maxInstanceCount===void 0&&(r._maxInstanceCount=n.meshPerAttribute*n.count)}else for(let e=0;e<t.locationSize;e++)u(t.location+e);e.bindBuffer(e.ARRAY_BUFFER,h);for(let e=0;e<t.locationSize;e++)g(t.location+e,s/t.locationSize,m,d,a*c,(f+s/t.locationSize*e)*c)}else{if(i.isInstancedBufferAttribute){for(let e=0;e<t.locationSize;e++)l(t.location+e,i.meshPerAttribute);o.isInstancedMesh!==!0&&r._maxInstanceCount===void 0&&(r._maxInstanceCount=i.meshPerAttribute*i.count)}else for(let e=0;e<t.locationSize;e++)u(t.location+e);e.bindBuffer(e.ARRAY_BUFFER,h);for(let e=0;e<t.locationSize;e++)g(t.location+e,s/t.locationSize,m,d,s*c,s/t.locationSize*e*c)}}else if(d!==void 0){const n=d[s];if(n!==void 0)switch(n.length){case 2:e.vertexAttrib2fv(t.location,n);break;case 3:e.vertexAttrib3fv(t.location,n);break;case 4:e.vertexAttrib4fv(t.location,n);break;default:e.vertexAttrib1fv(t.location,n)}}}}v()}function C(){p();for(const t in i){const e=i[t];for(const n in e){const t=e[n];for(const e in t)c(t[e].object),delete t[e];delete e[n]}delete i[t]}}function E(e){if(i[e.id]===void 0)return;const t=i[e.id];for(const n in t){const e=t[n];for(const t in e)c(e[t].object),delete e[t];delete t[n]}delete i[e.id]}function k(e){for(const s in i){const t=i[s];if(t[e.id]===void 0)continue;const n=t[e.id];for(const e in n)c(n[e].object),delete n[e];delete t[e.id]}}function p(){if(f(),d=!0,o===a)return;o=a,b(o.object)}function f(){a.geometry=null,a.program=null,a.wireframe=!1}return{setup:y,reset:p,resetDefaultState:f,dispose:C,releaseStatesOfGeometry:E,releaseStatesOfProgram:k,initAttributes:m,enableAttribute:u,disableUnusedAttributes:v}}function G2(e,t,n,s){const i=s.isWebGL2;let o;function a(e){o=e}function r(t,s){e.drawArrays(o,t,s),n.update(s,o,1)}function c(s,a,r){if(r===0)return;let c,l;if(i)c=e,l="drawArraysInstanced";else if(c=t.get("ANGLE_instanced_arrays"),l="drawArraysInstancedANGLE",c===null){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}c[l](o,s,a,r),n.update(a,o,r)}this.setMode=a,this.render=r,this.renderInstances=c}function q2(e,t,n){let o;function y(){if(o!==void 0)return o;if(t.has("EXT_texture_filter_anisotropic")===!0){const n=t.get("EXT_texture_filter_anisotropic");o=e.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else o=0;return o}function l(t){if(t==="highp"){if(e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.HIGH_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.HIGH_FLOAT).precision>0)return"highp";t="mediump"}return t==="mediump"&&e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.MEDIUM_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}const i=typeof WebGL2RenderingContext!="undefined"&&e instanceof WebGL2RenderingContext||typeof WebGL2ComputeRenderingContext!="undefined"&&e instanceof WebGL2ComputeRenderingContext;let s=n.precision!==void 0?n.precision:"highp";const a=l(s);a!==s&&(console.warn("THREE.WebGLRenderer:",s,"not supported, using",a,"instead."),s=a);const j=i||t.has("WEBGL_draw_buffers"),m=n.logarithmicDepthBuffer===!0,h=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),r=e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS),u=e.getParameter(e.MAX_TEXTURE_SIZE),f=e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE),p=e.getParameter(e.MAX_VERTEX_ATTRIBS),g=e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS),v=e.getParameter(e.MAX_VARYING_VECTORS),b=e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS),d=r>0,c=i||t.has("OES_texture_float"),_=d&&c,w=i?e.getParameter(e.MAX_SAMPLES):0;return{isWebGL2:i,drawBuffers:j,getMaxAnisotropy:y,getMaxPrecision:l,precision:s,logarithmicDepthBuffer:m,maxTextures:h,maxVertexTextures:r,maxTextureSize:u,maxCubemapSize:f,maxAttributes:p,maxVertexUniforms:g,maxVaryings:v,maxFragmentUniforms:b,vertexTextures:d,floatFragmentTextures:c,floatVertexTextures:_,maxSamples:w}}function U2(e){const o=this;let i=null,n=0,r=!1,s=!1;const c=new re,l=new E,t={value:null,needsUpdate:!1};this.uniform=t,this.numPlanes=0,this.numIntersection=0,this.init=function(e,t,s){const o=e.length!==0||t||n!==0||r;return r=t,i=a(e,s,0),n=e.length,o},this.beginShadows=function(){s=!0,a(null)},this.endShadows=function(){s=!1,d()},this.setState=function(o,c,l){const u=o.clippingPlanes,m=o.clipIntersection,f=o.clipShadows,h=e.get(o);if(!r||u===null||u.length===0||s&&!f)s?a(null):d();else{const o=s?0:n,r=o*4;let e=h.clippingState||null;t.value=e,e=a(u,c,r,l);for(let t=0;t!==r;++t)e[t]=i[t];h.clippingState=e,this.numIntersection=m?this.numPlanes:0,this.numPlanes+=o}};function d(){t.value!==i&&(t.value=i,t.needsUpdate=n>0),o.numPlanes=n,o.numIntersection=0}function a(e,n,s,i){const r=e!==null?e.length:0;let a=null;if(r!==0){if(a=t.value,i!==!0||a===null){const t=s+r*4,o=n.matrixWorldInverse;l.getNormalMatrix(o),(a===null||a.length<t)&&(a=new Float32Array(t));for(let t=0,n=s;t!==r;++t,n+=4)c.copy(e[t]).applyMatrix4(o,l),c.normal.toArray(a,n),a[n+3]=c.constant}t.value=a,t.needsUpdate=!0}return o.numPlanes=r,o.numIntersection=0,a}}function H2(e){let t=new WeakMap;function n(e,t){return t===mn?e.mapping=Be:t===Sn&&(e.mapping=Ve),e}function o(o){if(o&&o.isTexture&&o.isRenderTargetTexture===!1){const i=o.mapping;if(i===mn||i===Sn){if(t.has(o)){const e=t.get(o).texture;return n(e,o.mapping)}const i=o.image;if(i&&i.height>0){const a=new qs(i.height/2);return a.fromEquirectangularTexture(e,o),t.set(o,a),o.addEventListener("dispose",s),n(a.texture,o.mapping)}return null}}return o}function s(e){const n=e.target;n.removeEventListener("dispose",s);const o=t.get(n);o!==void 0&&(t.delete(n),o.dispose())}function i(){t=new WeakMap}return{get:o,dispose:i}}class ns extends Wn{constructor(e=-1,t=1,n=1,s=-1,o=.1,i=2e3){super(),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=n,this.bottom=s,this.near=o,this.far=i,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=e.view===null?null:Object.assign({},e.view),this}setViewOffset(e,t,n,s,o,i){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=s,this.view.width=o,this.view.height=i,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const n=(this.right-this.left)/(2*this.zoom),s=(this.top-this.bottom)/(2*this.zoom),o=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let e=o-n,a=o+n,t=i+s,r=i-s;if(this.view!==null&&this.view.enabled){const n=(this.right-this.left)/this.view.fullWidth/this.zoom,s=(this.top-this.bottom)/this.view.fullHeight/this.zoom;e+=n*this.view.offsetX,a=e+n*this.view.width,t-=s*this.view.offsetY,r=t-s*this.view.height}this.projectionMatrix.makeOrthographic(e,a,t,r,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,this.view!==null&&(t.object.view=Object.assign({},this.view)),t}}ns.prototype.isOrthographicCamera=!0;const Nt=4,zc=[.125,.215,.35,.446,.526,.582],ut=20,Pa=new ns,Lc=new o;let Ra=null;const dt=(1+Math.sqrt(5))/2,qt=1/dt,Ic=[new t(1,1,1),new t(-1,1,1),new t(1,1,-1),new t(-1,1,-1),new t(0,dt,qt),new t(0,dt,-qt),new t(qt,0,dt),new t(-qt,0,dt),new t(dt,qt,0),new t(-dt,qt,0)];class Da{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,n=.1,s=100){Ra=this._renderer.getRenderTarget(),this._setSize(256);const o=this._allocateTargets();return o.depthBuffer=!0,this._sceneToCubeUV(e,n,s,o),t>0&&this._blur(o,0,0,t),this._applyPMREM(o),this._cleanup(o),o}fromEquirectangular(e,t=null){return this._fromTexture(e,t)}fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=qc(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=Kc(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(Ra),e.scissorTest=!1,ds(e,0,0,e.width,e.height)}_fromTexture(e,t){e.mapping===Be||e.mapping===Ve?this._setSize(e.image.length===0?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4),Ra=this._renderer.getRenderTarget();const n=t||this._allocateTargets();return this._textureToCubeUV(e,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const e=3*Math.max(this._cubeSize,16*7),t=4*this._cubeSize-32,n={magFilter:j,minFilter:j,generateMipmaps:!1,type:vt,format:q,encoding:ce,depthBuffer:!1},s=$c(e,t,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==e){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=$c(e,t,n);const{_lodMax:s}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=P2(s),this._blurMaterial=R2(s,e,t))}return s}_compileMaterial(e){const t=new x(this._lodPlanes[0],e);this._renderer.compile(t,Pa)}_sceneToCubeUV(e,t,n,s){const h=90,m=1,i=new F(h,m,t,n),r=[1,-1,1,1,1,1],c=[1,1,1,-1,-1,-1],o=this._renderer,f=o.autoClear,p=o.toneMapping;o.getClearColor(Lc),o.toneMapping=le,o.autoClear=!1;const l=new ve({name:"PMREM.Background",side:U,depthWrite:!1,depthTest:!1}),d=new x(new Ae,l);let u=!1;const a=e.background;a?a.isColor&&(l.color.copy(a),e.background=null,u=!0):(l.color.copy(Lc),u=!0);for(let t=0;t<6;t++){const a=t%3;a===0?(i.up.set(0,r[t],0),i.lookAt(c[t],0,0)):a===1?(i.up.set(0,0,r[t]),i.lookAt(0,c[t],0)):(i.up.set(0,r[t],0),i.lookAt(0,0,c[t]));const n=this._cubeSize;ds(s,a*n,t>2?n:0,n,n),o.setRenderTarget(s),u&&o.render(d,i),o.render(e,i)}d.geometry.dispose(),d.material.dispose(),o.toneMapping=p,o.autoClear=f,e.background=a}_textureToCubeUV(e,t){const n=this._renderer,s=e.mapping===Be||e.mapping===Ve;s?(this._cubemapMaterial===null&&(this._cubemapMaterial=qc()),this._cubemapMaterial.uniforms.flipEnvMap.value=e.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=Kc());const o=s?this._cubemapMaterial:this._equirectMaterial,a=new x(this._lodPlanes[0],o),r=o.uniforms;r.envMap.value=e;const i=this._cubeSize;ds(t,0,0,3*i,2*i),n.setRenderTarget(t),n.render(a,Pa)}_applyPMREM(e){const t=this._renderer,n=t.autoClear;t.autoClear=!1;for(let t=1;t<this._lodPlanes.length;t++){const n=Math.sqrt(this._sigmas[t]*this._sigmas[t]-this._sigmas[t-1]*this._sigmas[t-1]),s=Ic[(t-1)%Ic.length];this._blur(e,t-1,t,n,s)}t.autoClear=n}_blur(e,t,n,s,o){const i=this._pingPongRenderTarget;this._halfBlur(e,i,t,n,s,"latitudinal",o),this._halfBlur(i,e,n,n,s,"longitudinal",o)}_halfBlur(e,t,n,s,o,i,a){const p=this._renderer,g=this._blurMaterial;i!=="latitudinal"&&i!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const j=3,b=new x(this._lodPlanes[s],g),r=g.uniforms,v=this._sizeLods[n]-1,m=isFinite(o)?Math.PI/(2*v):2*Math.PI/(2*ut-1),f=o/m,l=isFinite(o)?1+Math.floor(j*f):ut;l>ut&&console.warn(`sigmaRadians, ${o}, is too large and will clip, as it requested ${l} samples when the maximum is set to ${ut}`);const c=[];let h=0;for(let e=0;e<ut;++e){const n=e/f,t=Math.exp(-n*n/2);c.push(t),e===0?h+=t:e<l&&(h+=2*t)}for(let e=0;e<c.length;e++)c[e]=c[e]/h;r.envMap.value=e.texture,r.samples.value=l,r.weights.value=c,r.latitudinal.value=i==="latitudinal",a&&(r.poleAxis.value=a);const{_lodMax:u}=this;r.dTheta.value=m,r.mipInt.value=u-n;const d=this._sizeLods[s],y=3*d*(s>u-Nt?s-u+Nt:0),_=4*(this._cubeSize-d);ds(t,y,_,3*d,2*d),p.setRenderTarget(t),p.render(b,Pa)}}function P2(e){const n=[],s=[],o=[];let t=e;const i=e-Nt+1+zc.length;for(let u=0;u<i;u++){const p=Math.pow(2,t);s.push(p);let b=1/p;u>e-Nt?b=zc[u-e+Nt-1]:u===0&&(b=0),o.push(b);const j=1/(p-1),c=-j/2,l=1+j/2,O=[c,c,l,c,l,l,c,c,l,l,c,l],m=6,a=6,g=3,f=2,v=1,y=new Float32Array(g*a*m),_=new Float32Array(f*a*m),w=new Float32Array(v*a*m);for(let e=0;e<m;e++){const t=e%3*2/3-1,n=e>2?0:-1,s=[t,n,0,t+2/3,n,0,t+2/3,n+1,0,t,n,0,t+2/3,n+1,0,t,n+1,0];y.set(s,g*a*e),_.set(O,f*a*e);const o=[e,e,e,e,e,e];w.set(o,v*a*e)}const h=new r;h.setAttribute("position",new d(y,g)),h.setAttribute("uv",new d(_,f)),h.setAttribute("faceIndex",new d(w,v)),n.push(h),t>Nt&&t--}return{lodPlanes:n,sizeLods:s,sigmas:o}}function $c(e,t,n){const s=new I(e,t,n);return s.texture.mapping=Qt,s.texture.name="PMREM.cubeUv",s.scissorTest=!0,s}function ds(e,t,n,s,o){e.viewport.set(t,n,s,o),e.scissor.set(t,n,s,o)}function R2(e,n,s){const o=new Float32Array(ut),i=new t(0,1,0),a=new G({name:"SphericalGaussianBlur",defines:{n:ut,CUBEUV_TEXEL_WIDTH:1/n,CUBEUV_TEXEL_HEIGHT:1/s,CUBEUV_MAX_MIP:`${e}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:o},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:i}},vertexShader:Ta(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:fe,depthTest:!1,depthWrite:!1});return a}function Kc(){return new G({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:Ta(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:fe,depthTest:!1,depthWrite:!1})}function qc(){return new G({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:Ta(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:fe,depthTest:!1,depthWrite:!1})}function Ta(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function L2(e){let n=new WeakMap,t=null;function o(o){if(o&&o.isTexture){const a=o.mapping,r=a===mn||a===Sn,c=a===Be||a===Ve;if(r||c){if(o.isRenderTargetTexture&&o.needsPMREMUpdate===!0){o.needsPMREMUpdate=!1;let s=n.get(o);return t===null&&(t=new Da(e)),s=r?t.fromEquirectangular(o,s):t.fromCubemap(o,s),n.set(o,s),s.texture}if(n.has(o))return n.get(o).texture;const image=o.image;if(r&&image&&image.height>0||c&&image&&i(image)){t===null&&(t=new Da(e));const i=r?t.fromEquirectangular(o):t.fromCubemap(o);return n.set(o,i),o.addEventListener("dispose",s),i.texture}return null}}return o}function i(e){let t=0;const n=6;for(let s=0;s<n;s++)e[s]!==void 0&&t++;return t===n}function s(e){const t=e.target;t.removeEventListener("dispose",s);const o=n.get(t);o!==void 0&&(n.delete(t),o.dispose())}function a(){n=new WeakMap,t!==null&&(t.dispose(),t=null)}return{get:o,dispose:a}}function z2(e){const n={};function t(t){if(n[t]!==void 0)return n[t];let s;switch(t){case"WEBGL_depth_texture":s=e.getExtension("WEBGL_depth_texture")||e.getExtension("MOZ_WEBGL_depth_texture")||e.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":s=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":s=e.getExtension("WEBGL_compressed_texture_s3tc")||e.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":s=e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:s=e.getExtension(t)}return n[t]=s,s}return{has:function(e){return t(e)!==null},init:function(e){e.isWebGL2?t("EXT_color_buffer_float"):(t("WEBGL_depth_texture"),t("OES_texture_float"),t("OES_texture_half_float"),t("OES_texture_half_float_linear"),t("OES_standard_derivatives"),t("OES_element_index_uint"),t("OES_vertex_array_object"),t("ANGLE_instanced_arrays")),t("OES_texture_float_linear"),t("EXT_color_buffer_half_float"),t("WEBGL_multisampled_render_to_texture")},get:function(e){const n=t(e);return n===null&&console.warn("THREE.WebGLRenderer: "+e+" extension not supported."),n}}}function T2(e,t,n,s){const i={},o=new WeakMap;function a(e){const r=e.target;r.index!==null&&t.remove(r.index);for(const e in r.attributes)t.remove(r.attributes[e]);r.removeEventListener("dispose",a),delete i[r.id];const c=o.get(r);c&&(t.remove(c),o.delete(r)),s.releaseStatesOfGeometry(r),r.isInstancedBufferGeometry===!0&&delete r._maxInstanceCount,n.memory.geometries--}function c(e,t){return i[t.id]===!0?t:(t.addEventListener("dispose",a),i[t.id]=!0,n.memory.geometries++,t)}function l(n){const s=n.attributes;for(const n in s)t.update(s[n],e.ARRAY_BUFFER);const o=n.morphAttributes;for(const s in o){const n=o[s];for(let s=0,o=n.length;s<o;s++)t.update(n[s],e.ARRAY_BUFFER)}}function r(e){const n=[],s=e.index,a=e.attributes.position;let i=0;if(s!==null){const e=s.array;i=s.version;for(let t=0,a=e.length;t<a;t+=3){const s=e[t+0],o=e[t+1],i=e[t+2];n.push(s,o,o,i,i,s)}}else{const e=a.array;i=a.version;for(let t=0,a=e.length/3-1;t<a;t+=3){const s=t+0,o=t+1,i=t+2;n.push(s,o,o,i,i,s)}}const r=new(uc(n)?Co:ko)(n,1);r.version=i;const c=o.get(e);c&&t.remove(c),o.set(e,r)}function d(e){const t=o.get(e);if(t){const n=e.index;n!==null&&t.version<n.version&&r(e)}else r(e);return o.get(e)}return{get:c,update:l,getWireframeAttribute:d}}function F2(e,t,n,s){const r=s.isWebGL2;let o;function c(e){o=e}let i,a;function l(e){i=e.type,a=e.bytesPerElement}function d(t,s){e.drawElements(o,s,i,t*a),n.update(s,o,1)}function u(s,c,l){if(l===0)return;let d,u;if(r)d=e,u="drawElementsInstanced";else if(d=t.get("ANGLE_instanced_arrays"),u="drawElementsInstancedANGLE",d===null){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}d[u](o,c,i,s*a,l),n.update(c,o,l)}this.setMode=c,this.setIndex=l,this.render=d,this.renderInstances=u}function M2(e){const n={geometries:0,textures:0},t={frame:0,calls:0,triangles:0,points:0,lines:0};function s(n,s,o){switch(t.calls++,s){case e.TRIANGLES:t.triangles+=o*(n/3);break;case e.LINES:t.lines+=o*(n/2);break;case e.LINE_STRIP:t.lines+=o*(n-1);break;case e.LINE_LOOP:t.lines+=o*n;break;case e.POINTS:t.points+=o*n;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",s);break}}function o(){t.frame++,t.calls=0,t.triangles=0,t.points=0,t.lines=0}return{memory:n,render:t,programs:null,autoReset:!0,reset:o,update:s}}function S2(e,t){return e[0]-t[0]}function E2(e,t){return Math.abs(t[1])-Math.abs(e[1])}function Fa(e,t){let n=1;const s=t.isInterleavedBufferAttribute?t.data.array:t.array;s instanceof Int8Array?n=127:s instanceof Int16Array?n=32767:s instanceof Int32Array?n=2147483647:console.error("THREE.WebGLMorphtargets: Unsupported morph attribute data type: ",s),e.divideScalar(n)}function C2(e,t,s){const c={},a=new Float32Array(8),r=new WeakMap,o=new h,i=[];for(let e=0;e<8;e++)i[e]=[e,0];function l(l,d,u,h){const m=l.morphTargetInfluences;if(t.isWebGL2===!0){const c=d.morphAttributes.position||d.morphAttributes.normal||d.morphAttributes.color,a=c!==void 0?c.length:0;let i=r.get(d);if(i===void 0||i.count!==a){i!==void 0&&i.texture.dispose();const h=d.morphAttributes.position!==void 0,m=d.morphAttributes.normal!==void 0,p=d.morphAttributes.color!==void 0,g=d.morphAttributes.position||[],v=d.morphAttributes.normal||[],b=d.morphAttributes.color||[];let c=0;h===!0&&(c=1),m===!0&&(c=2),p===!0&&(c=3);let s=d.attributes.position.count*c,l=1;s>t.maxTextureSize&&(l=Math.ceil(s/t.maxTextureSize),s=t.maxTextureSize);const e=new Float32Array(s*l*4*a),u=new Tt(e,s,l,a);u.type=xe,u.needsUpdate=!0;const j=c*4;for(let n=0;n<a;n++){const i=g[n],c=v[n],r=b[n],t=s*l*4*n;for(let s=0;s<i.count;s++){const n=s*j;h===!0&&(o.fromBufferAttribute(i,s),i.normalized===!0&&Fa(o,i),e[t+n+0]=o.x,e[t+n+1]=o.y,e[t+n+2]=o.z,e[t+n+3]=0),m===!0&&(o.fromBufferAttribute(c,s),c.normalized===!0&&Fa(o,c),e[t+n+4]=o.x,e[t+n+5]=o.y,e[t+n+6]=o.z,e[t+n+7]=0),p===!0&&(o.fromBufferAttribute(r,s),r.normalized===!0&&Fa(o,r),e[t+n+8]=o.x,e[t+n+9]=o.y,e[t+n+10]=o.z,e[t+n+11]=r.itemSize===4?o.w:1)}}i={count:a,texture:u,size:new n(s,l)},r.set(d,i);function f(){u.dispose(),r.delete(d),d.removeEventListener("dispose",f)}d.addEventListener("dispose",f)}let l=0;for(let e=0;e<m.length;e++)l+=m[e];const u=d.morphTargetsRelative?1:1-l;h.getUniforms().setValue(e,"morphTargetBaseInfluence",u),h.getUniforms().setValue(e,"morphTargetInfluences",m),h.getUniforms().setValue(e,"morphTargetsTexture",i.texture,s),h.getUniforms().setValue(e,"morphTargetsTextureSize",i.size)}else{const n=m===void 0?0:m.length;let t=c[d.id];if(t===void 0||t.length!==n){t=[];for(let e=0;e<n;e++)t[e]=[e,0];c[d.id]=t}for(let e=0;e<n;e++){const s=t[e];s[0]=e,s[1]=m[e]}t.sort(E2);for(let e=0;e<8;e++)e<n&&t[e][1]?(i[e][0]=t[e][0],i[e][1]=t[e][1]):(i[e][0]=Number.MAX_SAFE_INTEGER,i[e][1]=0);i.sort(S2);const s=d.morphAttributes.position,o=d.morphAttributes.normal;let r=0;for(let e=0;e<8;e++){const c=i[e],t=c[0],n=c[1];t!==Number.MAX_SAFE_INTEGER&&n?(s&&d.getAttribute("morphTarget"+e)!==s[t]&&d.setAttribute("morphTarget"+e,s[t]),o&&d.getAttribute("morphNormal"+e)!==o[t]&&d.setAttribute("morphNormal"+e,o[t]),a[e]=n,r+=n):(s&&d.hasAttribute("morphTarget"+e)===!0&&d.deleteAttribute("morphTarget"+e),o&&d.hasAttribute("morphNormal"+e)===!0&&d.deleteAttribute("morphNormal"+e),a[e]=0)}const l=d.morphTargetsRelative?1:1-r;h.getUniforms().setValue(e,"morphTargetBaseInfluence",l),h.getUniforms().setValue(e,"morphTargetInfluences",a)}}return{update:l}}function x2(e,t,n,s){let o=new WeakMap;function a(a){const c=s.render.frame,l=a.geometry,r=t.get(a,l);return o.get(r)!==c&&(t.update(r),o.set(r,c)),a.isInstancedMesh&&(a.hasEventListener("dispose",i)===!1&&a.addEventListener("dispose",i),n.update(a.instanceMatrix,e.ARRAY_BUFFER),a.instanceColor!==null&&n.update(a.instanceColor,e.ARRAY_BUFFER)),r}function r(){o=new WeakMap}function i(e){const t=e.target;t.removeEventListener("dispose",i),n.remove(t.instanceMatrix),t.instanceColor!==null&&n.remove(t.instanceColor)}return{update:a,dispose:r}}const il=new A,al=new Tt,rl=new Xn,cl=new St,ll=[],dl=[],ul=new Float32Array(16),hl=new Float32Array(9),ml=new Float32Array(4);function Vt(e,t,n){const o=e[0];if(o<=0||o>0)return e;const i=t*n;let s=ll[i];if(s===void 0&&(s=new Float32Array(i),ll[i]=s),t!==0){o.toArray(s,0);for(let o=1,i=0;o!==t;++o)i+=n,e[o].toArray(s,i)}return s}function H(e,t){if(e.length!==t.length)return!1;for(let n=0,s=e.length;n<s;n++)if(e[n]!==t[n])return!1;return!0}function N(e,t){for(let n=0,s=t.length;n<s;n++)e[n]=t[n]}function hs(e,t){let n=dl[t];n===void 0&&(n=new Int32Array(t),dl[t]=n);for(let s=0;s!==t;++s)n[s]=e.allocateTextureUnit();return n}function _2(e,t){const n=this.cache;if(n[0]===t)return;e.uniform1f(this.addr,t),n[0]=t}function b2(e,t){const n=this.cache;if(t.x!==void 0)(n[0]!==t.x||n[1]!==t.y)&&(e.uniform2f(this.addr,t.x,t.y),n[0]=t.x,n[1]=t.y);else{if(H(n,t))return;e.uniform2fv(this.addr,t),N(n,t)}}function h2(e,t){const n=this.cache;if(t.x!==void 0)(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z)&&(e.uniform3f(this.addr,t.x,t.y,t.z),n[0]=t.x,n[1]=t.y,n[2]=t.z);else if(t.r!==void 0)(n[0]!==t.r||n[1]!==t.g||n[2]!==t.b)&&(e.uniform3f(this.addr,t.r,t.g,t.b),n[0]=t.r,n[1]=t.g,n[2]=t.b);else{if(H(n,t))return;e.uniform3fv(this.addr,t),N(n,t)}}function w1(e,t){const n=this.cache;if(t.x!==void 0)(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z||n[3]!==t.w)&&(e.uniform4f(this.addr,t.x,t.y,t.z,t.w),n[0]=t.x,n[1]=t.y,n[2]=t.z,n[3]=t.w);else{if(H(n,t))return;e.uniform4fv(this.addr,t),N(n,t)}}function l2(e,t){const n=this.cache,s=t.elements;if(s===void 0){if(H(n,t))return;e.uniformMatrix2fv(this.addr,!1,t),N(n,t)}else{if(H(n,s))return;ml.set(s),e.uniformMatrix2fv(this.addr,!1,ml),N(n,s)}}function c2(e,t){const n=this.cache,s=t.elements;if(s===void 0){if(H(n,t))return;e.uniformMatrix3fv(this.addr,!1,t),N(n,t)}else{if(H(n,s))return;hl.set(s),e.uniformMatrix3fv(this.addr,!1,hl),N(n,s)}}function r2(e,t){const n=this.cache,s=t.elements;if(s===void 0){if(H(n,t))return;e.uniformMatrix4fv(this.addr,!1,t),N(n,t)}else{if(H(n,s))return;ul.set(s),e.uniformMatrix4fv(this.addr,!1,ul),N(n,s)}}function a2(e,t){const n=this.cache;if(n[0]===t)return;e.uniform1i(this.addr,t),n[0]=t}function i2(e,t){const n=this.cache;if(H(n,t))return;e.uniform2iv(this.addr,t),N(n,t)}function s2(e,t){const n=this.cache;if(H(n,t))return;e.uniform3iv(this.addr,t),N(n,t)}function n2(e,t){const n=this.cache;if(H(n,t))return;e.uniform4iv(this.addr,t),N(n,t)}function t2(e,t){const n=this.cache;if(n[0]===t)return;e.uniform1ui(this.addr,t),n[0]=t}function e2(e,t){const n=this.cache;if(H(n,t))return;e.uniform2uiv(this.addr,t),N(n,t)}function J0(e,t){const n=this.cache;if(H(n,t))return;e.uniform3uiv(this.addr,t),N(n,t)}function Z0(e,t){const n=this.cache;if(H(n,t))return;e.uniform4uiv(this.addr,t),N(n,t)}function Q0(e,t,n){const o=this.cache,s=n.allocateTextureUnit();o[0]!==s&&(e.uniform1i(this.addr,s),o[0]=s),n.setTexture2D(t||il,s)}function _1(e,t,n){const o=this.cache,s=n.allocateTextureUnit();o[0]!==s&&(e.uniform1i(this.addr,s),o[0]=s),n.setTexture3D(t||rl,s)}function X0(e,t,n){const o=this.cache,s=n.allocateTextureUnit();o[0]!==s&&(e.uniform1i(this.addr,s),o[0]=s),n.setTextureCube(t||cl,s)}function G0(e,t,n){const o=this.cache,s=n.allocateTextureUnit();o[0]!==s&&(e.uniform1i(this.addr,s),o[0]=s),n.setTexture2DArray(t||al,s)}function K0(e){switch(e){case 5126:return _2;case 35664:return b2;case 35665:return h2;case 35666:return w1;case 35674:return l2;case 35675:return c2;case 35676:return r2;case 5124:case 35670:return a2;case 35667:case 35671:return i2;case 35668:case 35672:return s2;case 35669:case 35673:return n2;case 5125:return t2;case 36294:return e2;case 36295:return J0;case 36296:return Z0;case 35678:case 36198:case 36298:case 36306:case 35682:return Q0;case 35679:case 36299:case 36307:return _1;case 35680:case 36300:case 36308:case 36293:return X0;case 36289:case 36303:case 36311:case 36292:return G0}}function W0(e,t){e.uniform1fv(this.addr,t)}function $0(e,t){const n=Vt(t,this.size,2);e.uniform2fv(this.addr,n)}function B0(e,t){const n=Vt(t,this.size,3);e.uniform3fv(this.addr,n)}function P0(e,t){const n=Vt(t,this.size,4);e.uniform4fv(this.addr,n)}function R0(e,t){const n=Vt(t,this.size,4);e.uniformMatrix2fv(this.addr,!1,n)}function L0(e,t){const n=Vt(t,this.size,9);e.uniformMatrix3fv(this.addr,!1,n)}function N0(e,t){const n=Vt(t,this.size,16);e.uniformMatrix4fv(this.addr,!1,n)}function D0(e,t){e.uniform1iv(this.addr,t)}function z0(e,t){e.uniform2iv(this.addr,t)}function T0(e,t){e.uniform3iv(this.addr,t)}function F0(e,t){e.uniform4iv(this.addr,t)}function M0(e,t){e.uniform1uiv(this.addr,t)}function S0(e,t){e.uniform2uiv(this.addr,t)}function k0(e,t){e.uniform3uiv(this.addr,t)}function E0(e,t){e.uniform4uiv(this.addr,t)}function C0(e,t,n){const s=t.length,o=hs(n,s);e.uniform1iv(this.addr,o);for(let e=0;e!==s;++e)n.setTexture2D(t[e]||il,o[e])}function O0(e,t,n){const s=t.length,o=hs(n,s);e.uniform1iv(this.addr,o);for(let e=0;e!==s;++e)n.setTexture3D(t[e]||rl,o[e])}function g0(e,t,n){const s=t.length,o=hs(n,s);e.uniform1iv(this.addr,o);for(let e=0;e!==s;++e)n.setTextureCube(t[e]||cl,o[e])}function h0(e,t,n){const s=t.length,o=hs(n,s);e.uniform1iv(this.addr,o);for(let e=0;e!==s;++e)n.setTexture2DArray(t[e]||al,o[e])}function u0(e){switch(e){case 5126:return W0;case 35664:return $0;case 35665:return B0;case 35666:return P0;case 35674:return R0;case 35675:return L0;case 35676:return N0;case 5124:case 35670:return D0;case 35667:case 35671:return z0;case 35668:case 35672:return T0;case 35669:case 35673:return F0;case 5125:return M0;case 36294:return S0;case 36295:return k0;case 36296:return E0;case 35678:case 36198:case 36298:case 36306:case 35682:return C0;case 35679:case 36299:case 36307:return O0;case 35680:case 36300:case 36308:case 36293:return g0;case 36289:case 36303:case 36311:case 36292:return h0}}function d0(e,t,n){this.id=e,this.addr=n,this.cache=[],this.setValue=K0(t.type)}function id(e,t,n){this.id=e,this.addr=n,this.cache=[],this.size=t.size,this.setValue=u0(t.type)}id.prototype.updateCache=function(e){const t=this.cache;e instanceof Float32Array&&t.length!==e.length&&(this.cache=new Float32Array(e.length)),N(t,e)};function ad(e){this.id=e,this.seq=[],this.map={}}ad.prototype.setValue=function(e,t,n){const s=this.seq;for(let o=0,a=s.length;o!==a;++o){const i=s[o];i.setValue(e,t[i.id],n)}};const Ea=/(\w+)(\])?(\[|\.)?/g;function cd(e,t){e.seq.push(t),e.map[t.id]=t}function l0(e,t,n){const s=e.name,o=s.length;for(Ea.lastIndex=0;!0;){const r=Ea.exec(s),l=Ea.lastIndex;let i=r[1];const d=r[2]==="]",c=r[3];if(d&&(i=i|0),c===void 0||c==="["&&l+2===o){cd(n,c===void 0?new d0(i,e,t):new id(i,e,t));break}const u=n.map;let a=u[i];a===void 0&&(a=new ad(i),cd(n,a)),n=a}}function We(e,t){this.seq=[],this.map={};const n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS);for(let s=0;s<n;++s){const o=e.getActiveUniform(t,s),i=e.getUniformLocation(t,o.name);l0(o,i,this)}}We.prototype.setValue=function(e,t,n,s){const o=this.map[t];o!==void 0&&o.setValue(e,n,s)},We.prototype.setOptional=function(e,t,n){const s=t[n];s!==void 0&&this.setValue(e,n,s)},We.upload=function(e,t,n,s){for(let o=0,r=t.length;o!==r;++o){const i=t[o],a=n[i.id];a.needsUpdate!==!1&&i.setValue(e,a.value,s)}},We.seqWithValue=function(e,t){const n=[];for(let s=0,i=e.length;s!==i;++s){const o=e[s];o.id in t&&n.push(o)}return n};function ud(e,t,n){const s=e.createShader(t);return e.shaderSource(s,n),e.compileShader(s),s}let c0=0;function a0(e,t){const n=e.split(`
`),s=[],o=Math.max(t-6,0),i=Math.min(t+6,n.length);for(let e=o;e<i;e++)s.push(e+1+": "+n[e]);return s.join(`
`)}function o0(e){switch(e){case ce:return["Linear","( value )"];case p:return["sRGB","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",e),["Linear","( value )"]}}function pd(e,t,n){const o=e.getShaderParameter(t,e.COMPILE_STATUS),s=e.getShaderInfoLog(t).trim();if(o&&s==="")return"";const i=parseInt(/ERROR: 0:(\d+)/.exec(s)[1]);return n.toUpperCase()+`

`+s+`

`+a0(e.getShaderSource(t),i)}function s0(e,t){const n=o0(t);return"vec4 "+e+"( vec4 value ) { return LinearTo"+n[0]+n[1]+"; }"}function n0(e,t){let n;switch(t){case Ed:n="Linear";break;case kd:n="Reinhard";break;case zd:n="OptimizedCineon";break;case Pd:n="ACESFilmic";break;case Hd:n="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t),n="Linear"}return"vec3 "+e+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}function t0(e){const t=[e.extensionDerivatives||!!e.envMapCubeUVHeight||e.bumpMap||e.tangentSpaceNormalMap||e.clearcoatNormalMap||e.flatShading||e.shaderID==="physical"?"#extension GL_OES_standard_derivatives : enable":"",(e.extensionFragDepth||e.logarithmicDepthBuffer)&&e.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",e.extensionDrawBuffers&&e.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(e.extensionShaderTextureLOD||e.envMap||e.transmission)&&e.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""];return t.filter(os).join(`
`)}function Z4(e){const t=[];for(const n in e){const s=e[n];if(s===!1)continue;t.push("#define "+n+" "+s)}return t.join(`
`)}function Q4(e,t){const n={},s=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES);for(let a=0;a<s;a++){const o=e.getActiveAttrib(t,a),r=o.name;let i=1;o.type===e.FLOAT_MAT2&&(i=2),o.type===e.FLOAT_MAT3&&(i=3),o.type===e.FLOAT_MAT4&&(i=4),n[r]={type:o.type,location:e.getAttribLocation(t,r),locationSize:i}}return n}function os(e){return e!==""}function wd(e,t){return e.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function Od(e,t){return e.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const X4=/^[ \t]*#include +<([\w\d./]+)>/gm;function Oa(e){return e.replace(X4,G4)}function G4(e,t){const n=c[t];if(n===void 0)throw new Error("Can not resolve #include <"+t+">");return Oa(n)}const K4=/#pragma unroll_loop[\s]+?for \( int i = (\d+); i < (\d+); i \+\+ \) \{([\s\S]+?)(?=\})\}/g,U4=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function Sd(e){return e.replace(U4,Fd).replace(K4,W4)}function W4(e,t,n,s){return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."),Fd(e,t,n,s)}function Fd(e,t,n,s){let o="";for(let e=parseInt(t);e<parseInt(n);e++)o+=s.replace(/\[\s*i\s*\]/g,"[ "+e+" ]").replace(/UNROLLED_LOOP_INDEX/g,e);return o}function Td(e){let t="precision "+e.precision+` float;
precision `+e.precision+" int;";return e.precision==="highp"?t+=`
#define HIGH_PRECISION`:e.precision==="mediump"?t+=`
#define MEDIUM_PRECISION`:e.precision==="lowp"&&(t+=`
#define LOW_PRECISION`),t}function V4(e){let t="SHADOWMAP_TYPE_BASIC";return e.shadowMapType===na?t="SHADOWMAP_TYPE_PCF":e.shadowMapType===Ac?t="SHADOWMAP_TYPE_PCF_SOFT":e.shadowMapType===Dt&&(t="SHADOWMAP_TYPE_VSM"),t}function I4(e){let t="ENVMAP_TYPE_CUBE";if(e.envMap)switch(e.envMapMode){case Be:case Ve:t="ENVMAP_TYPE_CUBE";break;case Qt:t="ENVMAP_TYPE_CUBE_UV";break}return t}function H4(e){let t="ENVMAP_MODE_REFLECTION";if(e.envMap)switch(e.envMapMode){case Ve:t="ENVMAP_MODE_REFRACTION";break}return t}function P4(e){let t="ENVMAP_BLENDING_NONE";if(e.envMap)switch(e.combine){case gn:t="ENVMAP_BLENDING_MULTIPLY";break;case bd:t="ENVMAP_BLENDING_MIX";break;case jd:t="ENVMAP_BLENDING_ADD";break}return t}function R4(e){const t=e.envMapCubeUVHeight;if(t===null)return null;const n=Math.log2(t/32+1)+3,s=1/t,o=1/(3*Math.max(Math.pow(2,n),7*16));return{texelWidth:o,texelHeight:s,maxMip:n}}function L4(e,t,n,s){const o=e.getContext(),C=n.defines;let a=n.vertexShader,r=n.fragmentShader;const y=V4(n),_=I4(n),j=H4(n),x=P4(n),u=R4(n),b=n.isWebGL2?"":t0(n),f=Z4(C),i=o.createProgram();let d,l,v=n.glslVersion?"#version "+n.glslVersion+`
`:"";n.isRawShaderMaterial?(d=[f].filter(os).join(`
`),d.length>0&&(d+=`
`),l=[b,f].filter(os).join(`
`),l.length>0&&(l+=`
`)):(d=[Td(n),"#define SHADER_NAME "+n.shaderName,f,n.instancing?"#define USE_INSTANCING":"",n.instancingColor?"#define USE_INSTANCING_COLOR":"",n.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define MAX_BONES "+n.maxBones,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+j:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.displacementMap&&n.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",n.specularColorMap?"#define USE_SPECULARCOLORMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.sheenColorMap?"#define USE_SHEENCOLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.flatShading?"#define FLAT_SHADED":"",n.skinning?"#define USE_SKINNING":"",n.useVertexTexture?"#define BONE_TEXTURE":"",n.morphTargets?"#define USE_MORPHTARGETS":"",n.morphNormals&&n.flatShading===!1?"#define USE_MORPHNORMALS":"",n.morphColors&&n.isWebGL2?"#define USE_MORPHCOLORS":"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+n.morphTextureStride:"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_COUNT "+n.morphTargetsCount:"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+y:"",n.sizeAttenuation?"#define USE_SIZEATTENUATION":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","	attribute vec3 morphTarget0;","	attribute vec3 morphTarget1;","	attribute vec3 morphTarget2;","	attribute vec3 morphTarget3;","	#ifdef USE_MORPHNORMALS","		attribute vec3 morphNormal0;","		attribute vec3 morphNormal1;","		attribute vec3 morphNormal2;","		attribute vec3 morphNormal3;","	#else","		attribute vec3 morphTarget4;","		attribute vec3 morphTarget5;","		attribute vec3 morphTarget6;","		attribute vec3 morphTarget7;","	#endif","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(os).join(`
`),l=[b,Td(n),"#define SHADER_NAME "+n.shaderName,f,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.matcap?"#define USE_MATCAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+_:"",n.envMap?"#define "+j:"",n.envMap?"#define "+x:"",u?"#define CUBEUV_TEXEL_WIDTH "+u.texelWidth:"",u?"#define CUBEUV_TEXEL_HEIGHT "+u.texelHeight:"",u?"#define CUBEUV_MAX_MIP "+u.maxMip+".0":"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoat?"#define USE_CLEARCOAT":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",n.specularColorMap?"#define USE_SPECULARCOLORMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaTest?"#define USE_ALPHATEST":"",n.sheen?"#define USE_SHEEN":"",n.sheenColorMap?"#define USE_SHEENCOLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors||n.instancingColor?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.gradientMap?"#define USE_GRADIENTMAP":"",n.flatShading?"#define FLAT_SHADED":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+y:"",n.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",n.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",n.toneMapping!==le?"#define TONE_MAPPING":"",n.toneMapping!==le?c.tonemapping_pars_fragment:"",n.toneMapping!==le?n0("toneMapping",n.toneMapping):"",n.dithering?"#define DITHERING":"",n.opaque?"#define OPAQUE":"",c.encodings_pars_fragment,s0("linearToOutputTexel",n.outputEncoding),n.depthPacking?"#define DEPTH_PACKING "+n.depthPacking:"",`
`].filter(os).join(`
`)),a=Oa(a),a=wd(a,n),a=Od(a,n),r=Oa(r),r=wd(r,n),r=Od(r,n),a=Sd(a),r=Sd(r),n.isWebGL2&&n.isRawShaderMaterial!==!0&&(v=`#version 300 es
`,d=["precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+d,l=["#define varying in",n.glslVersion===li?"":"layout(location = 0) out highp vec4 pc_fragColor;",n.glslVersion===li?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+l);const O=v+d+a,w=v+l+r,h=ud(o,o.VERTEX_SHADER,O),m=ud(o,o.FRAGMENT_SHADER,w);if(o.attachShader(i,h),o.attachShader(i,m),n.index0AttributeName!==void 0?o.bindAttribLocation(i,0,n.index0AttributeName):n.morphTargets===!0&&o.bindAttribLocation(i,0,"position"),o.linkProgram(i),e.debug.checkShaderErrors){const e=o.getProgramInfoLog(i).trim(),t=o.getShaderInfoLog(h).trim(),n=o.getShaderInfoLog(m).trim();let s=!0,a=!0;if(o.getProgramParameter(i,o.LINK_STATUS)===!1){s=!1;const t=pd(o,h,"vertex"),n=pd(o,m,"fragment");console.error("THREE.WebGLProgram: Shader Error "+o.getError()+" - VALIDATE_STATUS "+o.getProgramParameter(i,o.VALIDATE_STATUS)+`

Program Info Log: `+e+`
`+t+`
`+n)}else e!==""?console.warn("THREE.WebGLProgram: Program Info Log:",e):(t===""||n==="")&&(a=!1);a&&(this.diagnostics={runnable:s,programLog:e,vertexShader:{log:t,prefix:d},fragmentShader:{log:n,prefix:l}})}o.deleteShader(h),o.deleteShader(m);let p;this.getUniforms=function(){return p===void 0&&(p=new We(o,i)),p};let g;return this.getAttributes=function(){return g===void 0&&(g=Q4(o,i)),g},this.destroy=function(){s.releaseStatesOfProgram(this),o.deleteProgram(i),this.program=void 0},this.name=n.shaderName,this.id=c0++,this.cacheKey=t,this.usedTimes=1,this.program=i,this.vertexShader=h,this.fragmentShader=m,this}let D4=0;class T4{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(e){const o=e.vertexShader,i=e.fragmentShader,n=this._getShaderStage(o),s=this._getShaderStage(i),t=this._getShaderCacheForMaterial(e);return t.has(n)===!1&&(t.add(n),n.usedTimes++),t.has(s)===!1&&(t.add(s),s.usedTimes++),this}remove(e){const t=this.materialCache.get(e);for(const e of t)e.usedTimes--,e.usedTimes===0&&this.shaderCache.delete(e.code);return this.materialCache.delete(e),this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(e){const t=this.materialCache;return t.has(e)===!1&&t.set(e,new Set),t.get(e)}_getShaderStage(e){const t=this.shaderCache;if(t.has(e)===!1){const n=new y4(e);t.set(e,n)}return t.get(e)}}class y4{constructor(e){this.id=D4++,this.code=e,this.usedTimes=0}}function j4(e,t,n,s,o,i,a){const r=new co,l=new T4,c=[],u=o.isWebGL2,b=o.logarithmicDepthBuffer,h=o.floatVertexTextures,v=o.maxVertexUniforms,g=o.vertexTextures;let d=o.precision;const m={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function f(e){const s=e.skeleton,t=s.bones;if(h)return 1024;const o=v,i=Math.floor((o-20)/4),n=Math.min(i,t.length);return n<t.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+t.length+" bones. This GPU supports "+n+"."),0):n}function j(i,r,c,v,j){const x=v.fog,y=j.geometry,L=i.isMeshStandardMaterial?v.environment:null,_=(i.isMeshStandardMaterial?n:t).get(i.envMap||L),z=!!_&&_.mapping===Qt?_.image.height:null,C=m[i.type],S=j.isSkinnedMesh?f(j):0;i.precision!==null&&(d=o.getMaxPrecision(i.precision),d!==i.precision&&console.warn("THREE.WebGLProgram.getParameters:",i.precision,"not supported, using",d,"instead."));const M=y.morphAttributes.position||y.morphAttributes.normal||y.morphAttributes.color,D=M!==void 0?M.length:0;let w=0;y.morphAttributes.position!==void 0&&(w=1),y.morphAttributes.normal!==void 0&&(w=2),y.morphAttributes.color!==void 0&&(w=3);let k,A,T,F;if(C){const e=Z[C];k=e.vertexShader,A=e.fragmentShader}else k=i.vertexShader,A=i.fragmentShader,l.update(i),T=l.getVertexShaderID(i),F=l.getFragmentShaderID(i);const E=e.getRenderTarget(),N=i.alphaTest>0,O=i.clearcoat>0,R={isWebGL2:u,shaderID:C,shaderName:i.type,vertexShader:k,fragmentShader:A,defines:i.defines,customVertexShaderID:T,customFragmentShaderID:F,isRawShaderMaterial:i.isRawShaderMaterial===!0,glslVersion:i.glslVersion,precision:d,instancing:j.isInstancedMesh===!0,instancingColor:j.isInstancedMesh===!0&&j.instanceColor!==null,supportsVertexTextures:g,outputEncoding:E===null?e.outputEncoding:E.isXRRenderTarget===!0?E.texture.encoding:ce,map:!!i.map,matcap:!!i.matcap,envMap:!!_,envMapMode:_&&_.mapping,envMapCubeUVHeight:z,lightMap:!!i.lightMap,aoMap:!!i.aoMap,emissiveMap:!!i.emissiveMap,bumpMap:!!i.bumpMap,normalMap:!!i.normalMap,objectSpaceNormalMap:i.normalMapType===ru,tangentSpaceNormalMap:i.normalMapType===mt,decodeVideoTexture:!!i.map&&i.map.isVideoTexture===!0&&i.map.encoding===p,clearcoat:O,clearcoatMap:O&&!!i.clearcoatMap,clearcoatRoughnessMap:O&&!!i.clearcoatRoughnessMap,clearcoatNormalMap:O&&!!i.clearcoatNormalMap,displacementMap:!!i.displacementMap,roughnessMap:!!i.roughnessMap,metalnessMap:!!i.metalnessMap,specularMap:!!i.specularMap,specularIntensityMap:!!i.specularIntensityMap,specularColorMap:!!i.specularColorMap,opaque:i.transparent===!1&&i.blending===xt,alphaMap:!!i.alphaMap,alphaTest:N,gradientMap:!!i.gradientMap,sheen:i.sheen>0,sheenColorMap:!!i.sheenColorMap,sheenRoughnessMap:!!i.sheenRoughnessMap,transmission:i.transmission>0,transmissionMap:!!i.transmissionMap,thicknessMap:!!i.thicknessMap,combine:i.combine,vertexTangents:!!i.normalMap&&!!y.attributes.tangent,vertexColors:i.vertexColors,vertexAlphas:i.vertexColors===!0&&!!y.attributes.color&&y.attributes.color.itemSize===4,vertexUvs:!!i.map||!!i.bumpMap||!!i.normalMap||!!i.specularMap||!!i.alphaMap||!!i.emissiveMap||!!i.roughnessMap||!!i.metalnessMap||!!i.clearcoatMap||!!i.clearcoatRoughnessMap||!!i.clearcoatNormalMap||!!i.displacementMap||!!i.transmissionMap||!!i.thicknessMap||!!i.specularIntensityMap||!!i.specularColorMap||!!i.sheenColorMap||!!i.sheenRoughnessMap,uvsVertexOnly:!(!!i.map||!!i.bumpMap||!!i.normalMap||!!i.specularMap||!!i.alphaMap||!!i.emissiveMap||!!i.roughnessMap||!!i.metalnessMap||!!i.clearcoatNormalMap||i.transmission>0||!!i.transmissionMap||!!i.thicknessMap||!!i.specularIntensityMap||!!i.specularColorMap||i.sheen>0||!!i.sheenColorMap||!!i.sheenRoughnessMap)&&!!i.displacementMap,fog:!!x,useFog:i.fog,fogExp2:x&&x.isFogExp2,flatShading:!!i.flatShading,sizeAttenuation:i.sizeAttenuation,logarithmicDepthBuffer:b,skinning:j.isSkinnedMesh===!0&&S>0,maxBones:S,useVertexTexture:h,morphTargets:y.morphAttributes.position!==void 0,morphNormals:y.morphAttributes.normal!==void 0,morphColors:y.morphAttributes.color!==void 0,morphTargetsCount:D,morphTextureStride:w,numDirLights:r.directional.length,numPointLights:r.point.length,numSpotLights:r.spot.length,numRectAreaLights:r.rectArea.length,numHemiLights:r.hemi.length,numDirLightShadows:r.directionalShadowMap.length,numPointLightShadows:r.pointShadowMap.length,numSpotLightShadows:r.spotShadowMap.length,numClippingPlanes:a.numPlanes,numClipIntersection:a.numIntersection,dithering:i.dithering,shadowMapEnabled:e.shadowMap.enabled&&c.length>0,shadowMapType:e.shadowMap.type,toneMapping:i.toneMapped?e.toneMapping:le,physicallyCorrectLights:e.physicallyCorrectLights,premultipliedAlpha:i.premultipliedAlpha,doubleSided:i.side===gt,flipSided:i.side===U,depthPacking:i.depthPacking!==void 0&&i.depthPacking,index0AttributeName:i.index0AttributeName,extensionDerivatives:i.extensions&&i.extensions.derivatives,extensionFragDepth:i.extensions&&i.extensions.fragDepth,extensionDrawBuffers:i.extensions&&i.extensions.drawBuffers,extensionShaderTextureLOD:i.extensions&&i.extensions.shaderTextureLOD,rendererExtensionFragDepth:u||s.has("EXT_frag_depth"),rendererExtensionDrawBuffers:u||s.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:u||s.has("EXT_shader_texture_lod"),customProgramCacheKey:i.customProgramCacheKey()};return R}function y(t){const n=[];if(t.shaderID?n.push(t.shaderID):(n.push(t.customVertexShaderID),n.push(t.customFragmentShaderID)),t.defines!==void 0)for(const e in t.defines)n.push(e),n.push(t.defines[e]);return t.isRawShaderMaterial===!1&&(_(n,t),w(n,t),n.push(e.outputEncoding)),n.push(t.customProgramCacheKey),n.join()}function _(e,t){e.push(t.precision),e.push(t.outputEncoding),e.push(t.envMapMode),e.push(t.envMapCubeUVHeight),e.push(t.combine),e.push(t.vertexUvs),e.push(t.fogExp2),e.push(t.sizeAttenuation),e.push(t.maxBones),e.push(t.morphTargetsCount),e.push(t.morphAttributeCount),e.push(t.numDirLights),e.push(t.numPointLights),e.push(t.numSpotLights),e.push(t.numHemiLights),e.push(t.numRectAreaLights),e.push(t.numDirLightShadows),e.push(t.numPointLightShadows),e.push(t.numSpotLightShadows),e.push(t.shadowMapType),e.push(t.toneMapping),e.push(t.numClippingPlanes),e.push(t.numClipIntersection)}function w(e,t){r.disableAll(),t.isWebGL2&&r.enable(0),t.supportsVertexTextures&&r.enable(1),t.instancing&&r.enable(2),t.instancingColor&&r.enable(3),t.map&&r.enable(4),t.matcap&&r.enable(5),t.envMap&&r.enable(6),t.lightMap&&r.enable(7),t.aoMap&&r.enable(8),t.emissiveMap&&r.enable(9),t.bumpMap&&r.enable(10),t.normalMap&&r.enable(11),t.objectSpaceNormalMap&&r.enable(12),t.tangentSpaceNormalMap&&r.enable(13),t.clearcoat&&r.enable(14),t.clearcoatMap&&r.enable(15),t.clearcoatRoughnessMap&&r.enable(16),t.clearcoatNormalMap&&r.enable(17),t.displacementMap&&r.enable(18),t.specularMap&&r.enable(19),t.roughnessMap&&r.enable(20),t.metalnessMap&&r.enable(21),t.gradientMap&&r.enable(22),t.alphaMap&&r.enable(23),t.alphaTest&&r.enable(24),t.vertexColors&&r.enable(25),t.vertexAlphas&&r.enable(26),t.vertexUvs&&r.enable(27),t.vertexTangents&&r.enable(28),t.uvsVertexOnly&&r.enable(29),t.fog&&r.enable(30),e.push(r.mask),r.disableAll(),t.useFog&&r.enable(0),t.flatShading&&r.enable(1),t.logarithmicDepthBuffer&&r.enable(2),t.skinning&&r.enable(3),t.useVertexTexture&&r.enable(4),t.morphTargets&&r.enable(5),t.morphNormals&&r.enable(6),t.morphColors&&r.enable(7),t.premultipliedAlpha&&r.enable(8),t.shadowMapEnabled&&r.enable(9),t.physicallyCorrectLights&&r.enable(10),t.doubleSided&&r.enable(11),t.flipSided&&r.enable(12),t.depthPacking&&r.enable(13),t.dithering&&r.enable(14),t.specularIntensityMap&&r.enable(15),t.specularColorMap&&r.enable(16),t.transmission&&r.enable(17),t.transmissionMap&&r.enable(18),t.thicknessMap&&r.enable(19),t.sheen&&r.enable(20),t.sheenColorMap&&r.enable(21),t.sheenRoughnessMap&&r.enable(22),t.decodeVideoTexture&&r.enable(23),t.opaque&&r.enable(24),e.push(r.mask)}function O(e){const n=m[e.type];let t;if(n){const e=Z[n];t=uu.clone(e.uniforms)}else t=e.uniforms;return t}function x(t,n){let s;for(let e=0,o=c.length;e<o;e++){const t=c[e];if(t.cacheKey===n){s=t,++s.usedTimes;break}}return s===void 0&&(s=new L4(e,n,t,i),c.push(s)),s}function C(e){if(--e.usedTimes===0){const t=c.indexOf(e);c[t]=c[c.length-1],c.pop(),e.destroy()}}function E(e){l.remove(e)}function k(){l.dispose()}return{getParameters:j,getProgramCacheKey:y,getUniforms:O,acquireProgram:x,releaseProgram:C,releaseShaderCache:E,programs:c,dispose:k}}function b4(){let e=new WeakMap;function t(t){let n=e.get(t);return n===void 0&&(n={},e.set(t,n)),n}function n(t){e.delete(t)}function s(t,n,s){e.get(t)[n]=s}function o(){e=new WeakMap}return{get:t,remove:n,update:s,dispose:o}}function f4(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.material.id!==t.material.id?e.material.id-t.material.id:e.z!==t.z?e.z-t.z:e.id-t.id}function Ud(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function Kd(){const o=[];let s=0;const e=[],t=[],n=[];function a(){s=0,e.length=0,t.length=0,n.length=0}function i(e,t,n,i,a,r){let c=o[s];return c===void 0?(c={id:e.id,object:e,geometry:t,material:n,groupOrder:i,renderOrder:e.renderOrder,z:a,group:r},o[s]=c):(c.id=e.id,c.object=e,c.geometry=t,c.material=n,c.groupOrder=i,c.renderOrder=e.renderOrder,c.z=a,c.group=r),s++,c}function r(s,o,a,r,c,l){const d=i(s,o,a,r,c,l);a.transmission>0?t.push(d):a.transparent===!0?n.push(d):e.push(d)}function c(s,o,a,r,c,l){const d=i(s,o,a,r,c,l);a.transmission>0?t.unshift(d):a.transparent===!0?n.unshift(d):e.unshift(d)}function l(s,o){e.length>1&&e.sort(s||f4),t.length>1&&t.sort(o||Ud),n.length>1&&n.sort(o||Ud)}function d(){for(let t=s,n=o.length;t<n;t++){const e=o[t];if(e.id===null)break;e.id=null,e.object=null,e.geometry=null,e.material=null,e.group=null}}return{opaque:e,transmissive:t,transparent:n,init:a,push:r,unshift:c,finish:d,sort:l}}function i4(){let e=new WeakMap;function t(t,n){let s;return e.has(t)===!1?(s=new Kd,e.set(t,[s])):n>=e.get(t).length?(s=new Kd,e.get(t).push(s)):s=e.get(t)[n],s}function n(){e=new WeakMap}return{get:t,dispose:n}}function o4(){const e={};return{get:function(n){if(e[n.id]!==void 0)return e[n.id];let s;switch(n.type){case"DirectionalLight":s={direction:new t,color:new o};break;case"SpotLight":s={position:new t,direction:new t,color:new o,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":s={position:new t,color:new o,distance:0,decay:0};break;case"HemisphereLight":s={direction:new t,skyColor:new o,groundColor:new o};break;case"RectAreaLight":s={color:new o,position:new t,halfWidth:new t,halfHeight:new t};break}return e[n.id]=s,s}}}function s4(){const e={};return{get:function(t){if(e[t.id]!==void 0)return e[t.id];let s;switch(t.type){case"DirectionalLight":s={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new n};break;case"SpotLight":s={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new n};break;case"PointLight":s={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new n,shadowCameraNear:1,shadowCameraFar:1e3};break}return e[t.id]=s,s}}}let n4=0;function J1(e,t){return(t.castShadow?1:0)-(e.castShadow?1:0)}function Q1(e,n){const i=new o4,l=s4(),o={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let e=0;e<9;e++)o.probe.push(new t);const r=new t,d=new a,c=new a;function u(t,a){let b=0,y=0,j=0;for(let e=0;e<9;e++)o.probe[e].set(0,0,0);let u=0,h=0,c=0,m=0,v=0,f=0,p=0,g=0;t.sort(J1);const d=a!==!0?Math.PI:1;for(let a=0,_=t.length;a<_;a++){const e=t[a],s=e.color,n=e.intensity,w=e.distance,r=e.shadow&&e.shadow.map?e.shadow.map.texture:null;if(e.isAmbientLight)b+=s.r*n*d,y+=s.g*n*d,j+=s.b*n*d;else if(e.isLightProbe)for(let t=0;t<9;t++)o.probe[t].addScaledVector(e.sh.coefficients[t],n);else if(e.isDirectionalLight){const t=i.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity*d),e.castShadow){const n=e.shadow,t=l.get(e);t.shadowBias=n.bias,t.shadowNormalBias=n.normalBias,t.shadowRadius=n.radius,t.shadowMapSize=n.mapSize,o.directionalShadow[u]=t,o.directionalShadowMap[u]=r,o.directionalShadowMatrix[u]=e.shadow.matrix,f++}o.directional[u]=t,u++}else if(e.isSpotLight){const t=i.get(e);if(t.position.setFromMatrixPosition(e.matrixWorld),t.color.copy(s).multiplyScalar(n*d),t.distance=w,t.coneCos=Math.cos(e.angle),t.penumbraCos=Math.cos(e.angle*(1-e.penumbra)),t.decay=e.decay,e.castShadow){const n=e.shadow,t=l.get(e);t.shadowBias=n.bias,t.shadowNormalBias=n.normalBias,t.shadowRadius=n.radius,t.shadowMapSize=n.mapSize,o.spotShadow[c]=t,o.spotShadowMap[c]=r,o.spotShadowMatrix[c]=e.shadow.matrix,g++}o.spot[c]=t,c++}else if(e.isRectAreaLight){const t=i.get(e);t.color.copy(s).multiplyScalar(n),t.halfWidth.set(e.width*.5,0,0),t.halfHeight.set(0,e.height*.5,0),o.rectArea[m]=t,m++}else if(e.isPointLight){const t=i.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity*d),t.distance=e.distance,t.decay=e.decay,e.castShadow){const n=e.shadow,t=l.get(e);t.shadowBias=n.bias,t.shadowNormalBias=n.normalBias,t.shadowRadius=n.radius,t.shadowMapSize=n.mapSize,t.shadowCameraNear=n.camera.near,t.shadowCameraFar=n.camera.far,o.pointShadow[h]=t,o.pointShadowMap[h]=r,o.pointShadowMatrix[h]=e.shadow.matrix,p++}o.point[h]=t,h++}else if(e.isHemisphereLight){const t=i.get(e);t.skyColor.copy(e.color).multiplyScalar(n*d),t.groundColor.copy(e.groundColor).multiplyScalar(n*d),o.hemi[v]=t,v++}}m>0&&(n.isWebGL2?(o.rectAreaLTC1=s.LTC_FLOAT_1,o.rectAreaLTC2=s.LTC_FLOAT_2):e.has("OES_texture_float_linear")===!0?(o.rectAreaLTC1=s.LTC_FLOAT_1,o.rectAreaLTC2=s.LTC_FLOAT_2):e.has("OES_texture_half_float_linear")===!0?(o.rectAreaLTC1=s.LTC_HALF_1,o.rectAreaLTC2=s.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),o.ambient[0]=b,o.ambient[1]=y,o.ambient[2]=j;const r=o.hash;(r.directionalLength!==u||r.pointLength!==h||r.spotLength!==c||r.rectAreaLength!==m||r.hemiLength!==v||r.numDirectionalShadows!==f||r.numPointShadows!==p||r.numSpotShadows!==g)&&(o.directional.length=u,o.spot.length=c,o.rectArea.length=m,o.point.length=h,o.hemi.length=v,o.directionalShadow.length=f,o.directionalShadowMap.length=f,o.pointShadow.length=p,o.pointShadowMap.length=p,o.spotShadow.length=g,o.spotShadowMap.length=g,o.directionalShadowMatrix.length=f,o.pointShadowMatrix.length=p,o.spotShadowMatrix.length=g,r.directionalLength=u,r.pointLength=h,r.spotLength=c,r.rectAreaLength=m,r.hemiLength=v,r.numDirectionalShadows=f,r.numPointShadows=p,r.numSpotShadows=g,o.version=n4++)}function h(e,t){let s=0,i=0,a=0,l=0,u=0;const n=t.matrixWorldInverse;for(let h=0,m=e.length;h<m;h++){const t=e[h];if(t.isDirectionalLight){const e=o.directional[s];e.direction.setFromMatrixPosition(t.matrixWorld),r.setFromMatrixPosition(t.target.matrixWorld),e.direction.sub(r),e.direction.transformDirection(n),s++}else if(t.isSpotLight){const e=o.spot[a];e.position.setFromMatrixPosition(t.matrixWorld),e.position.applyMatrix4(n),e.direction.setFromMatrixPosition(t.matrixWorld),r.setFromMatrixPosition(t.target.matrixWorld),e.direction.sub(r),e.direction.transformDirection(n),a++}else if(t.isRectAreaLight){const e=o.rectArea[l];e.position.setFromMatrixPosition(t.matrixWorld),e.position.applyMatrix4(n),c.identity(),d.copy(t.matrixWorld),d.premultiply(n),c.extractRotation(d),e.halfWidth.set(t.width*.5,0,0),e.halfHeight.set(0,t.height*.5,0),e.halfWidth.applyMatrix4(c),e.halfHeight.applyMatrix4(c),l++}else if(t.isPointLight){const e=o.point[i];e.position.setFromMatrixPosition(t.matrixWorld),e.position.applyMatrix4(n),i++}else if(t.isHemisphereLight){const e=o.hemi[u];e.direction.setFromMatrixPosition(t.matrixWorld),e.direction.transformDirection(n),e.direction.normalize(),u++}}}return{setup:u,setupView:h,state:o}}function Jd(e,t){const s=new Q1(e,t),n=[],o=[];function i(){n.length=0,o.length=0}function a(e){n.push(e)}function r(e){o.push(e)}function c(e){s.setup(n,e)}function l(e){s.setupView(n,e)}const d={lightsArray:n,shadowsArray:o,lights:s};return{init:i,state:d,setupLights:c,setupLightsView:l,pushLight:a,pushShadow:r}}function X1(e,t){let n=new WeakMap;function s(s,o=0){let i;return n.has(s)===!1?(i=new Jd(e,t),n.set(s,[i])):o>=n.get(s).length?(i=new Jd(e,t),n.get(s).push(i)):i=n.get(s)[o],i}function o(){n=new WeakMap}return{get:s,dispose:o}}class fs extends y{constructor(e){super(),this.type="MeshDepthMaterial",this.depthPacking=Ua,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.setValues(e)}copy(e){return super.copy(e),this.depthPacking=e.depthPacking,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this}}fs.prototype.isMeshDepthMaterial=!0;class gs extends y{constructor(e){super(),this.type="MeshDistanceMaterial",this.referencePosition=new t,this.nearDistance=1,this.farDistance=1e3,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.setValues(e)}copy(e){return super.copy(e),this.referencePosition.copy(e.referencePosition),this.nearDistance=e.nearDistance,this.farDistance=e.farDistance,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this}}gs.prototype.isMeshDistanceMaterial=!0;const q1=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,V1=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function iu(e,t,s){let j=new Jn;const o=new n,i=new n,f=new h,y=new fs({depthPacking:y1}),C=new gs,g={},l=s.maxTextureSize,w={0:U,1:pt,2:gt},a=new G({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new n},radius:{value:4}},vertexShader:q1,fragmentShader:V1}),c=a.clone();c.defines.HORIZONTAL_PASS=1;const b=new r;b.setAttribute("position",new d(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const m=new x(b,a),u=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=na,this.render=function(t,n,s){if(u.enabled===!1)return;if(u.autoUpdate===!1&&u.needsUpdate===!1)return;if(t.length===0)return;const r=e.getRenderTarget(),c=e.getActiveCubeFace(),d=e.getActiveMipmapLevel(),a=e.state;a.setBlending(fe),a.buffers.color.setClear(1,1,1,1),a.buffers.depth.setTest(!0),a.setScissorTest(!1);for(let u=0,h=t.length;u<h;u++){const c=t[u],r=c.shadow;if(r===void 0){console.warn("THREE.WebGLShadowMap:",c,"has no shadow.");continue}if(r.autoUpdate===!1&&r.needsUpdate===!1)continue;o.copy(r.mapSize);const d=r.getFrameExtents();if(o.multiply(d),i.copy(r.mapSize),(o.x>l||o.y>l)&&(o.x>l&&(i.x=Math.floor(l/d.x),o.x=i.x*d.x,r.mapSize.x=i.x),o.y>l&&(i.y=Math.floor(l/d.y),o.y=i.y*d.y,r.mapSize.y=i.y)),r.map===null&&!r.isPointLightShadow&&this.type===Dt&&(r.map=new I(o.x,o.y),r.map.texture.name=c.name+".shadowMap",r.mapPass=new I(o.x,o.y),r.camera.updateProjectionMatrix()),r.map===null){const e={minFilter:O,magFilter:O,format:q};r.map=new I(o.x,o.y,e),r.map.texture.name=c.name+".shadowMap",r.camera.updateProjectionMatrix()}e.setRenderTarget(r.map),e.clear();const m=r.getViewportCount();for(let e=0;e<m;e++){const t=r.getViewport(e);f.set(i.x*t.x,i.y*t.y,i.x*t.z,i.y*t.w),a.viewport(f),r.updateMatrices(c,e),j=r.getFrustum(),v(n,s,r.camera,c,this.type)}!r.isPointLightShadow&&this.type===Dt&&_(r,s),r.needsUpdate=!1}u.needsUpdate=!1,e.setRenderTarget(r,c,d)};function _(n,s){const o=t.update(m);a.defines.VSM_SAMPLES!==n.blurSamples&&(a.defines.VSM_SAMPLES=n.blurSamples,c.defines.VSM_SAMPLES=n.blurSamples,a.needsUpdate=!0,c.needsUpdate=!0),a.uniforms.shadow_pass.value=n.map.texture,a.uniforms.resolution.value=n.mapSize,a.uniforms.radius.value=n.radius,e.setRenderTarget(n.mapPass),e.clear(),e.renderBufferDirect(s,null,o,a,m,null),c.uniforms.shadow_pass.value=n.mapPass.texture,c.uniforms.resolution.value=n.mapSize,c.uniforms.radius.value=n.radius,e.setRenderTarget(n.map),e.clear(),e.renderBufferDirect(s,null,o,c,m,null)}function p(t,n,s,o,i,a){let r=null;const c=s.isPointLight===!0?t.customDistanceMaterial:t.customDepthMaterial;if(c!==void 0?r=c:r=s.isPointLight===!0?C:y,e.localClippingEnabled&&n.clipShadows===!0&&n.clippingPlanes.length!==0||n.displacementMap&&n.displacementScale!==0||n.alphaMap&&n.alphaTest>0){const s=r.uuid,o=n.uuid;let e=g[s];e===void 0&&(e={},g[s]=e);let t=e[o];t===void 0&&(t=r.clone(),e[o]=t),r=t}return r.visible=n.visible,r.wireframe=n.wireframe,a===Dt?r.side=n.shadowSide!==null?n.shadowSide:n.side:r.side=n.shadowSide!==null?n.shadowSide:w[n.side],r.alphaMap=n.alphaMap,r.alphaTest=n.alphaTest,r.clipShadows=n.clipShadows,r.clippingPlanes=n.clippingPlanes,r.clipIntersection=n.clipIntersection,r.displacementMap=n.displacementMap,r.displacementScale=n.displacementScale,r.displacementBias=n.displacementBias,r.wireframeLinewidth=n.wireframeLinewidth,r.linewidth=n.linewidth,s.isPointLight===!0&&r.isMeshDistanceMaterial===!0&&(r.referencePosition.setFromMatrixPosition(s.matrixWorld),r.nearDistance=o,r.farDistance=i),r}function v(n,s,o,i,a){if(n.visible===!1)return;const c=n.layers.test(s.layers);if(c&&(n.isMesh||n.isLine||n.isPoints)&&(n.castShadow||n.receiveShadow&&a===Dt)&&(!n.frustumCulled||j.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(o.matrixWorldInverse,n.matrixWorld);const r=t.update(n),s=n.material;if(Array.isArray(s)){{const t=r.groups;for(let c=0,u=t.length;c<u;c++){const d=t[c],l=s[d.materialIndex];if(l&&l.visible){const t=p(n,l,i,o.near,o.far,a);e.renderBufferDirect(o,null,r,t,n,d)}}}}else if(s.visible){const t=p(n,s,i,o.near,o.far,a);e.renderBufferDirect(o,null,r,t,n,null)}}const r=n.children;for(let e=0,t=r.length;e<t;e++)v(r[e],s,o,i,a)}}function P1(e,t,n){const R=n.isWebGL2;function J(){let t=!1;const n=new h;let s=null;const o=new h(0,0,0,0);return{setMask:function(n){s!==n&&!t&&(e.colorMask(n,n,n,n),s=n)},setLocked:function(e){t=e},setClear:function(t,s,i,a,r){r===!0&&(t*=a,s*=a,i*=a),n.set(t,s,i,a),o.equals(n)===!1&&(e.clearColor(t,s,i,a),o.copy(n))},reset:function(){t=!1,s=null,o.set(-1,0,0,0)}}}function Z(){let t=!1,n=null,i=null,a=null;return{setTest:function(t){t?s(e.DEPTH_TEST):o(e.DEPTH_TEST)},setMask:function(s){n!==s&&!t&&(e.depthMask(s),n=s)},setFunc:function(t){if(i!==t){if(t)switch(t){case od:e.depthFunc(e.NEVER);break;case ld:e.depthFunc(e.ALWAYS);break;case hd:e.depthFunc(e.LESS);break;case zo:e.depthFunc(e.LEQUAL);break;case md:e.depthFunc(e.EQUAL);break;case fd:e.depthFunc(e.GEQUAL);break;case gd:e.depthFunc(e.GREATER);break;case vd:e.depthFunc(e.NOTEQUAL);break;default:e.depthFunc(e.LEQUAL)}else e.depthFunc(e.LEQUAL);i=t}},setLocked:function(e){t=e},setClear:function(t){a!==t&&(e.clearDepth(t),a=t)},reset:function(){t=!1,n=null,i=null,a=null}}}function X(){let t=!1,n=null,i=null,a=null,r=null,c=null,l=null,d=null,u=null;return{setTest:function(n){t||(n?s(e.STENCIL_TEST):o(e.STENCIL_TEST))},setMask:function(s){n!==s&&!t&&(e.stencilMask(s),n=s)},setFunc:function(t,n,s){(i!==t||a!==n||r!==s)&&(e.stencilFunc(t,n,s),i=t,a=n,r=s)},setOp:function(t,n,s){(c!==t||l!==n||d!==s)&&(e.stencilOp(t,n,s),c=t,l=n,d=s)},setLocked:function(e){t=e},setClear:function(t){u!==t&&(e.clearStencil(t),u=t)},reset:function(){t=!1,n=null,i=null,a=null,r=null,c=null,l=null,d=null,u=null}}}const b=new J,a=new Z,r=new X;let u={},m={},k=new WeakMap,B=[],D=null,f=!1,v=null,d=null,j=null,y=null,l=null,w=null,O=null,x=!1,z=null,T=null,M=null,A=null,S=null;const Y=e.getParameter(e.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let F=!1,E=0;const C=e.getParameter(e.VERSION);C.indexOf("WebGL")!==-1?(E=parseFloat(/^WebGL (\d)/.exec(C)[1]),F=E>=1):C.indexOf("OpenGL ES")!==-1&&(E=parseFloat(/^OpenGL ES (\d)/.exec(C)[1]),F=E>=2);let i=null,g={};const ne=e.getParameter(e.SCISSOR_BOX),se=e.getParameter(e.VIEWPORT),P=(new h).fromArray(ne),H=(new h).fromArray(se);function $(t,n,s){const i=new Uint8Array(4),o=e.createTexture();e.bindTexture(t,o),e.texParameteri(t,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(t,e.TEXTURE_MAG_FILTER,e.NEAREST);for(let t=0;t<s;t++)e.texImage2D(n+t,0,e.RGBA,1,1,0,e.RGBA,e.UNSIGNED_BYTE,i);return o}const N={};N[e.TEXTURE_2D]=$(e.TEXTURE_2D,e.TEXTURE_2D,1),N[e.TEXTURE_CUBE_MAP]=$(e.TEXTURE_CUBE_MAP,e.TEXTURE_CUBE_MAP_POSITIVE_X,6),b.setClear(0,0,0,1),a.setClear(1),r.setClear(0),s(e.DEPTH_TEST),a.setFunc(zo),L(!1),I(pa),s(e.CULL_FACE),_(fe);function s(t){u[t]!==!0&&(e.enable(t),u[t]=!0)}function o(t){u[t]!==!1&&(e.disable(t),u[t]=!1)}function te(t,n){return m[t]!==n&&(e.bindFramebuffer(t,n),m[t]=n,R&&(t===e.DRAW_FRAMEBUFFER&&(m[e.FRAMEBUFFER]=n),t===e.FRAMEBUFFER&&(m[e.DRAW_FRAMEBUFFER]=n)),!0)}function G(s,o){let i=B,a=!1;if(s)if(i=k.get(o),i===void 0&&(i=[],k.set(o,i)),s.isWebGLMultipleRenderTargets){{const t=s.texture;if(i.length!==t.length||i[0]!==e.COLOR_ATTACHMENT0){for(let n=0,s=t.length;n<s;n++)i[n]=e.COLOR_ATTACHMENT0+n;i.length=t.length,a=!0}}}else i[0]!==e.COLOR_ATTACHMENT0&&(i[0]=e.COLOR_ATTACHMENT0,a=!0);else i[0]!==e.BACK&&(i[0]=e.BACK,a=!0);a&&(n.isWebGL2?e.drawBuffers(i):t.get("WEBGL_draw_buffers").drawBuffersWEBGL(i))}function ie(t){return D!==t&&(e.useProgram(t),D=t,!0)}const c={[ht]:e.FUNC_ADD,[Fl]:e.FUNC_SUBTRACT,[Ll]:e.FUNC_REVERSE_SUBTRACT};if(R)c[fi]=e.MIN,c[ai]=e.MAX;else{const e=t.get("EXT_blend_minmax");e!==null&&(c[fi]=e.MIN_EXT,c[ai]=e.MAX_EXT)}const p={[Pl]:e.ZERO,[Il]:e.ONE,[Bl]:e.SRC_COLOR,[oi]:e.SRC_ALPHA,[Jl]:e.SRC_ALPHA_SATURATE,[Gl]:e.DST_COLOR,[Kl]:e.DST_ALPHA,[Vl]:e.ONE_MINUS_SRC_COLOR,[si]:e.ONE_MINUS_SRC_ALPHA,[Zl]:e.ONE_MINUS_DST_COLOR,[Yl]:e.ONE_MINUS_DST_ALPHA};function _(t,n,i,a,r,u,h,m){if(t===fe){f===!0&&(o(e.BLEND),f=!1);return}if(f===!1&&(s(e.BLEND),f=!0),t!==Ol){if(t!==v||m!==x){if((d!==ht||l!==ht)&&(e.blendEquation(e.FUNC_ADD),d=ht,l=ht),m)switch(t){case xt:e.blendFuncSeparate(e.ONE,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA);break;case Ki:e.blendFunc(e.ONE,e.ONE);break;case Wi:e.blendFuncSeparate(e.ZERO,e.ONE_MINUS_SRC_COLOR,e.ZERO,e.ONE);break;case Ti:e.blendFuncSeparate(e.ZERO,e.SRC_COLOR,e.ZERO,e.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",t);break}else switch(t){case xt:e.blendFuncSeparate(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA);break;case Ki:e.blendFunc(e.SRC_ALPHA,e.ONE);break;case Wi:e.blendFuncSeparate(e.ZERO,e.ONE_MINUS_SRC_COLOR,e.ZERO,e.ONE);break;case Ti:e.blendFunc(e.ZERO,e.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",t);break}j=null,y=null,w=null,O=null,v=t,x=m}return}r=r||n,u=u||i,h=h||a,(n!==d||r!==l)&&(e.blendEquationSeparate(c[n],c[r]),d=n,l=r),(i!==j||a!==y||u!==w||h!==O)&&(e.blendFuncSeparate(p[i],p[a],p[u],p[h]),j=i,y=a,w=u,O=h),v=t,x=null}function Q(t,n){t.side===gt?o(e.CULL_FACE):s(e.CULL_FACE);let i=t.side===U;n&&(i=!i),L(i),t.blending===xt&&t.transparent===!1?_(fe):_(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.premultipliedAlpha),a.setFunc(t.depthFunc),a.setTest(t.depthTest),a.setMask(t.depthWrite),b.setMask(t.colorWrite);const c=t.stencilWrite;r.setTest(c),c&&(r.setMask(t.stencilWriteMask),r.setFunc(t.stencilFunc,t.stencilRef,t.stencilFuncMask),r.setOp(t.stencilFail,t.stencilZFail,t.stencilZPass)),W(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits),t.alphaToCoverage===!0?s(e.SAMPLE_ALPHA_TO_COVERAGE):o(e.SAMPLE_ALPHA_TO_COVERAGE)}function L(t){z!==t&&(t?e.frontFace(e.CW):e.frontFace(e.CCW),z=t)}function I(t){t!==Ur?(s(e.CULL_FACE),t!==T&&(t===pa?e.cullFace(e.BACK):t===nc?e.cullFace(e.FRONT):e.cullFace(e.FRONT_AND_BACK))):o(e.CULL_FACE),T=t}function ee(t){t!==M&&(F&&e.lineWidth(t),M=t)}function W(t,n,i){t?(s(e.POLYGON_OFFSET_FILL),(A!==n||S!==i)&&(e.polygonOffset(n,i),A=n,S=i)):o(e.POLYGON_OFFSET_FILL)}function K(t){t?s(e.SCISSOR_TEST):o(e.SCISSOR_TEST)}function V(t){t===void 0&&(t=e.TEXTURE0+Y-1),i!==t&&(e.activeTexture(t),i=t)}function oe(t,n){i===null&&V();let s=g[i];s===void 0&&(s={type:void 0,texture:void 0},g[i]=s),(s.type!==t||s.texture!==n)&&(e.bindTexture(t,n||N[t]),s.type=t,s.texture=n)}function q(){const t=g[i];t!==void 0&&t.type!==void 0&&(e.bindTexture(t.type,null),t.type=void 0,t.texture=void 0)}function ae(){try{e.compressedTexImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function re(){try{e.texSubImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function ce(){try{e.texSubImage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function le(){try{e.compressedTexSubImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function de(){try{e.texStorage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function ue(){try{e.texStorage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function he(){try{e.texImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function me(){try{e.texImage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function pe(t){P.equals(t)===!1&&(e.scissor(t.x,t.y,t.z,t.w),P.copy(t))}function ge(t){H.equals(t)===!1&&(e.viewport(t.x,t.y,t.z,t.w),H.copy(t))}function ve(){e.disable(e.BLEND),e.disable(e.CULL_FACE),e.disable(e.DEPTH_TEST),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SCISSOR_TEST),e.disable(e.STENCIL_TEST),e.disable(e.SAMPLE_ALPHA_TO_COVERAGE),e.blendEquation(e.FUNC_ADD),e.blendFunc(e.ONE,e.ZERO),e.blendFuncSeparate(e.ONE,e.ZERO,e.ONE,e.ZERO),e.colorMask(!0,!0,!0,!0),e.clearColor(0,0,0,0),e.depthMask(!0),e.depthFunc(e.LESS),e.clearDepth(1),e.stencilMask(4294967295),e.stencilFunc(e.ALWAYS,0,4294967295),e.stencilOp(e.KEEP,e.KEEP,e.KEEP),e.clearStencil(0),e.cullFace(e.BACK),e.frontFace(e.CCW),e.polygonOffset(0,0),e.activeTexture(e.TEXTURE0),e.bindFramebuffer(e.FRAMEBUFFER,null),R===!0&&(e.bindFramebuffer(e.DRAW_FRAMEBUFFER,null),e.bindFramebuffer(e.READ_FRAMEBUFFER,null)),e.useProgram(null),e.lineWidth(1),e.scissor(0,0,e.canvas.width,e.canvas.height),e.viewport(0,0,e.canvas.width,e.canvas.height),u={},i=null,g={},m={},k=new WeakMap,B=[],D=null,f=!1,v=null,d=null,j=null,y=null,l=null,w=null,O=null,x=!1,z=null,T=null,M=null,A=null,S=null,P.set(0,0,e.canvas.width,e.canvas.height),H.set(0,0,e.canvas.width,e.canvas.height),b.reset(),a.reset(),r.reset()}return{buffers:{color:b,depth:a,stencil:r},enable:s,disable:o,bindFramebuffer:te,drawBuffers:G,useProgram:ie,setBlending:_,setMaterial:Q,setFlipSided:L,setCullFace:I,setLineWidth:ee,setPolygonOffset:W,setScissorTest:K,activeTexture:V,bindTexture:oe,unbindTexture:q,compressedTexImage2D:ae,texImage2D:he,texImage3D:me,texStorage2D:de,texStorage3D:ue,texSubImage2D:re,texSubImage3D:ce,compressedTexSubImage2D:le,scissor:pe,viewport:ge,reset:ve}}function z1(e,t,n,s,o,i,a){const r=o.isWebGL2,D=o.maxTextures,ie=o.maxCubemapSize,ee=o.maxTextureSize,$=o.maxSamples,h=t.has("WEBGL_multisampled_render_to_texture")?t.get("WEBGL_multisampled_render_to_texture"):null,Q=/OculusBrowser/g.test(navigator.userAgent),C=new WeakMap;let w;const v=new WeakMap;let L=!1;try{L=typeof OffscreenCanvas!="undefined"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function A(e,t){return L?new OffscreenCanvas(e,t):qn("canvas")}function B(e,t,n,s){let o=1;if((e.width>s||e.height>s)&&(o=s/Math.max(e.width,e.height)),o<1||t===!0){if(typeof HTMLImageElement!="undefined"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement!="undefined"&&e instanceof HTMLCanvasElement||typeof ImageBitmap!="undefined"&&e instanceof ImageBitmap){const r=t?Ss:Math.floor,s=r(o*e.width),i=r(o*e.height);w===void 0&&(w=A(s,i));const a=n?A(s,i):w;a.width=s,a.height=i;const c=a.getContext("2d");return c.drawImage(e,0,0,s,i),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+e.width+"x"+e.height+") to ("+s+"x"+i+")."),a}return"data"in e&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+e.width+"x"+e.height+")."),e}return e}function g(e){return ta(e.width)&&ta(e.height)}function W(e){return!r&&(e.wrapS!==R||e.wrapT!==R||e.minFilter!==O&&e.minFilter!==j)}function l(e,t){return e.generateMipmaps&&t&&e.minFilter!==O&&e.minFilter!==j}function u(t){e.generateMipmap(t)}function m(n,s,o,i,a=!1){if(r===!1)return s;if(n!==null){if(e[n]!==void 0)return e[n];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+n+"'")}let c=s;return s===e.RED&&(o===e.FLOAT&&(c=e.R32F),o===e.HALF_FLOAT&&(c=e.R16F),o===e.UNSIGNED_BYTE&&(c=e.R8)),s===e.RG&&(o===e.FLOAT&&(c=e.RG32F),o===e.HALF_FLOAT&&(c=e.RG16F),o===e.UNSIGNED_BYTE&&(c=e.RG8)),s===e.RGBA&&(o===e.FLOAT&&(c=e.RGBA32F),o===e.HALF_FLOAT&&(c=e.RGBA16F),o===e.UNSIGNED_BYTE&&(c=i===p&&a===!1?e.SRGB8_ALPHA8:e.RGBA8),o===e.UNSIGNED_SHORT_4_4_4_4&&(c=e.RGBA4),o===e.UNSIGNED_SHORT_5_5_5_1&&(c=e.RGB5_A1)),(c===e.R16F||c===e.R32F||c===e.RG16F||c===e.RG32F||c===e.RGBA16F||c===e.RGBA32F)&&t.get("EXT_color_buffer_float"),c}function N(e,t,n){return l(e,n)===!0||e.isFramebufferTexture&&e.minFilter!==O&&e.minFilter!==j?Math.log2(Math.max(t.width,t.height))+1:e.mipmaps!==void 0&&e.mipmaps.length>0?e.mipmaps.length:e.isCompressedTexture&&Array.isArray(e.image)?t.mipmaps.length:1}function P(t){return t===O||t===xo||t===yo?e.NEAREST:e.LINEAR}function M(e){const t=e.target;t.removeEventListener("dispose",M),le(t),t.isVideoTexture&&C.delete(t)}function F(e){const t=e.target;t.removeEventListener("dispose",F),ae(t)}function le(e){const n=s.get(e);if(n.__webglInit===void 0)return;const o=e.source,t=v.get(o);if(t){const s=t[n.__cacheKey];s.usedTimes--,s.usedTimes===0&&z(e),Object.keys(t).length===0&&v.delete(o)}s.remove(e)}function z(t){const n=s.get(t);e.deleteTexture(n.__webglTexture);const o=t.source,i=v.get(o);delete i[n.__cacheKey],a.memory.textures--}function ae(t){const o=t.texture,n=s.get(t),i=s.get(o);if(i.__webglTexture!==void 0&&(e.deleteTexture(i.__webglTexture),a.memory.textures--),t.depthTexture&&t.depthTexture.dispose(),t.isWebGLCubeRenderTarget)for(let t=0;t<6;t++)e.deleteFramebuffer(n.__webglFramebuffer[t]),n.__webglDepthbuffer&&e.deleteRenderbuffer(n.__webglDepthbuffer[t]);else e.deleteFramebuffer(n.__webglFramebuffer),n.__webglDepthbuffer&&e.deleteRenderbuffer(n.__webglDepthbuffer),n.__webglMultisampledFramebuffer&&e.deleteFramebuffer(n.__webglMultisampledFramebuffer),n.__webglColorRenderbuffer&&e.deleteRenderbuffer(n.__webglColorRenderbuffer),n.__webglDepthRenderbuffer&&e.deleteRenderbuffer(n.__webglDepthRenderbuffer);if(t.isWebGLMultipleRenderTargets)for(let t=0,i=o.length;t<i;t++){const n=s.get(o[t]);n.__webglTexture&&(e.deleteTexture(n.__webglTexture),a.memory.textures--),s.remove(o[t])}s.remove(o),s.remove(t)}let E=0;function G(){E=0}function V(){const e=E;return e>=D&&console.warn("THREE.WebGLTextures: Trying to use "+e+" texture units while this GPU supports only "+D),E+=1,e}function Y(e){const t=[];return t.push(e.wrapS),t.push(e.wrapT),t.push(e.magFilter),t.push(e.minFilter),t.push(e.anisotropy),t.push(e.internalFormat),t.push(e.format),t.push(e.type),t.push(e.generateMipmaps),t.push(e.premultiplyAlpha),t.push(e.flipY),t.push(e.unpackAlignment),t.push(e.encoding),t.join()}function I(t,o){const i=s.get(t);if(t.isVideoTexture&&re(t),t.isRenderTargetTexture===!1&&t.version>0&&i.__version!==t.version){const e=t.image;if(e===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(e.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{_(i,t,o);return}}n.activeTexture(e.TEXTURE0+o),n.bindTexture(e.TEXTURE_2D,i.__webglTexture)}function K(t,o){const i=s.get(t);if(t.version>0&&i.__version!==t.version){_(i,t,o);return}n.activeTexture(e.TEXTURE0+o),n.bindTexture(e.TEXTURE_2D_ARRAY,i.__webglTexture)}function U(t,o){const i=s.get(t);if(t.version>0&&i.__version!==t.version){_(i,t,o);return}n.activeTexture(e.TEXTURE0+o),n.bindTexture(e.TEXTURE_3D,i.__webglTexture)}function Z(t,o){const i=s.get(t);if(t.version>0&&i.__version!==t.version){X(i,t,o);return}n.activeTexture(e.TEXTURE0+o),n.bindTexture(e.TEXTURE_CUBE_MAP,i.__webglTexture)}const x={[Tn]:e.REPEAT,[R]:e.CLAMP_TO_EDGE,[Dn]:e.MIRRORED_REPEAT},S={[O]:e.NEAREST,[xo]:e.NEAREST_MIPMAP_NEAREST,[yo]:e.NEAREST_MIPMAP_LINEAR,[j]:e.LINEAR,[ni]:e.LINEAR_MIPMAP_NEAREST,[ct]:e.LINEAR_MIPMAP_LINEAR};function b(n,i,a){if(a?(e.texParameteri(n,e.TEXTURE_WRAP_S,x[i.wrapS]),e.texParameteri(n,e.TEXTURE_WRAP_T,x[i.wrapT]),(n===e.TEXTURE_3D||n===e.TEXTURE_2D_ARRAY)&&e.texParameteri(n,e.TEXTURE_WRAP_R,x[i.wrapR]),e.texParameteri(n,e.TEXTURE_MAG_FILTER,S[i.magFilter]),e.texParameteri(n,e.TEXTURE_MIN_FILTER,S[i.minFilter])):(e.texParameteri(n,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(n,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),(n===e.TEXTURE_3D||n===e.TEXTURE_2D_ARRAY)&&e.texParameteri(n,e.TEXTURE_WRAP_R,e.CLAMP_TO_EDGE),(i.wrapS!==R||i.wrapT!==R)&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),e.texParameteri(n,e.TEXTURE_MAG_FILTER,P(i.magFilter)),e.texParameteri(n,e.TEXTURE_MIN_FILTER,P(i.minFilter)),i.minFilter!==O&&i.minFilter!==j&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),t.has("EXT_texture_filter_anisotropic")===!0){const a=t.get("EXT_texture_filter_anisotropic");if(i.type===xe&&t.has("OES_texture_float_linear")===!1)return;if(r===!1&&i.type===vt&&t.has("OES_texture_half_float_linear")===!1)return;(i.anisotropy>1||s.get(i).__currentAnisotropy)&&(e.texParameterf(n,a.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(i.anisotropy,o.getMaxAnisotropy())),s.get(i).__currentAnisotropy=i.anisotropy)}}function H(t,n){let i=!1;t.__webglInit===void 0&&(t.__webglInit=!0,n.addEventListener("dispose",M));const r=n.source;let s=v.get(r);s===void 0&&(s={},v.set(r,s));const o=Y(n);if(o!==t.__cacheKey){s[o]===void 0&&(s[o]={texture:e.createTexture(),usedTimes:0},a.memory.textures++,i=!0),s[o].usedTimes++;const r=s[t.__cacheKey];r!==void 0&&(s[t.__cacheKey].usedTimes--,r.usedTimes===0&&z(n)),t.__cacheKey=o,t.__webglTexture=s[o].texture}return i}function _(t,s,o){let a=e.TEXTURE_2D;s.isDataArrayTexture&&(a=e.TEXTURE_2D_ARRAY),s.isData3DTexture&&(a=e.TEXTURE_3D);const d=H(t,s),c=s.source;if(n.activeTexture(e.TEXTURE0+o),n.bindTexture(a,t.__webglTexture),c.version!==c.__currentVersion||d===!0){e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,s.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,s.premultiplyAlpha),e.pixelStorei(e.UNPACK_ALIGNMENT,s.unpackAlignment),e.pixelStorei(e.UNPACK_COLORSPACE_CONVERSION_WEBGL,e.NONE);const O=W(s)&&g(s.image)===!1;let o=B(s.image,O,!1,ee);o=T(s,o);const w=g(o)||r,f=i.convert(s.format,s.encoding);let p=i.convert(s.type),d=m(s.internalFormat,f,p,s.encoding,s.isVideoTexture);b(a,s,w);let h;const v=s.mipmaps,j=r&&s.isVideoTexture!==!0,y=t.__version===void 0,_=N(s,o,w);if(s.isDepthTexture)d=e.DEPTH_COMPONENT,r?s.type===xe?d=e.DEPTH_COMPONENT32F:s.type===Bn?d=e.DEPTH_COMPONENT24:s.type===Et?d=e.DEPTH24_STENCIL8:d=e.DEPTH_COMPONENT16:s.type===xe&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),s.format===Re&&d===e.DEPTH_COMPONENT&&s.type!==Pt&&s.type!==Bn&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),s.type=Pt,p=i.convert(s.type)),s.format===ft&&d===e.DEPTH_COMPONENT&&(d=e.DEPTH_STENCIL,s.type!==Et&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),s.type=Et,p=i.convert(s.type))),j&&y?n.texStorage2D(e.TEXTURE_2D,1,d,o.width,o.height):n.texImage2D(e.TEXTURE_2D,0,d,o.width,o.height,0,f,p,null);else if(s.isDataTexture)if(v.length>0&&w){j&&y&&n.texStorage2D(e.TEXTURE_2D,_,d,v[0].width,v[0].height);for(let t=0,s=v.length;t<s;t++)h=v[t],j?n.texSubImage2D(e.TEXTURE_2D,t,0,0,h.width,h.height,f,p,h.data):n.texImage2D(e.TEXTURE_2D,t,d,h.width,h.height,0,f,p,h.data);s.generateMipmaps=!1}else j?(y&&n.texStorage2D(e.TEXTURE_2D,_,d,o.width,o.height),n.texSubImage2D(e.TEXTURE_2D,0,0,0,o.width,o.height,f,p,o.data)):n.texImage2D(e.TEXTURE_2D,0,d,o.width,o.height,0,f,p,o.data);else if(s.isCompressedTexture){j&&y&&n.texStorage2D(e.TEXTURE_2D,_,d,v[0].width,v[0].height);for(let t=0,o=v.length;t<o;t++)h=v[t],s.format!==q?f!==null?j?n.compressedTexSubImage2D(e.TEXTURE_2D,t,0,0,h.width,h.height,f,h.data):n.compressedTexImage2D(e.TEXTURE_2D,t,d,h.width,h.height,0,h.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):j?n.texSubImage2D(e.TEXTURE_2D,t,0,0,h.width,h.height,f,p,h.data):n.texImage2D(e.TEXTURE_2D,t,d,h.width,h.height,0,f,p,h.data)}else if(s.isDataArrayTexture)j?(y&&n.texStorage3D(e.TEXTURE_2D_ARRAY,_,d,o.width,o.height,o.depth),n.texSubImage3D(e.TEXTURE_2D_ARRAY,0,0,0,0,o.width,o.height,o.depth,f,p,o.data)):n.texImage3D(e.TEXTURE_2D_ARRAY,0,d,o.width,o.height,o.depth,0,f,p,o.data);else if(s.isData3DTexture)j?(y&&n.texStorage3D(e.TEXTURE_3D,_,d,o.width,o.height,o.depth),n.texSubImage3D(e.TEXTURE_3D,0,0,0,0,o.width,o.height,o.depth,f,p,o.data)):n.texImage3D(e.TEXTURE_3D,0,d,o.width,o.height,o.depth,0,f,p,o.data);else if(s.isFramebufferTexture)j&&y?n.texStorage2D(e.TEXTURE_2D,_,d,o.width,o.height):n.texImage2D(e.TEXTURE_2D,0,d,o.width,o.height,0,f,p,null);else if(v.length>0&&w){j&&y&&n.texStorage2D(e.TEXTURE_2D,_,d,v[0].width,v[0].height);for(let t=0,s=v.length;t<s;t++)h=v[t],j?n.texSubImage2D(e.TEXTURE_2D,t,0,0,f,p,h):n.texImage2D(e.TEXTURE_2D,t,d,f,p,h);s.generateMipmaps=!1}else j?(y&&n.texStorage2D(e.TEXTURE_2D,_,d,o.width,o.height),n.texSubImage2D(e.TEXTURE_2D,0,0,0,f,p,o)):n.texImage2D(e.TEXTURE_2D,0,d,f,p,o);l(s,w)&&u(a),c.__currentVersion=c.version,s.onUpdate&&s.onUpdate(s)}t.__version=s.version}function X(t,s,o){if(s.image.length!==6)return;const c=H(t,s),a=s.source;if(n.activeTexture(e.TEXTURE0+o),n.bindTexture(e.TEXTURE_CUBE_MAP,t.__webglTexture),a.version!==a.__currentVersion||c===!0){e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,s.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,s.premultiplyAlpha),e.pixelStorei(e.UNPACK_ALIGNMENT,s.unpackAlignment),e.pixelStorei(e.UNPACK_COLORSPACE_CONVERSION_WEBGL,e.NONE);const w=s.isCompressedTexture||s.image[0].isCompressedTexture,j=s.image[0]&&s.image[0].isDataTexture,o=[];for(let e=0;e<6;e++)!w&&!j?o[e]=B(s.image[e],!1,!0,ie):o[e]=j?s.image[e].image:s.image[e],o[e]=T(s,o[e]);const v=o[0],y=g(v)||r,c=i.convert(s.format,s.encoding),d=i.convert(s.type),f=m(s.internalFormat,c,d,s.encoding),p=r&&s.isVideoTexture!==!0,O=t.__version===void 0;let _=N(s,v,y);b(e.TEXTURE_CUBE_MAP,s,y);let h;if(w){p&&O&&n.texStorage2D(e.TEXTURE_CUBE_MAP,_,f,v.width,v.height);for(let t=0;t<6;t++){h=o[t].mipmaps;for(let i=0;i<h.length;i++){const o=h[i];s.format!==q?c!==null?p?n.compressedTexSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,i,0,0,o.width,o.height,c,o.data):n.compressedTexImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,i,f,o.width,o.height,0,o.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):p?n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,i,0,0,o.width,o.height,c,d,o.data):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,i,f,o.width,o.height,0,c,d,o.data)}}}else{h=s.mipmaps,p&&O&&(h.length>0&&_++,n.texStorage2D(e.TEXTURE_CUBE_MAP,_,f,o[0].width,o[0].height));for(let t=0;t<6;t++)if(j){p?n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,0,0,o[t].width,o[t].height,c,d,o[t].data):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,f,o[t].width,o[t].height,0,c,d,o[t].data);for(let o=0;o<h.length;o++){const i=h[o],s=i.image[t].image;p?n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,o+1,0,0,s.width,s.height,c,d,s.data):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,o+1,f,s.width,s.height,0,c,d,s.data)}}else{p?n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,0,0,c,d,o[t]):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,f,c,d,o[t]);for(let s=0;s<h.length;s++){const o=h[s];p?n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,s+1,0,0,c,d,o.image[t]):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,s+1,f,c,d,o.image[t])}}}l(s,y)&&u(e.TEXTURE_CUBE_MAP),a.__currentVersion=a.version,s.onUpdate&&s.onUpdate(s)}t.__version=s.version}function f(t,o,a,r,l){const u=i.convert(a.format,a.encoding),f=i.convert(a.type),p=m(a.internalFormat,u,f,a.encoding),g=s.get(o);g.__hasExternalTextures||(l===e.TEXTURE_3D||l===e.TEXTURE_2D_ARRAY?n.texImage3D(l,0,p,o.width,o.height,o.depth,0,u,f,null):n.texImage2D(l,0,p,o.width,o.height,0,u,f,null)),n.bindFramebuffer(e.FRAMEBUFFER,t),c(o)?h.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,r,l,s.get(a).__webglTexture,0,d(o)):e.framebufferTexture2D(e.FRAMEBUFFER,r,l,s.get(a).__webglTexture,0),n.bindFramebuffer(e.FRAMEBUFFER,null)}function y(t,n,s){if(e.bindRenderbuffer(e.RENDERBUFFER,t),n.depthBuffer&&!n.stencilBuffer){let o=e.DEPTH_COMPONENT16;if(s||c(n)){const t=n.depthTexture;t&&t.isDepthTexture&&(t.type===xe?o=e.DEPTH_COMPONENT32F:t.type===Bn&&(o=e.DEPTH_COMPONENT24));const s=d(n);c(n)?h.renderbufferStorageMultisampleEXT(e.RENDERBUFFER,s,o,n.width,n.height):e.renderbufferStorageMultisample(e.RENDERBUFFER,s,o,n.width,n.height)}else e.renderbufferStorage(e.RENDERBUFFER,o,n.width,n.height);e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.RENDERBUFFER,t)}else if(n.depthBuffer&&n.stencilBuffer){const o=d(n);s&&c(n)===!1?e.renderbufferStorageMultisample(e.RENDERBUFFER,o,e.DEPTH24_STENCIL8,n.width,n.height):c(n)?h.renderbufferStorageMultisampleEXT(e.RENDERBUFFER,o,e.DEPTH24_STENCIL8,n.width,n.height):e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_STENCIL,n.width,n.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.RENDERBUFFER,t)}else{const t=n.isWebGLMultipleRenderTargets===!0?n.texture[0]:n.texture,r=i.convert(t.format,t.encoding),l=i.convert(t.type),o=m(t.internalFormat,r,l,t.encoding),a=d(n);s&&c(n)===!1?e.renderbufferStorageMultisample(e.RENDERBUFFER,a,o,n.width,n.height):c(n)?h.renderbufferStorageMultisampleEXT(e.RENDERBUFFER,a,o,n.width,n.height):e.renderbufferStorage(e.RENDERBUFFER,o,n.width,n.height)}e.bindRenderbuffer(e.RENDERBUFFER,null)}function J(t,o){const r=o&&o.isWebGLCubeRenderTarget;if(r)throw new Error("Depth Texture with cube render targets is not supported");if(n.bindFramebuffer(e.FRAMEBUFFER,t),!o.depthTexture||!o.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");(!s.get(o.depthTexture).__webglTexture||o.depthTexture.image.width!==o.width||o.depthTexture.image.height!==o.height)&&(o.depthTexture.image.width=o.width,o.depthTexture.image.height=o.height,o.depthTexture.needsUpdate=!0),I(o.depthTexture,0);const i=s.get(o.depthTexture).__webglTexture,a=d(o);if(o.depthTexture.format===Re)c(o)?h.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,i,0,a):e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,i,0);else if(o.depthTexture.format===ft)c(o)?h.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.TEXTURE_2D,i,0,a):e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.TEXTURE_2D,i,0);else throw new Error("Unknown depthTexture format")}function k(t){const o=s.get(t),i=t.isWebGLCubeRenderTarget===!0;if(t.depthTexture&&!o.__autoAllocateDepthBuffer){if(i)throw new Error("target.depthTexture not supported in Cube render targets");J(o.__webglFramebuffer,t)}else if(i){o.__webglDepthbuffer=[];for(let s=0;s<6;s++)n.bindFramebuffer(e.FRAMEBUFFER,o.__webglFramebuffer[s]),o.__webglDepthbuffer[s]=e.createRenderbuffer(),y(o.__webglDepthbuffer[s],t,!1)}else n.bindFramebuffer(e.FRAMEBUFFER,o.__webglFramebuffer),o.__webglDepthbuffer=e.createRenderbuffer(),y(o.__webglDepthbuffer,t,!1);n.bindFramebuffer(e.FRAMEBUFFER,null)}function te(t,n,o){const i=s.get(t);n!==void 0&&f(i.__webglFramebuffer,t,t.texture,e.COLOR_ATTACHMENT0,e.TEXTURE_2D),o!==void 0&&k(t)}function ne(t){const h=t.texture,p=s.get(t),j=s.get(h);t.addEventListener("dispose",F),t.isWebGLMultipleRenderTargets!==!0&&(j.__webglTexture===void 0&&(j.__webglTexture=e.createTexture()),j.__version=h.version,a.memory.textures++);const _=t.isWebGLCubeRenderTarget===!0,w=t.isWebGLMultipleRenderTargets===!0,v=g(t)||r;if(_){p.__webglFramebuffer=[];for(let t=0;t<6;t++)p.__webglFramebuffer[t]=e.createFramebuffer()}else if(p.__webglFramebuffer=e.createFramebuffer(),w)if(o.drawBuffers){const n=t.texture;for(let t=0,i=n.length;t<i;t++){const o=s.get(n[t]);o.__webglTexture===void 0&&(o.__webglTexture=e.createTexture(),a.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");else if(r&&t.samples>0&&c(t)===!1){p.__webglMultisampledFramebuffer=e.createFramebuffer(),p.__webglColorRenderbuffer=e.createRenderbuffer(),e.bindRenderbuffer(e.RENDERBUFFER,p.__webglColorRenderbuffer);const s=i.convert(h.format,h.encoding),o=i.convert(h.type),a=m(h.internalFormat,s,o,h.encoding),r=d(t);e.renderbufferStorageMultisample(e.RENDERBUFFER,r,a,t.width,t.height),n.bindFramebuffer(e.FRAMEBUFFER,p.__webglMultisampledFramebuffer),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.RENDERBUFFER,p.__webglColorRenderbuffer),e.bindRenderbuffer(e.RENDERBUFFER,null),t.depthBuffer&&(p.__webglDepthRenderbuffer=e.createRenderbuffer(),y(p.__webglDepthRenderbuffer,t,!0)),n.bindFramebuffer(e.FRAMEBUFFER,null)}if(_){n.bindTexture(e.TEXTURE_CUBE_MAP,j.__webglTexture),b(e.TEXTURE_CUBE_MAP,h,v);for(let n=0;n<6;n++)f(p.__webglFramebuffer[n],t,h,e.COLOR_ATTACHMENT0,e.TEXTURE_CUBE_MAP_POSITIVE_X+n);l(h,v)&&u(e.TEXTURE_CUBE_MAP),n.unbindTexture()}else if(w){const o=t.texture;for(let i=0,r=o.length;i<r;i++){const a=o[i],c=s.get(a);n.bindTexture(e.TEXTURE_2D,c.__webglTexture),b(e.TEXTURE_2D,a,v),f(p.__webglFramebuffer,t,a,e.COLOR_ATTACHMENT0+i,e.TEXTURE_2D),l(a,v)&&u(e.TEXTURE_2D)}n.unbindTexture()}else{let s=e.TEXTURE_2D;(t.isWebGL3DRenderTarget||t.isWebGLArrayRenderTarget)&&(r?s=t.isWebGL3DRenderTarget?e.TEXTURE_3D:e.TEXTURE_2D_ARRAY:console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")),n.bindTexture(s,j.__webglTexture),b(s,h,v),f(p.__webglFramebuffer,t,h,e.COLOR_ATTACHMENT0,s),l(h,v)&&u(s),n.unbindTexture()}t.depthBuffer&&k(t)}function se(t){const i=g(t)||r,o=t.isWebGLMultipleRenderTargets===!0?t.texture:[t.texture];for(let a=0,c=o.length;a<c;a++){const r=o[a];if(l(r,i)){const o=t.isWebGLCubeRenderTarget?e.TEXTURE_CUBE_MAP:e.TEXTURE_2D,i=s.get(r).__webglTexture;n.bindTexture(o,i),u(o),n.unbindTexture()}}}function oe(t){if(r&&t.samples>0&&c(t)===!1){const r=t.width,c=t.height;let i=e.COLOR_BUFFER_BIT;const l=[e.COLOR_ATTACHMENT0],a=t.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT;t.depthBuffer&&l.push(a);const o=s.get(t),d=o.__ignoreDepthValues!==void 0&&o.__ignoreDepthValues;d===!1&&(t.depthBuffer&&(i|=e.DEPTH_BUFFER_BIT),t.stencilBuffer&&(i|=e.STENCIL_BUFFER_BIT)),n.bindFramebuffer(e.READ_FRAMEBUFFER,o.__webglMultisampledFramebuffer),n.bindFramebuffer(e.DRAW_FRAMEBUFFER,o.__webglFramebuffer),d===!0&&(e.invalidateFramebuffer(e.READ_FRAMEBUFFER,[a]),e.invalidateFramebuffer(e.DRAW_FRAMEBUFFER,[a])),e.blitFramebuffer(0,0,r,c,0,0,r,c,i,e.NEAREST),Q&&e.invalidateFramebuffer(e.READ_FRAMEBUFFER,l),n.bindFramebuffer(e.READ_FRAMEBUFFER,null),n.bindFramebuffer(e.DRAW_FRAMEBUFFER,o.__webglMultisampledFramebuffer)}}function d(e){return Math.min($,e.samples)}function c(e){const n=s.get(e);return r&&e.samples>0&&t.has("WEBGL_multisampled_render_to_texture")===!0&&n.__useRenderToTexture!==!1}function re(e){const t=a.render.frame;C.get(e)!==t&&(C.set(e,t),e.update())}function T(e,n){const s=e.encoding,o=e.format,i=e.type;return e.isCompressedTexture===!0||e.isVideoTexture===!0||e.format===mo?n:(s!==ce&&(s===p?r===!1?t.has("EXT_sRGB")===!0&&o===q?(e.format=mo,e.minFilter=j,e.generateMipmaps=!1):n=Ue.sRGBToLinear(n):(o!==q||i!==Fe)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture encoding:",s)),n)}this.allocateTextureUnit=V,this.resetTextureUnits=G,this.setTexture2D=I,this.setTexture2DArray=K,this.setTexture3D=U,this.setTextureCube=Z,this.rebindTextures=te,this.setupRenderTarget=ne,this.updateRenderTargetMipmap=se,this.updateMultisampleRenderTarget=oe,this.setupDepthRenderbuffer=k,this.setupFrameBufferTexture=f,this.useMultisampledRTT=c}function cu(e,t,n){const s=n.isWebGL2;function o(n,o=null){let i;if(n===Fe)return e.UNSIGNED_BYTE;if(n===eu)return e.UNSIGNED_SHORT_4_4_4_4;if(n===su)return e.UNSIGNED_SHORT_5_5_5_1;if(n===qd)return e.BYTE;if(n===Yd)return e.SHORT;if(n===Pt)return e.UNSIGNED_SHORT;if(n===Gd)return e.INT;if(n===Bn)return e.UNSIGNED_INT;if(n===xe)return e.FLOAT;if(n===vt)return s?e.HALF_FLOAT:(i=t.get("OES_texture_half_float"),i!==null?i.HALF_FLOAT_OES:null);if(n===ou)return e.ALPHA;if(n===q)return e.RGBA;if(n===gu)return e.LUMINANCE;if(n===v1)return e.LUMINANCE_ALPHA;if(n===Re)return e.DEPTH_COMPONENT;if(n===ft)return e.DEPTH_STENCIL;if(n===b1)return e.RED;if(n===pu)return console.warn("THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228"),e.RGBA;if(n===mo)return i=t.get("EXT_sRGB"),i!==null?i.SRGB_ALPHA_EXT:null;if(n===g1)return e.RED_INTEGER;if(n===m1)return e.RG;if(n===r1)return e.RG_INTEGER;if(n===i1)return e.RGBA_INTEGER;if(n===Hs||n===Ps||n===Ms||n===ks)if(o===p)if(i=t.get("WEBGL_compressed_texture_s3tc_srgb"),i!==null){{if(n===Hs)return i.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(n===Ps)return i.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(n===Ms)return i.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(n===ks)return i.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}}else return null;else if(i=t.get("WEBGL_compressed_texture_s3tc"),i!==null){{if(n===Hs)return i.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===Ps)return i.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===Ms)return i.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===ks)return i.COMPRESSED_RGBA_S3TC_DXT5_EXT}}else return null;if(n===ia||n===aa||n===ra||n===ca)if(i=t.get("WEBGL_compressed_texture_pvrtc"),i!==null){{if(n===ia)return i.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(n===aa)return i.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(n===ra)return i.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(n===ca)return i.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}}else return null;if(n===Eu)return i=t.get("WEBGL_compressed_texture_etc1"),i!==null?i.COMPRESSED_RGB_ETC1_WEBGL:null;if(n===da||n===ua)if(i=t.get("WEBGL_compressed_texture_etc"),i!==null){{if(n===da)return o===p?i.COMPRESSED_SRGB8_ETC2:i.COMPRESSED_RGB8_ETC2;if(n===ua)return o===p?i.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:i.COMPRESSED_RGBA8_ETC2_EAC}}else return null;if(n===ha||n===ga||n===ja||n===xa||n===Ca||n===Aa||n===Sa||n===Ma||n===Na||n===La||n===Ha||n===Ia||n===Ba||n===Va)if(i=t.get("WEBGL_compressed_texture_astc"),i!==null){{if(n===ha)return o===p?i.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:i.COMPRESSED_RGBA_ASTC_4x4_KHR;if(n===ga)return o===p?i.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:i.COMPRESSED_RGBA_ASTC_5x4_KHR;if(n===ja)return o===p?i.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:i.COMPRESSED_RGBA_ASTC_5x5_KHR;if(n===xa)return o===p?i.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:i.COMPRESSED_RGBA_ASTC_6x5_KHR;if(n===Ca)return o===p?i.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:i.COMPRESSED_RGBA_ASTC_6x6_KHR;if(n===Aa)return o===p?i.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:i.COMPRESSED_RGBA_ASTC_8x5_KHR;if(n===Sa)return o===p?i.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:i.COMPRESSED_RGBA_ASTC_8x6_KHR;if(n===Ma)return o===p?i.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:i.COMPRESSED_RGBA_ASTC_8x8_KHR;if(n===Na)return o===p?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:i.COMPRESSED_RGBA_ASTC_10x5_KHR;if(n===La)return o===p?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:i.COMPRESSED_RGBA_ASTC_10x6_KHR;if(n===Ha)return o===p?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:i.COMPRESSED_RGBA_ASTC_10x8_KHR;if(n===Ia)return o===p?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:i.COMPRESSED_RGBA_ASTC_10x10_KHR;if(n===Ba)return o===p?i.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:i.COMPRESSED_RGBA_ASTC_12x10_KHR;if(n===Va)return o===p?i.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:i.COMPRESSED_RGBA_ASTC_12x12_KHR}}else return null;if(n===$a)if(i=t.get("EXT_texture_compression_bptc"),i!==null){if(n===$a)return o===p?i.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:i.COMPRESSED_RGBA_BPTC_UNORM_EXT}else return null;if(n===Et)return s?e.UNSIGNED_INT_24_8:(i=t.get("WEBGL_depth_texture"),i!==null?i.UNSIGNED_INT_24_8_WEBGL:null)}return{convert:o}}class ya extends F{constructor(e=[]){super(),this.cameras=e}}ya.prototype.isArrayCamera=!0;class Ke extends l{constructor(){super(),this.type="Group"}}Ke.prototype.isGroup=!0;const T1={type:"move"};class ba{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new Ke,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new Ke,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new t,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new t),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new Ke,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new t,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new t),this._grip}dispatchEvent(e){return this._targetRay!==null&&this._targetRay.dispatchEvent(e),this._grip!==null&&this._grip.dispatchEvent(e),this._hand!==null&&this._hand.dispatchEvent(e),this}disconnect(e){return this.dispatchEvent({type:"disconnected",data:e}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(e,t,n){let a=null,r=null,c=null;const s=this._targetRay,o=this._grip,i=this._hand;if(e&&t.session.visibilityState!=="visible-blurred")if(s!==null&&(a=t.getPose(e.targetRaySpace,n),a!==null&&(s.matrix.fromArray(a.transform.matrix),s.matrix.decompose(s.position,s.rotation,s.scale),a.linearVelocity?(s.hasLinearVelocity=!0,s.linearVelocity.copy(a.linearVelocity)):s.hasLinearVelocity=!1,a.angularVelocity?(s.hasAngularVelocity=!0,s.angularVelocity.copy(a.angularVelocity)):s.hasAngularVelocity=!1,this.dispatchEvent(T1))),i&&e.hand){c=!0;for(const o of e.hand.values()){const a=t.getJointPose(o,n);if(i.joints[o.jointName]===void 0){const e=new Ke;e.matrixAutoUpdate=!1,e.visible=!1,i.joints[o.jointName]=e,i.add(e)}const s=i.joints[o.jointName];a!==null&&(s.matrix.fromArray(a.transform.matrix),s.matrix.decompose(s.position,s.rotation,s.scale),s.jointRadius=a.radius),s.visible=a!==null}const r=i.joints["index-finger-tip"],l=i.joints["thumb-tip"],s=r.position.distanceTo(l.position),o=.02,a=.005;i.inputState.pinching&&s>o+a?(i.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!i.inputState.pinching&&s<=o-a&&(i.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}))}else o!==null&&e.gripSpace&&(r=t.getPose(e.gripSpace,n),r!==null&&(o.matrix.fromArray(r.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),r.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(r.linearVelocity)):o.hasLinearVelocity=!1,r.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(r.angularVelocity)):o.hasAngularVelocity=!1));return s!==null&&(s.visible=a!==null),o!==null&&(o.visible=r!==null),i!==null&&(i.visible=c!==null),this}}class va extends A{constructor(e,t,n,s,o,i,a,r,c,l){if(l=l!==void 0?l:Re,l!==Re&&l!==ft)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");n===void 0&&l===Re&&(n=Pt),n===void 0&&l===ft&&(n=Et),super(null,s,o,i,a,r,l,n,c),this.image={width:e,height:t},this.magFilter=a!==void 0?a:O,this.minFilter=r!==void 0?r:O,this.flipY=!1,this.generateMipmaps=!1}}va.prototype.isDepthTexture=!0;class F1 extends Ee{constructor(e,n){super();const g=this;let o=null,y=1,j=null,A="local-floor",_=null,v=null,i=null,a=null,w=null;const r=n.getContextAttributes();let M=null,l=null;const c=[],d=new Map,u=new F;u.layers.enable(1),u.viewport=new h;const f=new F;f.layers.enable(2),f.viewport=new h;const L=[u,f],s=new ya;s.layers.enable(1),s.layers.enable(2);let x=null,C=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(e){let t=c[e];return t===void 0&&(t=new ba,c[e]=t),t.getTargetRaySpace()},this.getControllerGrip=function(e){let t=c[e];return t===void 0&&(t=new ba,c[e]=t),t.getGripSpace()},this.getHand=function(e){let t=c[e];return t===void 0&&(t=new ba,c[e]=t),t.getHandSpace()};function m(e){const t=d.get(e.inputSource);t&&t.dispatchEvent({type:e.type,data:e.inputSource})}function T(){d.forEach(function(e,t){e.disconnect(t)}),d.clear(),x=null,C=null,e.setRenderTarget(M),a=null,i=null,v=null,o=null,l=null,b.stop(),g.isPresenting=!1,g.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(e){y=e,g.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(e){A=e,g.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return j},this.getBaseLayer=function(){return i!==null?i:a},this.getBinding=function(){return v},this.getFrame=function(){return w},this.getSession=function(){return o},this.setSession=async function(t){if(o=t,o!==null){if(M=e.getRenderTarget(),o.addEventListener("select",m),o.addEventListener("selectstart",m),o.addEventListener("selectend",m),o.addEventListener("squeeze",m),o.addEventListener("squeezestart",m),o.addEventListener("squeezeend",m),o.addEventListener("end",T),o.addEventListener("inputsourceschange",z),r.xrCompatible!==!0&&await n.makeXRCompatible(),o.renderState.layers===void 0||e.capabilities.isWebGL2===!1){const t={antialias:o.renderState.layers!==void 0||r.antialias,alpha:r.alpha,depth:r.depth,stencil:r.stencil,framebufferScaleFactor:y};a=new XRWebGLLayer(o,n,t),o.updateRenderState({baseLayer:a}),l=new I(a.framebufferWidth,a.framebufferHeight,{format:q,type:Fe,encoding:e.outputEncoding})}else{let t=null,s=null,a=null;r.depth&&(a=r.stencil?n.DEPTH24_STENCIL8:n.DEPTH_COMPONENT24,t=r.stencil?ft:Re,s=r.stencil?Et:Pt);const c={colorFormat:e.outputEncoding===p?n.SRGB8_ALPHA8:n.RGBA8,depthFormat:a,scaleFactor:y};v=new XRWebGLBinding(o,n),i=v.createProjectionLayer(c),o.updateRenderState({layers:[i]}),l=new I(i.textureWidth,i.textureHeight,{format:q,type:Fe,depthTexture:new va(i.textureWidth,i.textureHeight,s,void 0,void 0,void 0,void 0,void 0,void 0,t),stencilBuffer:r.stencil,encoding:e.outputEncoding,samples:r.antialias?4:0});const d=e.properties.get(l);d.__ignoreDepthValues=i.ignoreDepthValues}l.isXRRenderTarget=!0,this.setFoveation(1),j=await o.requestReferenceSpace(A),b.setContext(o),b.start(),g.isPresenting=!0,g.dispatchEvent({type:"sessionstart"})}};function z(e){const t=o.inputSources;for(let e=0;e<c.length;e++)d.set(t[e],c[e]);for(let t=0;t<e.removed.length;t++){const n=e.removed[t],s=d.get(n);s&&(s.dispatchEvent({type:"disconnected",data:n}),d.delete(n))}for(let t=0;t<e.added.length;t++){const n=e.added[t],s=d.get(n);s&&s.dispatchEvent({type:"connected",data:n})}}const k=new t,E=new t;function D(e,t,n){k.setFromMatrixPosition(t.matrixWorld),E.setFromMatrixPosition(n.matrixWorld);const m=k.distanceTo(E),s=t.projectionMatrix.elements,u=n.projectionMatrix.elements,a=s[14]/(s[10]-1),r=s[14]/(s[10]+1),v=(s[9]+1)/s[5],g=(s[9]-1)/s[5],d=(s[8]-1)/s[0],h=(u[8]+1)/u[0],f=a*d,p=a*h,o=m/(-d+h),i=o*-d;t.matrixWorld.decompose(e.position,e.quaternion,e.scale),e.translateX(i),e.translateZ(o),e.matrixWorld.compose(e.position,e.quaternion,e.scale),e.matrixWorldInverse.copy(e.matrixWorld).invert();const l=a+o,c=r+o,b=f-i,j=p+(m-i),y=v*r/c*l,_=g*r/c*l;e.projectionMatrix.makePerspective(b,j,y,_,l,c)}function S(e,t){t===null?e.matrixWorld.copy(e.matrix):e.matrixWorld.multiplyMatrices(t.matrixWorld,e.matrix),e.matrixWorldInverse.copy(e.matrixWorld).invert()}this.updateCamera=function(e){if(o===null)return;s.near=f.near=u.near=e.near,s.far=f.far=u.far=e.far,(x!==s.near||C!==s.far)&&(o.updateRenderState({depthNear:s.near,depthFar:s.far}),x=s.near,C=s.far);const n=e.parent,t=s.cameras;S(s,n);for(let e=0;e<t.length;e++)S(t[e],n);s.matrixWorld.decompose(s.position,s.quaternion,s.scale),e.position.copy(s.position),e.quaternion.copy(s.quaternion),e.scale.copy(s.scale),e.matrix.copy(s.matrix),e.matrixWorld.copy(s.matrixWorld);const i=e.children;for(let e=0,t=i.length;e<t;e++)i[e].updateMatrixWorld(!0);t.length===2?D(s,u,f):s.projectionMatrix.copy(u.projectionMatrix)},this.getCamera=function(){return s},this.getFoveation=function(){return i!==null?i.fixedFoveation:a!==null?a.fixedFoveation:void 0},this.setFoveation=function(e){i!==null&&(i.fixedFoveation=e),a!==null&&a.fixedFoveation!==void 0&&(a.fixedFoveation=e)};let O=null;function N(t,n){if(_=n.getViewerPose(j),w=n,_!==null){const t=_.views;a!==null&&(e.setRenderTargetFramebuffer(l,a.framebuffer),e.setRenderTarget(l));let n=!1;t.length!==s.cameras.length&&(s.cameras.length=0,n=!0);for(let o=0;o<t.length;o++){const d=t[o];let r=null;if(a!==null)r=a.getViewport(d);else{const t=v.getViewSubImage(i,d);r=t.viewport,o===0&&(e.setRenderTargetTextures(l,t.colorTexture,i.ignoreDepthValues?void 0:t.depthStencilTexture),e.setRenderTarget(l))}const c=L[o];c.matrix.fromArray(d.transform.matrix),c.projectionMatrix.fromArray(d.projectionMatrix),c.viewport.set(r.x,r.y,r.width,r.height),o===0&&s.matrix.copy(c.matrix),n===!0&&s.cameras.push(c)}}const r=o.inputSources;for(let e=0;e<c.length;e++){const t=c[e],s=r[e];t.update(s,n,j)}O&&O(t,n),w=null}const b=new t1;b.setAnimationLoop(N),this.setAnimationLoop=function(e){O=e},this.dispose=function(){}}}function M1(e,t){function c(e,t){e.fogColor.value.copy(t.color),t.isFog?(e.fogNear.value=t.near,e.fogFar.value=t.far):t.isFogExp2&&(e.fogDensity.value=t.density)}function o(e,t,o,c,p){t.isMeshBasicMaterial?n(e,t):t.isMeshLambertMaterial?n(e,t):t.isMeshToonMaterial?(n(e,t),d(e,t)):t.isMeshPhongMaterial?(n(e,t),l(e,t)):t.isMeshStandardMaterial?(n(e,t),u(e,t),t.isMeshPhysicalMaterial&&h(e,t,p)):t.isMeshMatcapMaterial?(n(e,t),m(e,t)):t.isMeshDepthMaterial?n(e,t):t.isMeshDistanceMaterial?(n(e,t),f(e,t)):t.isMeshNormalMaterial?n(e,t):t.isLineBasicMaterial?(i(e,t),t.isLineDashedMaterial&&a(e,t)):t.isPointsMaterial?r(e,t,o,c):t.isSpriteMaterial?s(e,t):t.isShadowMaterial?(e.color.value.copy(t.color),e.opacity.value=t.opacity):t.isShaderMaterial&&(t.uniformsNeedUpdate=!1)}function n(n,s){n.opacity.value=s.opacity,s.color&&n.diffuse.value.copy(s.color),s.emissive&&n.emissive.value.copy(s.emissive).multiplyScalar(s.emissiveIntensity),s.map&&(n.map.value=s.map),s.alphaMap&&(n.alphaMap.value=s.alphaMap),s.bumpMap&&(n.bumpMap.value=s.bumpMap,n.bumpScale.value=s.bumpScale,s.side===U&&(n.bumpScale.value*=-1)),s.displacementMap&&(n.displacementMap.value=s.displacementMap,n.displacementScale.value=s.displacementScale,n.displacementBias.value=s.displacementBias),s.emissiveMap&&(n.emissiveMap.value=s.emissiveMap),s.normalMap&&(n.normalMap.value=s.normalMap,n.normalScale.value.copy(s.normalScale),s.side===U&&n.normalScale.value.negate()),s.specularMap&&(n.specularMap.value=s.specularMap),s.alphaTest>0&&(n.alphaTest.value=s.alphaTest);const a=t.get(s).envMap;if(a&&(n.envMap.value=a,n.flipEnvMap.value=a.isCubeTexture&&a.isRenderTargetTexture===!1?-1:1,n.reflectivity.value=s.reflectivity,n.ior.value=s.ior,n.refractionRatio.value=s.refractionRatio),s.lightMap){n.lightMap.value=s.lightMap;const t=e.physicallyCorrectLights!==!0?Math.PI:1;n.lightMapIntensity.value=s.lightMapIntensity*t}s.aoMap&&(n.aoMap.value=s.aoMap,n.aoMapIntensity.value=s.aoMapIntensity);let o;s.map?o=s.map:s.specularMap?o=s.specularMap:s.displacementMap?o=s.displacementMap:s.normalMap?o=s.normalMap:s.bumpMap?o=s.bumpMap:s.roughnessMap?o=s.roughnessMap:s.metalnessMap?o=s.metalnessMap:s.alphaMap?o=s.alphaMap:s.emissiveMap?o=s.emissiveMap:s.clearcoatMap?o=s.clearcoatMap:s.clearcoatNormalMap?o=s.clearcoatNormalMap:s.clearcoatRoughnessMap?o=s.clearcoatRoughnessMap:s.specularIntensityMap?o=s.specularIntensityMap:s.specularColorMap?o=s.specularColorMap:s.transmissionMap?o=s.transmissionMap:s.thicknessMap?o=s.thicknessMap:s.sheenColorMap?o=s.sheenColorMap:s.sheenRoughnessMap&&(o=s.sheenRoughnessMap),o!==void 0&&(o.isWebGLRenderTarget&&(o=o.texture),o.matrixAutoUpdate===!0&&o.updateMatrix(),n.uvTransform.value.copy(o.matrix));let i;s.aoMap?i=s.aoMap:s.lightMap&&(i=s.lightMap),i!==void 0&&(i.isWebGLRenderTarget&&(i=i.texture),i.matrixAutoUpdate===!0&&i.updateMatrix(),n.uv2Transform.value.copy(i.matrix))}function i(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity}function a(e,t){e.dashSize.value=t.dashSize,e.totalSize.value=t.dashSize+t.gapSize,e.scale.value=t.scale}function r(e,t,n,s){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,e.size.value=t.size*n,e.scale.value=s*.5,t.map&&(e.map.value=t.map),t.alphaMap&&(e.alphaMap.value=t.alphaMap),t.alphaTest>0&&(e.alphaTest.value=t.alphaTest);let o;t.map?o=t.map:t.alphaMap&&(o=t.alphaMap),o!==void 0&&(o.matrixAutoUpdate===!0&&o.updateMatrix(),e.uvTransform.value.copy(o.matrix))}function s(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,e.rotation.value=t.rotation,t.map&&(e.map.value=t.map),t.alphaMap&&(e.alphaMap.value=t.alphaMap),t.alphaTest>0&&(e.alphaTest.value=t.alphaTest);let n;t.map?n=t.map:t.alphaMap&&(n=t.alphaMap),n!==void 0&&(n.matrixAutoUpdate===!0&&n.updateMatrix(),e.uvTransform.value.copy(n.matrix))}function l(e,t){e.specular.value.copy(t.specular),e.shininess.value=Math.max(t.shininess,1e-4)}function d(e,t){t.gradientMap&&(e.gradientMap.value=t.gradientMap)}function u(e,n){e.roughness.value=n.roughness,e.metalness.value=n.metalness,n.roughnessMap&&(e.roughnessMap.value=n.roughnessMap),n.metalnessMap&&(e.metalnessMap.value=n.metalnessMap);const s=t.get(n).envMap;s&&(e.envMapIntensity.value=n.envMapIntensity)}function h(e,t,n){e.ior.value=t.ior,t.sheen>0&&(e.sheenColor.value.copy(t.sheenColor).multiplyScalar(t.sheen),e.sheenRoughness.value=t.sheenRoughness,t.sheenColorMap&&(e.sheenColorMap.value=t.sheenColorMap),t.sheenRoughnessMap&&(e.sheenRoughnessMap.value=t.sheenRoughnessMap)),t.clearcoat>0&&(e.clearcoat.value=t.clearcoat,e.clearcoatRoughness.value=t.clearcoatRoughness,t.clearcoatMap&&(e.clearcoatMap.value=t.clearcoatMap),t.clearcoatRoughnessMap&&(e.clearcoatRoughnessMap.value=t.clearcoatRoughnessMap),t.clearcoatNormalMap&&(e.clearcoatNormalScale.value.copy(t.clearcoatNormalScale),e.clearcoatNormalMap.value=t.clearcoatNormalMap,t.side===U&&e.clearcoatNormalScale.value.negate())),t.transmission>0&&(e.transmission.value=t.transmission,e.transmissionSamplerMap.value=n.texture,e.transmissionSamplerSize.value.set(n.width,n.height),t.transmissionMap&&(e.transmissionMap.value=t.transmissionMap),e.thickness.value=t.thickness,t.thicknessMap&&(e.thicknessMap.value=t.thicknessMap),e.attenuationDistance.value=t.attenuationDistance,e.attenuationColor.value.copy(t.attenuationColor)),e.specularIntensity.value=t.specularIntensity,e.specularColor.value.copy(t.specularColor),t.specularIntensityMap&&(e.specularIntensityMap.value=t.specularIntensityMap),t.specularColorMap&&(e.specularColorMap.value=t.specularColorMap)}function m(e,t){t.matcap&&(e.matcap.value=t.matcap)}function f(e,t){e.referencePosition.value.copy(t.referencePosition),e.nearDistance.value=t.nearDistance,e.farDistance.value=t.farDistance}return{refreshFogUniforms:c,refreshMaterialUniforms:o}}function S1(){const e=qn("canvas");return e.style.display="block",e}function m(e={}){const m=e.canvas!==void 0?e.canvas:S1(),Oe=e.context!==void 0?e.context:null,Re=e.depth===void 0||e.depth,ze=e.stencil===void 0||e.stencil,ge=e.antialias!==void 0&&e.antialias,pe=e.premultipliedAlpha===void 0||e.premultipliedAlpha,Ve=e.preserveDrawingBuffer!==void 0&&e.preserveDrawingBuffer,He=e.powerPreference!==void 0?e.powerPreference:"default",Be=e.failIfMajorPerformanceCaveat!==void 0&&e.failIfMajorPerformanceCaveat;let te;e.context!==void 0?te=Oe.getContextAttributes().alpha:te=e.alpha!==void 0&&e.alpha;let f=null,l=null;const F=[],C=[];this.domElement=m,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.outputEncoding=ce,this.physicallyCorrectLights=!1,this.toneMapping=le,this.toneMappingExposure=1;const o=this;let J=!1,oe=0,ee=0,p=null,V=-1,D=null;const z=new h,G=new h;let ue=null,S=m.width,x=m.height,v=1,ye=null,Se=null;const R=new h(0,0,S,x),L=new h(0,0,S,x);let de=!1;const Z=new Jn;let K=!1,re=!1,_=null;const Y=new a,P=new n,M=new t,ie={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function we(){return p===null?v:1}let s=Oe;function Me(e,t){for(let n=0;n<e.length;n++){const o=e[n],s=m.getContext(o,t);if(s!==null)return s}return null}try{const e={alpha:!0,depth:Re,stencil:ze,antialias:ge,premultipliedAlpha:pe,preserveDrawingBuffer:Ve,powerPreference:He,failIfMajorPerformanceCaveat:Be};if("setAttribute"in m&&m.setAttribute("data-engine",`three.js r${Oo}`),m.addEventListener("webglcontextlost",Ce,!1),m.addEventListener("webglcontextrestored",Ee,!1),s===null){const t=["webgl2","webgl","experimental-webgl"];if(o.isWebGL1Renderer===!0&&t.shift(),s=Me(t,e),s===null)throw Me(t)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}s.getShaderPrecisionFormat===void 0&&(s.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(e){throw console.error("THREE.WebGLRenderer: "+e.message),e}let d,c,i,b,r,u,T,B,H,ae,N,w,Q,W,$,O,j,E,ve,be,je,y,k;function he(){d=new z2(s),c=new q2(s,d,e),d.init(c),y=new cu(s,d,c),i=new P1(s,d,c),b=new M2(s),r=new b4,u=new z1(s,d,i,r,c,y,b),T=new H2(o),B=new L2(o),H=new E1(s,c),k=new X2(s,d,H,c),ae=new T2(s,H,b,k),N=new x2(s,ae,H,b),ve=new C2(s,c,u),O=new U2(r),w=new j4(o,T,B,d,c,k,O),Q=new M1(o,r),W=new i4,$=new X1(d,c),E=new c3(o,T,i,N,te,pe),j=new iu(o,N,c),be=new G2(s,d,b,c),je=new F2(s,d,b,c),b.programs=w.programs,o.capabilities=c,o.extensions=d,o.properties=r,o.renderLists=W,o.shadowMap=j,o.state=i,o.info=b}he();const g=new F1(o,s);this.xr=g,this.getContext=function(){return s},this.getContextAttributes=function(){return s.getContextAttributes()},this.forceContextLoss=function(){const e=d.get("WEBGL_lose_context");e&&e.loseContext()},this.forceContextRestore=function(){const e=d.get("WEBGL_lose_context");e&&e.restoreContext()},this.getPixelRatio=function(){return v},this.setPixelRatio=function(e){if(e===void 0)return;v=e,this.setSize(S,x,!1)},this.getSize=function(e){return e.set(S,x)},this.setSize=function(e,t,n){if(g.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}S=e,x=t,m.width=Math.floor(e*v),m.height=Math.floor(t*v),n!==!1&&(m.style.width=e+"px",m.style.height=t+"px"),this.setViewport(0,0,e,t)},this.getDrawingBufferSize=function(e){return e.set(S*v,x*v).floor()},this.setDrawingBufferSize=function(e,t,n){S=e,x=t,v=n,m.width=Math.floor(e*n),m.height=Math.floor(t*n),this.setViewport(0,0,e,t)},this.getCurrentViewport=function(e){return e.copy(z)},this.getViewport=function(e){return e.copy(R)},this.setViewport=function(e,t,n,s){e.isVector4?R.set(e.x,e.y,e.z,e.w):R.set(e,t,n,s),i.viewport(z.copy(R).multiplyScalar(v).floor())},this.getScissor=function(e){return e.copy(L)},this.setScissor=function(e,t,n,s){e.isVector4?L.set(e.x,e.y,e.z,e.w):L.set(e,t,n,s),i.scissor(G.copy(L).multiplyScalar(v).floor())},this.getScissorTest=function(){return de},this.setScissorTest=function(e){i.setScissorTest(de=e)},this.setOpaqueSort=function(e){ye=e},this.setTransparentSort=function(e){Se=e},this.getClearColor=function(e){return e.copy(E.getClearColor())},this.setClearColor=function(){E.setClearColor.apply(E,arguments)},this.getClearAlpha=function(){return E.getClearAlpha()},this.setClearAlpha=function(){E.setClearAlpha.apply(E,arguments)},this.clear=function(e=!0,t=!0,n=!0){let o=0;e&&(o|=s.COLOR_BUFFER_BIT),t&&(o|=s.DEPTH_BUFFER_BIT),n&&(o|=s.STENCIL_BUFFER_BIT),s.clear(o)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){m.removeEventListener("webglcontextlost",Ce,!1),m.removeEventListener("webglcontextrestored",Ee,!1),W.dispose(),$.dispose(),r.dispose(),T.dispose(),B.dispose(),N.dispose(),k.dispose(),w.dispose(),g.dispose(),g.removeEventListener("sessionstart",_e),g.removeEventListener("sessionend",Te),_&&(_.dispose(),_=null),A.stop()};function Ce(e){e.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),J=!0}function Ee(){console.log("THREE.WebGLRenderer: Context Restored."),J=!1;const e=b.autoReset,t=j.enabled,n=j.autoUpdate,s=j.needsUpdate,o=j.type;he(),b.autoReset=e,j.enabled=t,j.autoUpdate=n,j.needsUpdate=s,j.type=o}function ke(e){const t=e.target;t.removeEventListener("dispose",ke),Le(t)}function Le(e){Ne(e),r.remove(e)}function Ne(e){const t=r.get(e).programs;t!==void 0&&(t.forEach(function(e){w.releaseProgram(e)}),e.isShaderMaterial&&w.releaseShaderCache(e))}this.renderBufferDirect=function(e,t,n,o,a,r){t===null&&(t=ie);const y=a.isMesh&&a.matrixWorld.determinant()<0,w=$e(e,t,n,o,a);i.setMaterial(o,y);let l=n.index;const m=n.attributes.position;if(l===null){if(m===void 0||m.count===0)return}else if(l.count===0)return;let d=1;o.wireframe===!0&&(l=ae.getWireframeAttribute(n),d=2),k.setup(a,o,w,n,l);let f,c=be;l!==null&&(f=H.get(l),c=je,c.setIndex(f));const v=l!==null?l.count:m.count,p=n.drawRange.start*d,b=n.drawRange.count*d,g=r!==null?r.start*d:0,j=r!==null?r.count*d:1/0,h=Math.max(p,g),_=Math.min(v,p+b,g+j)-1,u=Math.max(0,_-h+1);if(u===0)return;if(a.isMesh)o.wireframe===!0?(i.setLineWidth(o.wireframeLinewidth*we()),c.setMode(s.LINES)):c.setMode(s.TRIANGLES);else if(a.isLine){let e=o.linewidth;e===void 0&&(e=1),i.setLineWidth(e*we()),a.isLineSegments?c.setMode(s.LINES):a.isLineLoop?c.setMode(s.LINE_LOOP):c.setMode(s.LINE_STRIP)}else a.isPoints?c.setMode(s.POINTS):a.isSprite&&c.setMode(s.TRIANGLES);if(a.isInstancedMesh)c.renderInstances(h,u,a.count);else if(n.isInstancedBufferGeometry){const e=Math.min(n.instanceCount,n._maxInstanceCount);c.renderInstances(h,u,e)}else c.render(h,u)},this.compile=function(e,t){l=$.get(e),l.init(),C.push(l),e.traverseVisible(function(e){e.isLight&&e.layers.test(t.layers)&&(l.pushLight(e),e.castShadow&&l.pushShadow(e))}),l.setupLights(o.physicallyCorrectLights),e.traverse(function(t){const n=t.material;if(n)if(Array.isArray(n))for(let s=0;s<n.length;s++){const o=n[s];ne(o,e,t)}else ne(n,e,t)}),C.pop(),l=null};let se=null;function De(e){se&&se(e)}function _e(){A.stop()}function Te(){A.start()}const A=new t1;A.setAnimationLoop(De),typeof self!="undefined"&&A.setContext(self),this.setAnimationLoop=function(e){se=e,g.setAnimationLoop(e),e===null?A.stop():A.start()},g.addEventListener("sessionstart",_e),g.addEventListener("sessionend",Te),this.render=function(e,t){if(t!==void 0&&t.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(J===!0)return;e.autoUpdate===!0&&e.updateMatrixWorld(),t.parent===null&&t.updateMatrixWorld(),g.enabled===!0&&g.isPresenting===!0&&(g.cameraAutoUpdate===!0&&g.updateCamera(t),t=g.getCamera()),e.isScene===!0&&e.onBeforeRender(o,e,t,p),l=$.get(e,C.length),l.init(),C.push(l),Y.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),Z.setFromProjectionMatrix(Y),re=this.localClippingEnabled,K=O.init(this.clippingPlanes,re,t),f=W.get(e,F.length),f.init(),F.push(f),Ae(e,t,0,o.sortObjects),f.finish(),o.sortObjects===!0&&f.sort(ye,Se),K===!0&&O.beginShadows();const n=l.state.shadowsArray;if(j.render(n,e,t),K===!0&&O.endShadows(),this.info.autoReset===!0&&this.info.reset(),E.render(f,e),l.setupLights(o.physicallyCorrectLights),t.isArrayCamera){const n=t.cameras;for(let t=0,o=n.length;t<o;t++){const s=n[t];me(f,e,s,s.viewport)}}else me(f,e,t);p!==null&&(u.updateMultisampleRenderTarget(p),u.updateRenderTargetMipmap(p)),e.isScene===!0&&e.onAfterRender(o,e,t),k.resetDefaultState(),V=-1,D=null,C.pop(),C.length>0?l=C[C.length-1]:l=null,F.pop(),F.length>0?f=F[F.length-1]:f=null};function Ae(e,t,n,s){if(e.visible===!1)return;const i=e.layers.test(t.layers);if(i)if(e.isGroup)n=e.renderOrder;else if(e.isLOD)e.autoUpdate===!0&&e.update(t);else if(e.isLight)l.pushLight(e),e.castShadow&&l.pushShadow(e);else if(e.isSprite){if(!e.frustumCulled||Z.intersectsSprite(e)){s&&M.setFromMatrixPosition(e.matrixWorld).applyMatrix4(Y);const o=N.update(e),t=e.material;t.visible&&f.push(e,o,t,n,M.z,null)}}else if((e.isMesh||e.isLine||e.isPoints)&&(e.isSkinnedMesh&&e.skeleton.frame!==b.render.frame&&(e.skeleton.update(),e.skeleton.frame=b.render.frame),!e.frustumCulled||Z.intersectsObject(e))){s&&M.setFromMatrixPosition(e.matrixWorld).applyMatrix4(Y);const o=N.update(e),t=e.material;if(Array.isArray(t)){const s=o.groups;for(let i=0,c=s.length;i<c;i++){const r=s[i],a=t[r.materialIndex];a&&a.visible&&f.push(e,o,a,n,M.z,r)}}else t.visible&&f.push(e,o,t,n,M.z,null)}const o=e.children;for(let e=0,i=o.length;e<i;e++)Ae(o[e],t,n,s)}function me(e,t,n,s){const o=e.opaque,a=e.transmissive,r=e.transparent;l.setupLightsView(n),a.length>0&&Pe(o,t,n),s&&i.viewport(z.copy(s)),o.length>0&&X(o,t,n),a.length>0&&X(a,t,n),r.length>0&&X(r,t,n),i.buffers.depth.setTest(!0),i.buffers.depth.setMask(!0),i.buffers.color.setMask(!0),i.setPolygonOffset(!1)}function Pe(e,t,n){const s=c.isWebGL2;_===null&&(_=new I(1,1,{generateMipmaps:!0,type:y.convert(vt)!==null?vt:Fe,minFilter:ct,samples:s&&ge===!0?4:0})),o.getDrawingBufferSize(P),s?_.setSize(P.x,P.y):_.setSize(Ss(P.x),Ss(P.y));const i=o.getRenderTarget();o.setRenderTarget(_),o.clear();const a=o.toneMapping;o.toneMapping=le,X(e,t,n),o.toneMapping=a,u.updateMultisampleRenderTarget(_),u.updateRenderTargetMipmap(_),o.setRenderTarget(i)}function X(e,t,n){const s=t.isScene===!0?t.overrideMaterial:null;for(let i=0,r=e.length;i<r;i++){const o=e[i],a=o.object,c=o.geometry,l=s===null?o.material:s,d=o.group;a.layers.test(n.layers)&&Ie(a,t,n,c,l,d)}}function Ie(e,t,n,s,i,a){e.onBeforeRender(o,t,n,s,i,a),e.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,e.matrixWorld),e.normalMatrix.getNormalMatrix(e.modelViewMatrix),i.onBeforeRender(o,t,n,s,e,a),i.transparent===!0&&i.side===gt?(i.side=U,i.needsUpdate=!0,o.renderBufferDirect(n,t,s,i,e,a),i.side=pt,i.needsUpdate=!0,o.renderBufferDirect(n,t,s,i,e,a),i.side=gt):o.renderBufferDirect(n,t,s,i,e,a),e.onAfterRender(o,t,n,s,i,a)}function ne(e,t,n){t.isScene!==!0&&(t=ie);const a=r.get(e),s=l.state.lights,f=l.state.shadowsArray,m=s.state.version,c=w.getParameters(e,s.state,f,t,n),h=w.getProgramCacheKey(c);let u=a.programs;a.environment=e.isMeshStandardMaterial?t.environment:null,a.fog=t.fog,a.envMap=(e.isMeshStandardMaterial?B:T).get(e.envMap||a.environment),u===void 0&&(e.addEventListener("dispose",ke),u=new Map,a.programs=u);let d=u.get(h);if(d!==void 0){if(a.currentProgram===d&&a.lightsStateVersion===m)return fe(e,c),d}else c.uniforms=w.getUniforms(e),e.onBuild(n,c,o),e.onBeforeCompile(c,o),d=w.acquireProgram(c,h),u.set(h,d),a.uniforms=c.uniforms;const i=a.uniforms;(!e.isShaderMaterial&&!e.isRawShaderMaterial||e.clipping===!0)&&(i.clippingPlanes=O.uniform),fe(e,c),a.needsLights=Ke(e),a.lightsStateVersion=m,a.needsLights&&(i.ambientLightColor.value=s.state.ambient,i.lightProbe.value=s.state.probe,i.directionalLights.value=s.state.directional,i.directionalLightShadows.value=s.state.directionalShadow,i.spotLights.value=s.state.spot,i.spotLightShadows.value=s.state.spotShadow,i.rectAreaLights.value=s.state.rectArea,i.ltc_1.value=s.state.rectAreaLTC1,i.ltc_2.value=s.state.rectAreaLTC2,i.pointLights.value=s.state.point,i.pointLightShadows.value=s.state.pointShadow,i.hemisphereLights.value=s.state.hemi,i.directionalShadowMap.value=s.state.directionalShadowMap,i.directionalShadowMatrix.value=s.state.directionalShadowMatrix,i.spotShadowMap.value=s.state.spotShadowMap,i.spotShadowMatrix.value=s.state.spotShadowMatrix,i.pointShadowMap.value=s.state.pointShadowMap,i.pointShadowMatrix.value=s.state.pointShadowMatrix);const p=d.getUniforms(),g=We.seqWithValue(p.seq,i);return a.currentProgram=d,a.uniformsList=g,d}function fe(e,t){const n=r.get(e);n.outputEncoding=t.outputEncoding,n.instancing=t.instancing,n.skinning=t.skinning,n.morphTargets=t.morphTargets,n.morphNormals=t.morphNormals,n.morphColors=t.morphColors,n.morphTargetsCount=t.morphTargetsCount,n.numClippingPlanes=t.numClippingPlanes,n.numIntersection=t.numClipIntersection,n.vertexAlphas=t.vertexAlphas,n.vertexTangents=t.vertexTangents,n.toneMapping=t.toneMapping}function $e(e,t,n,a,d){t.isScene!==!0&&(t=ie),u.resetTextureUnits();const y=t.fog,$=a.isMeshStandardMaterial?t.environment:null,I=p===null?o.outputEncoding:p.isXRRenderTarget===!0?p.texture.encoding:ce,H=(a.isMeshStandardMaterial?B:T).get(a.envMap||$),P=a.vertexColors===!0&&!!n.attributes.color&&n.attributes.color.itemSize===4,R=!!a.normalMap&&!!n.attributes.tangent,L=!!n.morphAttributes.position,N=!!n.morphAttributes.normal,F=!!n.morphAttributes.color,A=a.toneMapped?o.toneMapping:le,E=n.morphAttributes.position||n.morphAttributes.normal||n.morphAttributes.color,S=E!==void 0?E.length:0,h=r.get(a),z=l.state.lights;if(K===!0&&(re===!0||e!==D)){const t=e===D&&a.id===V;O.setState(a,e,t)}let m=!1;a.version===h.__version?h.needsLights&&h.lightsStateVersion!==z.state.version?m=!0:h.outputEncoding!==I?m=!0:d.isInstancedMesh&&h.instancing===!1?m=!0:!d.isInstancedMesh&&h.instancing===!0?m=!0:d.isSkinnedMesh&&h.skinning===!1?m=!0:!d.isSkinnedMesh&&h.skinning===!0?m=!0:h.envMap!==H?m=!0:a.fog&&h.fog!==y?m=!0:h.numClippingPlanes!==void 0&&(h.numClippingPlanes!==O.numPlanes||h.numIntersection!==O.numIntersection)?m=!0:h.vertexAlphas!==P?m=!0:h.vertexTangents!==R?m=!0:h.morphTargets!==L?m=!0:h.morphNormals!==N?m=!0:h.morphColors!==F?m=!0:h.toneMapping!==A?m=!0:c.isWebGL2===!0&&h.morphTargetsCount!==S&&(m=!0):(m=!0,h.__version=a.version);let j=h.currentProgram;m===!0&&(j=ne(a,t,d));let k=!1,b=!1,C=!1;const f=j.getUniforms(),g=h.uniforms;if(i.useProgram(j.program)&&(k=!0,b=!0,C=!0),a.id!==V&&(V=a.id,b=!0),k||D!==e){if(f.setValue(s,"projectionMatrix",e.projectionMatrix),c.logarithmicDepthBuffer&&f.setValue(s,"logDepthBufFC",2/(Math.log(e.far+1)/Math.LN2)),D!==e&&(D=e,b=!0,C=!0),a.isShaderMaterial||a.isMeshPhongMaterial||a.isMeshToonMaterial||a.isMeshStandardMaterial||a.envMap){const t=f.map.cameraPosition;t!==void 0&&t.setValue(s,M.setFromMatrixPosition(e.matrixWorld))}(a.isMeshPhongMaterial||a.isMeshToonMaterial||a.isMeshLambertMaterial||a.isMeshBasicMaterial||a.isMeshStandardMaterial||a.isShaderMaterial)&&f.setValue(s,"isOrthographic",e.isOrthographicCamera===!0),(a.isMeshPhongMaterial||a.isMeshToonMaterial||a.isMeshLambertMaterial||a.isMeshBasicMaterial||a.isMeshStandardMaterial||a.isShaderMaterial||a.isShadowMaterial||d.isSkinnedMesh)&&f.setValue(s,"viewMatrix",e.matrixWorldInverse)}if(d.isSkinnedMesh){f.setOptional(s,d,"bindMatrix"),f.setOptional(s,d,"bindMatrixInverse");const e=d.skeleton;e&&(c.floatVertexTextures?(e.boneTexture===null&&e.computeBoneTexture(),f.setValue(s,"boneTexture",e.boneTexture,u),f.setValue(s,"boneTextureSize",e.boneTextureSize)):f.setOptional(s,e,"boneMatrices"))}const w=n.morphAttributes;return(w.position!==void 0||w.normal!==void 0||w.color!==void 0&&c.isWebGL2===!0)&&ve.update(d,n,a,j),(b||h.receiveShadow!==d.receiveShadow)&&(h.receiveShadow=d.receiveShadow,f.setValue(s,"receiveShadow",d.receiveShadow)),b&&(f.setValue(s,"toneMappingExposure",o.toneMappingExposure),h.needsLights&&Ue(g,C),y&&a.fog&&Q.refreshFogUniforms(g,y),Q.refreshMaterialUniforms(g,a,v,x,_),We.upload(s,h.uniformsList,g,u)),a.isShaderMaterial&&a.uniformsNeedUpdate===!0&&(We.upload(s,h.uniformsList,g,u),a.uniformsNeedUpdate=!1),a.isSpriteMaterial&&f.setValue(s,"center",d.center),f.setValue(s,"modelViewMatrix",d.modelViewMatrix),f.setValue(s,"normalMatrix",d.normalMatrix),f.setValue(s,"modelMatrix",d.matrixWorld),j}function Ue(e,t){e.ambientLightColor.needsUpdate=t,e.lightProbe.needsUpdate=t,e.directionalLights.needsUpdate=t,e.directionalLightShadows.needsUpdate=t,e.pointLights.needsUpdate=t,e.pointLightShadows.needsUpdate=t,e.spotLights.needsUpdate=t,e.spotLightShadows.needsUpdate=t,e.rectAreaLights.needsUpdate=t,e.hemisphereLights.needsUpdate=t}function Ke(e){return e.isMeshLambertMaterial||e.isMeshToonMaterial||e.isMeshPhongMaterial||e.isMeshStandardMaterial||e.isShadowMaterial||e.isShaderMaterial&&e.lights===!0}this.getActiveCubeFace=function(){return oe},this.getActiveMipmapLevel=function(){return ee},this.getRenderTarget=function(){return p},this.setRenderTargetTextures=function(e,t,n){r.get(e.texture).__webglTexture=t,r.get(e.depthTexture).__webglTexture=n;const s=r.get(e);s.__hasExternalTextures=!0,s.__hasExternalTextures&&(s.__autoAllocateDepthBuffer=n===void 0,s.__autoAllocateDepthBuffer||d.has("WEBGL_multisampled_render_to_texture")===!0&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),s.__useRenderToTexture=!1))},this.setRenderTargetFramebuffer=function(e,t){const n=r.get(e);n.__webglFramebuffer=t,n.__useDefaultFramebuffer=t===void 0},this.setRenderTarget=function(e,t=0,n=0){p=e,oe=t,ee=n;let a=!0;if(e){const t=r.get(e);t.__useDefaultFramebuffer!==void 0?(i.bindFramebuffer(s.FRAMEBUFFER,null),a=!1):t.__webglFramebuffer===void 0?u.setupRenderTarget(e):t.__hasExternalTextures&&u.rebindTextures(e,r.get(e.texture).__webglTexture,r.get(e.depthTexture).__webglTexture)}let o=null,l=!1,d=!1;if(e){const n=e.texture;(n.isData3DTexture||n.isDataArrayTexture)&&(d=!0);const s=r.get(e).__webglFramebuffer;e.isWebGLCubeRenderTarget?(o=s[t],l=!0):c.isWebGL2&&e.samples>0&&u.useMultisampledRTT(e)===!1?o=r.get(e).__webglMultisampledFramebuffer:o=s,z.copy(e.viewport),G.copy(e.scissor),ue=e.scissorTest}else z.copy(R).multiplyScalar(v).floor(),G.copy(L).multiplyScalar(v).floor(),ue=de;const h=i.bindFramebuffer(s.FRAMEBUFFER,o);if(h&&c.drawBuffers&&a&&i.drawBuffers(e,o),i.viewport(z),i.scissor(G),i.setScissorTest(ue),l){const o=r.get(e.texture);s.framebufferTexture2D(s.FRAMEBUFFER,s.COLOR_ATTACHMENT0,s.TEXTURE_CUBE_MAP_POSITIVE_X+t,o.__webglTexture,n)}else if(d){const o=r.get(e.texture),i=t||0;s.framebufferTextureLayer(s.FRAMEBUFFER,s.COLOR_ATTACHMENT0,o.__webglTexture,n||0,i)}V=-1},this.readRenderTargetPixels=function(e,t,n,o,a,l,u){if(!e||!e.isWebGLRenderTarget){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let h=r.get(e).__webglFramebuffer;if(e.isWebGLCubeRenderTarget&&u!==void 0&&(h=h[u]),h){i.bindFramebuffer(s.FRAMEBUFFER,h);try{const u=e.texture,r=u.format,i=u.type;if(r!==q&&y.convert(r)!==s.getParameter(s.IMPLEMENTATION_COLOR_READ_FORMAT)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}const h=i===vt&&(d.has("EXT_color_buffer_half_float")||c.isWebGL2&&d.has("EXT_color_buffer_float"));if(i!==Fe&&y.convert(i)!==s.getParameter(s.IMPLEMENTATION_COLOR_READ_TYPE)&&!(i===xe&&(c.isWebGL2||d.has("OES_texture_float")||d.has("WEBGL_color_buffer_float")))&&!h){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}t>=0&&t<=e.width-o&&n>=0&&n<=e.height-a&&s.readPixels(t,n,o,a,y.convert(r),y.convert(i),l)}finally{const e=p!==null?r.get(p).__webglFramebuffer:null;i.bindFramebuffer(s.FRAMEBUFFER,e)}}},this.copyFramebufferToTexture=function(e,t,n=0){if(t.isFramebufferTexture!==!0){console.error("THREE.WebGLRenderer: copyFramebufferToTexture() can only be used with FramebufferTexture.");return}const o=Math.pow(2,-n),a=Math.floor(t.image.width*o),r=Math.floor(t.image.height*o);u.setTexture2D(t,0),s.copyTexSubImage2D(s.TEXTURE_2D,n,0,0,e.x,e.y,a,r),i.unbindTexture()},this.copyTextureToTexture=function(e,t,n,o=0){const c=t.image.width,l=t.image.height,a=y.convert(n.format),r=y.convert(n.type);u.setTexture2D(n,0),s.pixelStorei(s.UNPACK_FLIP_Y_WEBGL,n.flipY),s.pixelStorei(s.UNPACK_PREMULTIPLY_ALPHA_WEBGL,n.premultiplyAlpha),s.pixelStorei(s.UNPACK_ALIGNMENT,n.unpackAlignment),t.isDataTexture?s.texSubImage2D(s.TEXTURE_2D,o,e.x,e.y,c,l,a,r,t.image.data):t.isCompressedTexture?s.compressedTexSubImage2D(s.TEXTURE_2D,o,e.x,e.y,t.mipmaps[0].width,t.mipmaps[0].height,a,t.mipmaps[0].data):s.texSubImage2D(s.TEXTURE_2D,o,e.x,e.y,a,r,t.image),o===0&&n.generateMipmaps&&s.generateMipmap(s.TEXTURE_2D),i.unbindTexture()},this.copyTextureToTexture3D=function(e,t,n,a,r=0){if(o.isWebGL1Renderer){console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");return}const d=e.max.x-e.min.x+1,h=e.max.y-e.min.y+1,m=e.max.z-e.min.z+1,f=y.convert(a.format),p=y.convert(a.type);let c;if(a.isData3DTexture)u.setTexture3D(a,0),c=s.TEXTURE_3D;else if(a.isDataArrayTexture)u.setTexture2DArray(a,0),c=s.TEXTURE_2D_ARRAY;else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}s.pixelStorei(s.UNPACK_FLIP_Y_WEBGL,a.flipY),s.pixelStorei(s.UNPACK_PREMULTIPLY_ALPHA_WEBGL,a.premultiplyAlpha),s.pixelStorei(s.UNPACK_ALIGNMENT,a.unpackAlignment);const g=s.getParameter(s.UNPACK_ROW_LENGTH),v=s.getParameter(s.UNPACK_IMAGE_HEIGHT),b=s.getParameter(s.UNPACK_SKIP_PIXELS),j=s.getParameter(s.UNPACK_SKIP_ROWS),_=s.getParameter(s.UNPACK_SKIP_IMAGES),l=n.isCompressedTexture?n.mipmaps[0]:n.image;s.pixelStorei(s.UNPACK_ROW_LENGTH,l.width),s.pixelStorei(s.UNPACK_IMAGE_HEIGHT,l.height),s.pixelStorei(s.UNPACK_SKIP_PIXELS,e.min.x),s.pixelStorei(s.UNPACK_SKIP_ROWS,e.min.y),s.pixelStorei(s.UNPACK_SKIP_IMAGES,e.min.z),n.isDataTexture||n.isData3DTexture?s.texSubImage3D(c,r,t.x,t.y,t.z,d,h,m,f,p,l.data):n.isCompressedTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),s.compressedTexSubImage3D(c,r,t.x,t.y,t.z,d,h,m,f,l.data)):s.texSubImage3D(c,r,t.x,t.y,t.z,d,h,m,f,p,l),s.pixelStorei(s.UNPACK_ROW_LENGTH,g),s.pixelStorei(s.UNPACK_IMAGE_HEIGHT,v),s.pixelStorei(s.UNPACK_SKIP_PIXELS,b),s.pixelStorei(s.UNPACK_SKIP_ROWS,j),s.pixelStorei(s.UNPACK_SKIP_IMAGES,_),r===0&&a.generateMipmaps&&s.generateMipmap(c),i.unbindTexture()},this.initTexture=function(e){u.setTexture2D(e,0),i.unbindTexture()},this.resetState=function(){oe=0,ee=0,p=null,i.reset(),k.reset()},typeof __THREE_DEVTOOLS__!="undefined"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}m.prototype.isWebGLRenderer=!0;class bu extends m{}bu.prototype.isWebGL1Renderer=!0;class bs{constructor(e,t=25e-5){this.name="",this.color=new o(e),this.density=t}clone(){return new bs(this.color,this.density)}toJSON(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}}bs.prototype.isFogExp2=!0;class _s{constructor(e,t=1,n=1e3){this.name="",this.color=new o(e),this.near=t,this.far=n}clone(){return new _s(this.color,this.near,this.far)}toJSON(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}}_s.prototype.isFog=!0;class Os extends l{constructor(){super(),this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,typeof __THREE_DEVTOOLS__!="undefined"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(e,t){return super.copy(e,t),e.background!==null&&(this.background=e.background.clone()),e.environment!==null&&(this.environment=e.environment.clone()),e.fog!==null&&(this.fog=e.fog.clone()),e.overrideMaterial!==null&&(this.overrideMaterial=e.overrideMaterial.clone()),this.autoUpdate=e.autoUpdate,this.matrixAutoUpdate=e.matrixAutoUpdate,this}toJSON(e){const t=super.toJSON(e);return this.fog!==null&&(t.object.fog=this.fog.toJSON()),t}}Os.prototype.isScene=!0;class tt{constructor(e,t){this.array=e,this.stride=t,this.count=e!==void 0?e.length/t:0,this.usage=tn,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=$()}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}copy(e){return this.array=new e.array.constructor(e.array),this.count=e.count,this.stride=e.stride,this.usage=e.usage,this}copyAt(e,t,n){e*=this.stride,n*=t.stride;for(let s=0,o=this.stride;s<o;s++)this.array[e+s]=t.array[n+s];return this}set(e,t=0){return this.array.set(e,t),this}clone(e){e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=$()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const n=new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]),t=new this.constructor(n,this.stride);return t.setUsage(this.usage),t}onUpload(e){return this.onUploadCallback=e,this}toJSON(e){return e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=$()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=Array.prototype.slice.call(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}tt.prototype.isInterleavedBuffer=!0;const L=new t;class Je{constructor(e,t,n,s=!1){this.name="",this.data=e,this.itemSize=t,this.offset=n,this.normalized=s===!0}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(e){this.data.needsUpdate=e}applyMatrix4(e){for(let t=0,n=this.data.count;t<n;t++)L.fromBufferAttribute(this,t),L.applyMatrix4(e),this.setXYZ(t,L.x,L.y,L.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)L.fromBufferAttribute(this,t),L.applyNormalMatrix(e),this.setXYZ(t,L.x,L.y,L.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)L.fromBufferAttribute(this,t),L.transformDirection(e),this.setXYZ(t,L.x,L.y,L.z);return this}setX(e,t){return this.data.array[e*this.data.stride+this.offset]=t,this}setY(e,t){return this.data.array[e*this.data.stride+this.offset+1]=t,this}setZ(e,t){return this.data.array[e*this.data.stride+this.offset+2]=t,this}setW(e,t){return this.data.array[e*this.data.stride+this.offset+3]=t,this}getX(e){return this.data.array[e*this.data.stride+this.offset]}getY(e){return this.data.array[e*this.data.stride+this.offset+1]}getZ(e){return this.data.array[e*this.data.stride+this.offset+2]}getW(e){return this.data.array[e*this.data.stride+this.offset+3]}setXY(e,t,n){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=n,this}setXYZ(e,t,n,s){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=s,this}setXYZW(e,t,n,s,o){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=s,this.data.array[e+3]=o,this}clone(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");const e=[];for(let t=0;t<this.count;t++){const n=t*this.data.stride+this.offset;for(let t=0;t<this.itemSize;t++)e.push(this.data.array[n+t])}return new d(new this.array.constructor(e),this.itemSize,this.normalized)}return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.clone(e)),new Je(e.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");const e=[];for(let t=0;t<this.count;t++){const n=t*this.data.stride+this.offset;for(let t=0;t<this.itemSize;t++)e.push(this.data.array[n+t])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:e,normalized:this.normalized}}return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.toJSON(e)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}Je.prototype.isInterleavedBufferAttribute=!0;class Es extends y{constructor(e){super(),this.type="SpriteMaterial",this.color=new o(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.rotation=e.rotation,this.sizeAttenuation=e.sizeAttenuation,this}}Es.prototype.isSpriteMaterial=!0;let Xt;const rs=new t,on=new t,cn=new t,ln=new n,An=new n,Tu=new a,As=new t,is=new t,Fs=new t,Lu=new n,ea=new n,Pu=new n;class Ts extends l{constructor(e){if(super(),this.type="Sprite",Xt===void 0){Xt=new r;const t=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),e=new tt(t,5);Xt.setIndex([0,1,2,0,2,3]),Xt.setAttribute("position",new Je(e,3,0,!1)),Xt.setAttribute("uv",new Je(e,2,3,!1))}this.geometry=Xt,this.material=e!==void 0?e:new Es,this.center=new n(.5,.5)}raycast(e,t){e.camera===null&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),on.setFromMatrixScale(this.matrixWorld),Tu.copy(e.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse,this.matrixWorld),cn.setFromMatrixPosition(this.modelViewMatrix),e.camera.isPerspectiveCamera&&this.material.sizeAttenuation===!1&&on.multiplyScalar(-cn.z);const a=this.material.rotation;let s,o;a!==0&&(o=Math.cos(a),s=Math.sin(a));const i=this.center;zs(As.set(-.5,-.5,0),cn,i,on,s,o),zs(is.set(.5,-.5,0),cn,i,on,s,o),zs(Fs.set(.5,.5,0),cn,i,on,s,o),Lu.set(0,0),ea.set(1,0),Pu.set(1,1);let r=e.ray.intersectTriangle(As,is,Fs,!1,rs);if(r===null&&(zs(is.set(-.5,.5,0),cn,i,on,s,o),ea.set(0,1),r=e.ray.intersectTriangle(As,Fs,is,!1,rs),r===null))return;const c=e.ray.origin.distanceTo(rs);if(c<e.near||c>e.far)return;t.push({distance:c,point:rs.clone(),uv:w.getUV(rs,As,is,Fs,Lu,ea,Pu,new n),face:null,object:this})}copy(e){return super.copy(e),e.center!==void 0&&this.center.copy(e.center),this.material=e.material,this}}Ts.prototype.isSprite=!0;function zs(e,t,n,s,o,i){ln.subVectors(e,n).addScalar(.5).multiply(s),o!==void 0?(An.x=i*ln.x-o*ln.y,An.y=o*ln.x+i*ln.y):An.copy(ln),e.copy(t),e.x+=An.x,e.y+=An.y,e.applyMatrix4(Tu)}const Ls=new t,Vu=new t;class $u extends l{constructor(){super(),this._currentLevel=0,this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]},isLOD:{value:!0}}),this.autoUpdate=!0}copy(e){super.copy(e,!1);const t=e.levels;for(let e=0,s=t.length;e<s;e++){const n=t[e];this.addLevel(n.object.clone(),n.distance)}return this.autoUpdate=e.autoUpdate,this}addLevel(e,t=0){t=Math.abs(t);const s=this.levels;let n;for(n=0;n<s.length;n++)if(t<s[n].distance)break;return s.splice(n,0,{distance:t,object:e}),this.add(e),this}getCurrentLevel(){return this._currentLevel}getObjectForDistance(e){const t=this.levels;if(t.length>0){let n,s;for(n=1,s=t.length;n<s;n++)if(e<t[n].distance)break;return t[n-1].object}return null}raycast(e,t){const n=this.levels;if(n.length>0){Ls.setFromMatrixPosition(this.matrixWorld);const n=e.ray.origin.distanceTo(Ls);this.getObjectForDistance(n).raycast(e,t)}}update(e){const t=this.levels;if(t.length>1){Ls.setFromMatrixPosition(e.matrixWorld),Vu.setFromMatrixPosition(this.matrixWorld);const o=Ls.distanceTo(Vu)/e.zoom;t[0].object.visible=!0;let n,s;for(n=1,s=t.length;n<s;n++)if(o>=t[n].distance)t[n-1].object.visible=!1,t[n].object.visible=!0;else break;for(this._currentLevel=n-1;n<s;n++)t[n].object.visible=!1}}toJSON(e){const t=super.toJSON(e);this.autoUpdate===!1&&(t.object.autoUpdate=!1),t.object.levels=[];const n=this.levels;for(let e=0,o=n.length;e<o;e++){const s=n[e];t.object.levels.push({object:s.object.uuid,distance:s.distance})}return t}}const Wu=new t,Uu=new h,Ku=new h,A1=new t,Yu=new a;class Rs extends x{constructor(e,t){super(e,t),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new a,this.bindMatrixInverse=new a}copy(e){return super.copy(e),this.bindMode=e.bindMode,this.bindMatrix.copy(e.bindMatrix),this.bindMatrixInverse.copy(e.bindMatrixInverse),this.skeleton=e.skeleton,this}bind(e,t){this.skeleton=e,t===void 0&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),t=this.matrixWorld),this.bindMatrix.copy(t),this.bindMatrixInverse.copy(t).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const e=new h,t=this.geometry.attributes.skinWeight;for(let n=0,o=t.count;n<o;n++){e.fromBufferAttribute(t,n);const s=1/e.manhattanLength();s!==1/0?e.multiplyScalar(s):e.set(1,0,0,0),t.setXYZW(n,e.x,e.y,e.z,e.w)}}updateMatrixWorld(e){super.updateMatrixWorld(e),this.bindMode==="attached"?this.bindMatrixInverse.copy(this.matrixWorld).invert():this.bindMode==="detached"?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}boneTransform(e,t){const n=this.skeleton,s=this.geometry;Uu.fromBufferAttribute(s.attributes.skinIndex,e),Ku.fromBufferAttribute(s.attributes.skinWeight,e),Wu.copy(t).applyMatrix4(this.bindMatrix),t.set(0,0,0);for(let e=0;e<4;e++){const s=Ku.getComponent(e);if(s!==0){const o=Uu.getComponent(e);Yu.multiplyMatrices(n.bones[o].matrixWorld,n.boneInverses[o]),t.addScaledVector(A1.copy(Wu).applyMatrix4(Yu),s)}}return t.applyMatrix4(this.bindMatrixInverse)}}Rs.prototype.isSkinnedMesh=!0;class ls extends l{constructor(){super(),this.type="Bone"}}ls.prototype.isBone=!0;class nt extends A{constructor(e=null,t=1,n=1,s,o,i,a,r,c=O,l=O,d,u){super(null,i,a,r,c,l,s,o,d,u),this.image={data:e,width:t,height:n},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}nt.prototype.isDataTexture=!0;const Zu=new a,k1=new a;class qi{constructor(e=[],t=[]){this.uuid=$(),this.bones=e.slice(0),this.boneInverses=t,this.boneMatrices=null,this.boneTexture=null,this.boneTextureSize=0,this.frame=-1,this.init()}init(){const e=this.bones,t=this.boneInverses;if(this.boneMatrices=new Float32Array(e.length*16),t.length===0)this.calculateInverses();else if(e.length!==t.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),this.boneInverses=[];for(let e=0,t=this.bones.length;e<t;e++)this.boneInverses.push(new a)}}calculateInverses(){this.boneInverses.length=0;for(let e=0,n=this.bones.length;e<n;e++){const t=new a;this.bones[e]&&t.copy(this.bones[e].matrixWorld).invert(),this.boneInverses.push(t)}}pose(){for(let e=0,n=this.bones.length;e<n;e++){const t=this.bones[e];t&&t.matrixWorld.copy(this.boneInverses[e]).invert()}for(let t=0,n=this.bones.length;t<n;t++){const e=this.bones[t];e&&(e.parent&&e.parent.isBone?(e.matrix.copy(e.parent.matrixWorld).invert(),e.matrix.multiply(e.matrixWorld)):e.matrix.copy(e.matrixWorld),e.matrix.decompose(e.position,e.quaternion,e.scale))}}update(){const e=this.bones,n=this.boneInverses,s=this.boneMatrices,t=this.boneTexture;for(let t=0,o=e.length;t<o;t++){const i=e[t]?e[t].matrixWorld:k1;Zu.multiplyMatrices(i,n[t]),Zu.toArray(s,t*16)}t!==null&&(t.needsUpdate=!0)}clone(){return new qi(this.bones,this.boneInverses)}computeBoneTexture(){let e=Math.sqrt(this.bones.length*4);e=Cc(e),e=Math.max(e,4);const t=new Float32Array(e*e*4);t.set(this.boneMatrices);const n=new nt(t,e,e,q,xe);return n.needsUpdate=!0,this.boneMatrices=t,this.boneTexture=n,this.boneTextureSize=e,this}getBoneByName(e){for(let t=0,s=this.bones.length;t<s;t++){const n=this.bones[t];if(n.name===e)return n}}dispose(){this.boneTexture!==null&&(this.boneTexture.dispose(),this.boneTexture=null)}fromJSON(e,t){this.uuid=e.uuid;for(let n=0,i=e.bones.length;n<i;n++){const o=e.bones[n];let s=t[o];s===void 0&&(console.warn("THREE.Skeleton: No bone found with UUID:",o),s=new ls),this.bones.push(s),this.boneInverses.push((new a).fromArray(e.boneInverses[n]))}return this.init(),this}toJSON(){const e={metadata:{version:4.5,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};e.uuid=this.uuid;const t=this.bones,n=this.boneInverses;for(let s=0,o=t.length;s<o;s++){const i=t[s];e.bones.push(i.uuid);const a=n[s];e.boneInverses.push(a.toArray())}return e}}class it extends d{constructor(e,t,n,s=1){typeof n=="number"&&(s=n,n=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")),super(e,t,n),this.meshPerAttribute=s}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}toJSON(){const e=super.toJSON();return e.meshPerAttribute=this.meshPerAttribute,e.isInstancedBufferAttribute=!0,e}}it.prototype.isInstancedBufferAttribute=!0;const n1=new a,s1=new a,Bs=[],ss=new x;class Bi extends x{constructor(e,t,n){super(e,t),this.instanceMatrix=new it(new Float32Array(n*16),16),this.instanceColor=null,this.count=n,this.frustumCulled=!1}copy(e){return super.copy(e),this.instanceMatrix.copy(e.instanceMatrix),e.instanceColor!==null&&(this.instanceColor=e.instanceColor.clone()),this.count=e.count,this}getColorAt(e,t){t.fromArray(this.instanceColor.array,e*3)}getMatrixAt(e,t){t.fromArray(this.instanceMatrix.array,e*16)}raycast(e,t){const n=this.matrixWorld,s=this.count;if(ss.geometry=this.geometry,ss.material=this.material,ss.material===void 0)return;for(let o=0;o<s;o++){this.getMatrixAt(o,n1),s1.multiplyMatrices(n,n1),ss.matrixWorld=s1,ss.raycast(e,Bs);for(let e=0,s=Bs.length;e<s;e++){const n=Bs[e];n.instanceId=o,n.object=this,t.push(n)}Bs.length=0}}setColorAt(e,t){this.instanceColor===null&&(this.instanceColor=new it(new Float32Array(this.instanceMatrix.count*3),3)),t.toArray(this.instanceColor.array,e*3)}setMatrixAt(e,t){t.toArray(this.instanceMatrix.array,e*16)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"})}}Bi.prototype.isInstancedMesh=!0;class S extends y{constructor(e){super(),this.type="LineBasicMaterial",this.color=new o(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this}}S.prototype.isLineBasicMaterial=!0;const c1=new t,l1=new t,d1=new a,Ii=new Te,Xs=new ke;class ge extends l{constructor(e=new r,t=new S){super(),this.type="Line",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e){return super.copy(e),this.material=e.material,this.geometry=e.geometry,this}computeLineDistances(){const e=this.geometry;if(e.isBufferGeometry)if(e.index===null){const n=e.attributes.position,t=[0];for(let e=1,s=n.count;e<s;e++)c1.fromBufferAttribute(n,e-1),l1.fromBufferAttribute(n,e),t[e]=t[e-1],t[e]+=c1.distanceTo(l1);e.setAttribute("lineDistance",new i(t,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else e.isGeometry&&console.error("THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}raycast(e,n){const s=this.geometry,l=this.matrixWorld,d=e.params.Line.threshold,o=s.drawRange;if(s.boundingSphere===null&&s.computeBoundingSphere(),Xs.copy(s.boundingSphere),Xs.applyMatrix4(l),Xs.radius+=d,e.ray.intersectsSphere(Xs)===!1)return;d1.copy(l).invert(),Ii.copy(e.ray).applyMatrix4(d1);const u=d/((this.scale.x+this.scale.y+this.scale.z)/3),h=u*u,a=new t,r=new t,c=new t,i=new t,m=this.isLineSegments?2:1;if(s.isBufferGeometry){const l=s.index,d=s.attributes,t=d.position;if(l!==null){const s=Math.max(0,o.start),d=Math.min(l.count,o.start+o.count);for(let o=s,f=d-1;o<f;o+=m){const p=l.getX(o),g=l.getX(o+1);a.fromBufferAttribute(t,p),r.fromBufferAttribute(t,g);const v=Ii.distanceSqToSegment(a,r,i,c);if(v>h)continue;i.applyMatrix4(this.matrixWorld);const u=e.ray.origin.distanceTo(i);if(u<e.near||u>e.far)continue;n.push({distance:u,point:c.clone().applyMatrix4(this.matrixWorld),index:o,face:null,faceIndex:null,object:this})}}else{const s=Math.max(0,o.start),l=Math.min(t.count,o.start+o.count);for(let o=s,u=l-1;o<u;o+=m){a.fromBufferAttribute(t,o),r.fromBufferAttribute(t,o+1);const f=Ii.distanceSqToSegment(a,r,i,c);if(f>h)continue;i.applyMatrix4(this.matrixWorld);const d=e.ray.origin.distanceTo(i);if(d<e.near||d>e.far)continue;n.push({distance:d,point:c.clone().applyMatrix4(this.matrixWorld),index:o,face:null,faceIndex:null,object:this})}}}else s.isGeometry&&console.error("THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const e=this.geometry;if(e.isBufferGeometry){{const t=e.morphAttributes,n=Object.keys(t);if(n.length>0){const e=t[n[0]];if(e!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let t=0,n=e.length;t<n;t++){const s=e[t].name||String(t);this.morphTargetInfluences.push(0),this.morphTargetDictionary[s]=t}}}}}else{const t=e.morphTargets;t!==void 0&&t.length>0&&console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}ge.prototype.isLine=!0;const f1=new t,p1=new t;class B extends ge{constructor(e,t){super(e,t),this.type="LineSegments"}computeLineDistances(){const e=this.geometry;if(e.isBufferGeometry)if(e.index===null){const n=e.attributes.position,t=[];for(let e=0,s=n.count;e<s;e+=2)f1.fromBufferAttribute(n,e),p1.fromBufferAttribute(n,e+1),t[e]=e===0?0:t[e-1],t[e+1]=t[e]+f1.distanceTo(p1);e.setAttribute("lineDistance",new i(t,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else e.isGeometry&&console.error("THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}}B.prototype.isLineSegments=!0;class Di extends ge{constructor(e,t){super(e,t),this.type="LineLoop"}}Di.prototype.isLineLoop=!0;class rt extends y{constructor(e){super(),this.type="PointsMaterial",this.color=new o(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this}}rt.prototype.isPointsMaterial=!0;const j1=new a,zi=new Te,Zs=new ke,Js=new t;class ts extends l{constructor(e=new r,t=new rt){super(),this.type="Points",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e){return super.copy(e),this.material=e.material,this.geometry=e.geometry,this}raycast(e,t){const n=this.geometry,o=this.matrixWorld,i=e.params.Points.threshold,s=n.drawRange;if(n.boundingSphere===null&&n.computeBoundingSphere(),Zs.copy(n.boundingSphere),Zs.applyMatrix4(o),Zs.radius+=i,e.ray.intersectsSphere(Zs)===!1)return;j1.copy(o).invert(),zi.copy(e.ray).applyMatrix4(j1);const a=i/((this.scale.x+this.scale.y+this.scale.z)/3),r=a*a;if(n.isBufferGeometry){const i=n.index,c=n.attributes,a=c.position;if(i!==null){const n=Math.max(0,s.start),c=Math.min(i.count,s.start+s.count);for(let s=n,d=c;s<d;s++){const l=i.getX(s);Js.fromBufferAttribute(a,l),u1(Js,l,r,o,e,t,this)}}else{const n=Math.max(0,s.start),i=Math.min(a.count,s.start+s.count);for(let s=n,c=i;s<c;s++)Js.fromBufferAttribute(a,s),u1(Js,s,r,o,e,t,this)}}else console.error("THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const e=this.geometry;if(e.isBufferGeometry){{const t=e.morphAttributes,n=Object.keys(t);if(n.length>0){const e=t[n[0]];if(e!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let t=0,n=e.length;t<n;t++){const s=e[t].name||String(t);this.morphTargetInfluences.push(0),this.morphTargetDictionary[s]=t}}}}}else{const t=e.morphTargets;t!==void 0&&t.length>0&&console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}ts.prototype.isPoints=!0;function u1(e,n,s,o,i,a,r){const c=zi.distanceSqToPoint(e);if(c<s){const s=new t;zi.closestPointToPoint(e,s),s.applyMatrix4(o);const l=i.ray.origin.distanceTo(s);if(l<i.near||l>i.far)return;a.push({distance:l,distanceToRay:Math.sqrt(c),point:s,index:n,face:null,object:r})}}class a1 extends A{constructor(e,t,n,s,o,i,a,r,c){super(e,t,n,s,o,i,a,r,c),this.minFilter=i!==void 0?i:j,this.magFilter=o!==void 0?o:j,this.generateMipmaps=!1;const d=this;function l(){d.needsUpdate=!0,e.requestVideoFrameCallback(l)}"requestVideoFrameCallback"in e&&e.requestVideoFrameCallback(l)}clone(){return new this.constructor(this.image).copy(this)}update(){const e=this.image,t="requestVideoFrameCallback"in e;t===!1&&e.readyState>=e.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}a1.prototype.isVideoTexture=!0;class e1 extends A{constructor(e,t,n){super({width:e,height:t}),this.format=n,this.magFilter=O,this.minFilter=O,this.generateMipmaps=!1,this.needsUpdate=!0}}e1.prototype.isFramebufferTexture=!0;class Mi extends A{constructor(e,t,n,s,o,i,a,r,c,l,d,u){super(null,i,a,r,c,l,s,o,d,u),this.image={width:t,height:n},this.mipmaps=e,this.flipY=!1,this.generateMipmaps=!1}}Mi.prototype.isCompressedTexture=!0;class qu extends A{constructor(e,t,n,s,o,i,a,r,c){super(e,t,n,s,o,i,a,r,c),this.needsUpdate=!0}}qu.prototype.isCanvasTexture=!0;class V{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(e,t){const n=this.getUtoTmapping(e);return this.getPoint(n,t)}getPoints(e=5){const t=[];for(let n=0;n<=e;n++)t.push(this.getPoint(n/e));return t}getSpacedPoints(e=5){const t=[];for(let n=0;n<=e;n++)t.push(this.getPointAt(n/e));return t}getLength(){const e=this.getLengths();return e[e.length-1]}getLengths(e=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const t=[];let n,s=this.getPoint(0),o=0;t.push(0);for(let i=1;i<=e;i++)n=this.getPoint(i/e),o+=n.distanceTo(s),t.push(o),s=n;return this.cacheArcLengths=t,t}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(e,t){const s=this.getLengths();let n=0;const a=s.length;let o;t?o=t:o=e*s[a-1];let r=0,i=a-1,c;for(;r<=i;)if(n=Math.floor(r+(i-r)/2),c=s[n]-o,c<0)r=n+1;else if(c>0)i=n-1;else{i=n;break}if(n=i,s[n]===o)return n/(a-1);const l=s[n],d=s[n+1],u=d-l,h=(o-l)/u,m=(n+h)/(a-1);return m}getTangent(e,s){const a=1e-4;let o=e-a,i=e+a;o<0&&(o=0),i>1&&(i=1);const r=this.getPoint(o),l=this.getPoint(i),c=s||(r.isVector2?new n:new t);return c.copy(l).sub(r).normalize(),c}getTangentAt(e,t){const n=this.getUtoTmapping(e);return this.getTangent(n,t)}computeFrenetFrames(e,n){const l=new t,s=[],o=[],i=[],r=new t,d=new a;for(let n=0;n<=e;n++){const o=n/e;s[n]=this.getTangentAt(o,new t)}o[0]=new t,i[0]=new t;let c=Number.MAX_VALUE;const u=Math.abs(s[0].x),h=Math.abs(s[0].y),m=Math.abs(s[0].z);u<=c&&(c=u,l.set(1,0,0)),h<=c&&(c=h,l.set(0,1,0)),m<=c&&l.set(0,0,1),r.crossVectors(s[0],l).normalize(),o[0].crossVectors(s[0],r),i[0].crossVectors(s[0],o[0]);for(let t=1;t<=e;t++){if(o[t]=o[t-1].clone(),i[t]=i[t-1].clone(),r.crossVectors(s[t-1],s[t]),r.length()>Number.EPSILON){r.normalize();const e=Math.acos(b(s[t-1].dot(s[t]),-1,1));o[t].applyMatrix4(d.makeRotationAxis(r,e))}i[t].crossVectors(s[t],o[t])}if(n===!0){let t=Math.acos(b(o[0].dot(o[e]),-1,1));t/=e,s[0].dot(r.crossVectors(o[0],o[e]))>0&&(t=-t);for(let n=1;n<=e;n++)o[n].applyMatrix4(d.makeRotationAxis(s[n],t*n)),i[n].crossVectors(s[n],o[n])}return{tangents:s,normals:o,binormals:i}}clone(){return(new this.constructor).copy(this)}copy(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}toJSON(){const e={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return e.arcLengthDivisions=this.arcLengthDivisions,e.type=this.type,e}fromJSON(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}}class es extends V{constructor(e=0,t=0,n=1,s=1,o=0,i=Math.PI*2,a=!1,r=0){super(),this.type="EllipseCurve",this.aX=e,this.aY=t,this.xRadius=n,this.yRadius=s,this.aStartAngle=o,this.aEndAngle=i,this.aClockwise=a,this.aRotation=r}getPoint(e,t){const l=t||new n,o=Math.PI*2;let s=this.aEndAngle-this.aStartAngle;const r=Math.abs(s)<Number.EPSILON;for(;s<0;)s+=o;for(;s>o;)s-=o;s<Number.EPSILON&&(r?s=0:s=o),this.aClockwise===!0&&!r&&(s===o?s=-o:s=s-o);const c=this.aStartAngle+e*s;let i=this.aX+this.xRadius*Math.cos(c),a=this.aY+this.yRadius*Math.sin(c);if(this.aRotation!==0){const e=Math.cos(this.aRotation),t=Math.sin(this.aRotation),n=i-this.aX,s=a-this.aY;i=n*e-s*t+this.aX,a=n*t+s*e+this.aY}return l.set(i,a)}copy(e){return super.copy(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}toJSON(){const e=super.toJSON();return e.aX=this.aX,e.aY=this.aY,e.xRadius=this.xRadius,e.yRadius=this.yRadius,e.aStartAngle=this.aStartAngle,e.aEndAngle=this.aEndAngle,e.aClockwise=this.aClockwise,e.aRotation=this.aRotation,e}fromJSON(e){return super.fromJSON(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}}es.prototype.isEllipseCurve=!0;class Si extends es{constructor(e,t,n,s,o,i){super(e,t,n,n,s,o,i),this.type="ArcCurve"}}Si.prototype.isArcCurve=!0;function Ai(){let e=0,t=0,n=0,s=0;function o(o,i,a,r){e=o,t=a,n=-3*o+3*i-2*a-r,s=2*o-2*i+a+r}return{initCatmullRom:function(e,t,n,s,i){o(t,n,i*(n-e),i*(s-t))},initNonuniformCatmullRom:function(e,t,n,s,i,a,r){let c=(t-e)/i-(n-e)/(i+a)+(n-t)/a,l=(n-t)/a-(s-t)/(a+r)+(s-n)/r;c*=a,l*=a,o(t,n,c,l)},calc:function(o){const i=o*o,a=i*o;return e+t*o+n*i+s*a}}}const eo=new t,Ei=new Ai,Ci=new Ai,Oi=new Ai;class di extends V{constructor(e=[],t=!1,n="centripetal",s=.5){super(),this.type="CatmullRomCurve3",this.points=e,this.closed=t,this.curveType=n,this.tension=s}getPoint(e,n=new t){const u=n,i=this.points,s=i.length,h=(s-(this.closed?0:1))*e;let o=Math.floor(h),d=h-o;this.closed?o+=o>0?0:(Math.floor(Math.abs(o)/s)+1)*s:d===0&&o===s-1&&(o=s-2,d=1);let a,r;this.closed||o>0?a=i[(o-1)%s]:(eo.subVectors(i[0],i[1]).add(i[0]),a=eo);const c=i[o%s],l=i[(o+1)%s];if(this.closed||o+2<s?r=i[(o+2)%s]:(eo.subVectors(i[s-1],i[s-2]).add(i[s-1]),r=eo),this.curveType==="centripetal"||this.curveType==="chordal"){const s=this.curveType==="chordal"?.5:.25;let t=Math.pow(a.distanceToSquared(c),s),e=Math.pow(c.distanceToSquared(l),s),n=Math.pow(l.distanceToSquared(r),s);e<1e-4&&(e=1),t<1e-4&&(t=e),n<1e-4&&(n=e),Ei.initNonuniformCatmullRom(a.x,c.x,l.x,r.x,t,e,n),Ci.initNonuniformCatmullRom(a.y,c.y,l.y,r.y,t,e,n),Oi.initNonuniformCatmullRom(a.z,c.z,l.z,r.z,t,e,n)}else this.curveType==="catmullrom"&&(Ei.initCatmullRom(a.x,c.x,l.x,r.x,this.tension),Ci.initCatmullRom(a.y,c.y,l.y,r.y,this.tension),Oi.initCatmullRom(a.z,c.z,l.z,r.z,this.tension));return u.set(Ei.calc(d),Ci.calc(d),Oi.calc(d)),u}copy(e){super.copy(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const s=e.points[t];this.points.push(s.clone())}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}toJSON(){const e=super.toJSON();e.points=[];for(let t=0,n=this.points.length;t<n;t++){const s=this.points[t];e.points.push(s.toArray())}return e.closed=this.closed,e.curveType=this.curveType,e.tension=this.tension,e}fromJSON(e){super.fromJSON(e),this.points=[];for(let n=0,s=e.points.length;n<s;n++){const o=e.points[n];this.points.push((new t).fromArray(o))}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}}di.prototype.isCatmullRomCurve3=!0;function au(e,t,n,s,o){const i=(s-t)*.5,a=(o-n)*.5,r=e*e,c=e*r;return(2*n-2*s+i+a)*c+(-3*n+3*s-2*i-a)*r+i*e+n}function H1(e,t){const n=1-e;return n*n*t}function I1(e,t){return 2*(1-e)*e*t}function B1(e,t){return e*e*t}function Yn(e,t,n,s){return H1(e,t)+I1(e,n)+B1(e,s)}function $1(e,t){const n=1-e;return n*n*n*t}function W1(e,t){const n=1-e;return 3*n*n*e*t}function U1(e,t){return 3*(1-e)*e*e*t}function K1(e,t){return e*e*e*t}function Kn(e,t,n,s,o){return $1(e,t)+W1(e,n)+U1(e,s)+K1(e,o)}class po extends V{constructor(e=new n,t=new n,s=new n,o=new n){super(),this.type="CubicBezierCurve",this.v0=e,this.v1=t,this.v2=s,this.v3=o}getPoint(e,t=new n){const s=t,o=this.v0,i=this.v1,a=this.v2,r=this.v3;return s.set(Kn(e,o.x,i.x,a.x,r.x),Kn(e,o.y,i.y,a.y,r.y)),s}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}}po.prototype.isCubicBezierCurve=!0;class ci extends V{constructor(e=new t,n=new t,s=new t,o=new t){super(),this.type="CubicBezierCurve3",this.v0=e,this.v1=n,this.v2=s,this.v3=o}getPoint(e,n=new t){const r=n,s=this.v0,o=this.v1,i=this.v2,a=this.v3;return r.set(Kn(e,s.x,o.x,i.x,a.x),Kn(e,s.y,o.y,i.y,a.y),Kn(e,s.z,o.z,i.z,a.z)),r}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}}ci.prototype.isCubicBezierCurve3=!0;class Un extends V{constructor(e=new n,t=new n){super(),this.type="LineCurve",this.v1=e,this.v2=t}getPoint(e,t=new n){const s=t;return e===1?s.copy(this.v2):(s.copy(this.v2).sub(this.v1),s.multiplyScalar(e).add(this.v1)),s}getPointAt(e,t){return this.getPoint(e,t)}getTangent(e,t){const s=t||new n;return s.copy(this.v2).sub(this.v1).normalize(),s}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}Un.prototype.isLineCurve=!0;class Zd extends V{constructor(e=new t,n=new t){super(),this.type="LineCurve3",this.isLineCurve3=!0,this.v1=e,this.v2=n}getPoint(e,n=new t){const s=n;return e===1?s.copy(this.v2):(s.copy(this.v2).sub(this.v1),s.multiplyScalar(e).add(this.v1)),s}getPointAt(e,t){return this.getPoint(e,t)}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class go extends V{constructor(e=new n,t=new n,s=new n){super(),this.type="QuadraticBezierCurve",this.v0=e,this.v1=t,this.v2=s}getPoint(e,t=new n){const s=t,o=this.v0,i=this.v1,a=this.v2;return s.set(Yn(e,o.x,i.x,a.x),Yn(e,o.y,i.y,a.y)),s}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}go.prototype.isQuadraticBezierCurve=!0;class vo extends V{constructor(e=new t,n=new t,s=new t){super(),this.type="QuadraticBezierCurve3",this.v0=e,this.v1=n,this.v2=s}getPoint(e,n=new t){const a=n,s=this.v0,o=this.v1,i=this.v2;return a.set(Yn(e,s.x,o.x,i.x),Yn(e,s.y,o.y,i.y),Yn(e,s.z,o.z,i.z)),a}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}vo.prototype.isQuadraticBezierCurve3=!0;class bo extends V{constructor(e=[]){super(),this.type="SplineCurve",this.points=e}getPoint(e,t=new n){const i=t,s=this.points,a=(s.length-1)*e,o=Math.floor(a),r=a-o,c=s[o===0?o:o-1],l=s[o],d=s[o>s.length-2?s.length-1:o+1],u=s[o>s.length-3?s.length-1:o+2];return i.set(au(r,c.x,l.x,d.x,u.x),au(r,c.y,l.y,d.y,u.y)),i}copy(e){super.copy(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const s=e.points[t];this.points.push(s.clone())}return this}toJSON(){const e=super.toJSON();e.points=[];for(let t=0,n=this.points.length;t<n;t++){const s=this.points[t];e.points.push(s.toArray())}return e}fromJSON(e){super.fromJSON(e),this.points=[];for(let t=0,s=e.points.length;t<s;t++){const o=e.points[t];this.points.push((new n).fromArray(o))}return this}}bo.prototype.isSplineCurve=!0,jo=Object.freeze({__proto__:null,ArcCurve:Si,CatmullRomCurve3:di,CubicBezierCurve:po,CubicBezierCurve3:ci,EllipseCurve:es,LineCurve:Un,LineCurve3:Zd,QuadraticBezierCurve:go,QuadraticBezierCurve3:vo,SplineCurve:bo});class Xd extends V{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(e){this.curves.push(e)}closePath(){const e=this.curves[0].getPoint(0),t=this.curves[this.curves.length-1].getPoint(1);e.equals(t)||this.curves.push(new Un(t,e))}getPoint(e,t){const o=e*this.getLength(),s=this.getCurveLengths();let n=0;for(;n<s.length;){if(s[n]>=o){const a=s[n]-o,e=this.curves[n],i=e.getLength(),r=i===0?0:1-a/i;return e.getPointAt(r,t)}n++}return null}getLength(){const e=this.getCurveLengths();return e[e.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const e=[];let t=0;for(let n=0,s=this.curves.length;n<s;n++)t+=this.curves[n].getLength(),e.push(t);return this.cacheLengths=e,e}getSpacedPoints(e=40){const t=[];for(let n=0;n<=e;n++)t.push(this.getPoint(n/e));return this.autoClose&&t.push(t[0]),t}getPoints(e=12){const t=[];let n;for(let o=0,i=this.curves;o<i.length;o++){const s=i[o],r=s.isEllipseCurve?e*2:s.isLineCurve||s.isLineCurve3?1:s.isSplineCurve?e*s.points.length:e,a=s.getPoints(r);for(let e=0;e<a.length;e++){const s=a[e];if(n&&n.equals(s))continue;t.push(s),n=s}}return this.autoClose&&t.length>1&&!t[t.length-1].equals(t[0])&&t.push(t[0]),t}copy(e){super.copy(e),this.curves=[];for(let t=0,n=e.curves.length;t<n;t++){const s=e.curves[t];this.curves.push(s.clone())}return this.autoClose=e.autoClose,this}toJSON(){const e=super.toJSON();e.autoClose=this.autoClose,e.curves=[];for(let t=0,n=this.curves.length;t<n;t++){const s=this.curves[t];e.curves.push(s.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.autoClose=e.autoClose,this.curves=[];for(let t=0,s=e.curves.length;t<s;t++){const n=e.curves[t];this.curves.push((new jo[n.type]).fromJSON(n))}return this}}class Rt extends Xd{constructor(e){super(),this.type="Path",this.currentPoint=new n,e&&this.setFromPoints(e)}setFromPoints(e){this.moveTo(e[0].x,e[0].y);for(let t=1,n=e.length;t<n;t++)this.lineTo(e[t].x,e[t].y);return this}moveTo(e,t){return this.currentPoint.set(e,t),this}lineTo(e,t){const s=new Un(this.currentPoint.clone(),new n(e,t));return this.curves.push(s),this.currentPoint.set(e,t),this}quadraticCurveTo(e,t,s,o){const i=new go(this.currentPoint.clone(),new n(e,t),new n(s,o));return this.curves.push(i),this.currentPoint.set(s,o),this}bezierCurveTo(e,t,s,o,i,a){const r=new po(this.currentPoint.clone(),new n(e,t),new n(s,o),new n(i,a));return this.curves.push(r),this.currentPoint.set(i,a),this}splineThru(e){const t=[this.currentPoint.clone()].concat(e),n=new bo(t);return this.curves.push(n),this.currentPoint.copy(e[e.length-1]),this}arc(e,t,n,s,o,i){const a=this.currentPoint.x,r=this.currentPoint.y;return this.absarc(e+a,t+r,n,s,o,i),this}absarc(e,t,n,s,o,i){return this.absellipse(e,t,n,n,s,o,i),this}ellipse(e,t,n,s,o,i,a,r){const c=this.currentPoint.x,l=this.currentPoint.y;return this.absellipse(e+c,t+l,n,s,o,i,a,r),this}absellipse(e,t,n,s,o,i,a,r){const c=new es(e,t,n,s,o,i,a,r);if(this.curves.length>0){const e=c.getPoint(0);e.equals(this.currentPoint)||this.lineTo(e.x,e.y)}this.curves.push(c);const l=c.getPoint(1);return this.currentPoint.copy(l),this}copy(e){return super.copy(e),this.currentPoint.copy(e.currentPoint),this}toJSON(){const e=super.toJSON();return e.currentPoint=this.currentPoint.toArray(),e}fromJSON(e){return super.fromJSON(e),this.currentPoint.fromArray(e.currentPoint),this}}class Ht extends r{constructor(e=[new n(0,.5),new n(.5,0),new n(0,-.5)],s=12,o=0,a=Math.PI*2){super(),this.type="LatheGeometry",this.parameters={points:e,segments:s,phiStart:o,phiLength:a},s=Math.floor(s),a=b(a,0,Math.PI*2);const f=[],j=[],g=[],d=[],p=[],y=1/s,l=new t,h=new n,r=new t,v=new t,c=new t;let m=0,u=0;for(let t=0;t<=e.length-1;t++)switch(t){case 0:m=e[t+1].x-e[t].x,u=e[t+1].y-e[t].y,r.x=u*1,r.y=-m,r.z=u*0,c.copy(r),r.normalize(),d.push(r.x,r.y,r.z);break;case e.length-1:d.push(c.x,c.y,c.z);break;default:m=e[t+1].x-e[t].x,u=e[t+1].y-e[t].y,r.x=u*1,r.y=-m,r.z=u*0,v.copy(r),r.x+=c.x,r.y+=c.y,r.z+=c.z,r.normalize(),d.push(r.x,r.y,r.z),c.copy(v)}for(let t=0;t<=s;t++){const n=o+t*y*a,i=Math.sin(n),r=Math.cos(n);for(let n=0;n<=e.length-1;n++){l.x=e[n].x*i,l.y=e[n].y,l.z=e[n].x*r,j.push(l.x,l.y,l.z),h.x=t/s,h.y=n/(e.length-1),g.push(h.x,h.y);const o=d[3*n+0]*i,a=d[3*n+1],c=d[3*n+0]*r;p.push(o,a,c)}}for(let t=0;t<s;t++)for(let s=0;s<e.length-1;s++){const n=s+t*e.length,a=n,o=n+e.length,r=n+e.length+1,i=n+1;f.push(a,o,i),f.push(r,i,o)}this.setIndex(f),this.setAttribute("position",new i(j,3)),this.setAttribute("uv",new i(g,2)),this.setAttribute("normal",new i(p,3))}static fromJSON(e){return new Ht(e.points,e.segments,e.phiStart,e.phiLength)}}class In extends Ht{constructor(e=1,t=1,n=4,s=8){const o=new Rt;o.absarc(0,-t/2,e,Math.PI*1.5,0),o.absarc(0,t/2,e,0,Math.PI*.5),super(o.getPoints(n),s),this.type="CapsuleGeometry",this.parameters={radius:e,height:t,capSegments:n,radialSegments:s}}static fromJSON(e){return new In(e.radius,e.length,e.capSegments,e.radialSegments)}}class Hn extends r{constructor(e=1,s=8,o=0,a=Math.PI*2){super(),this.type="CircleGeometry",this.parameters={radius:e,segments:s,thetaStart:o,thetaLength:a},s=Math.max(3,s);const h=[],r=[],d=[],u=[],c=new t,l=new n;r.push(0,0,0),d.push(0,0,1),u.push(.5,.5);for(let t=0,n=3;t<=s;t++,n+=3){const i=o+t/s*a;c.x=e*Math.cos(i),c.y=e*Math.sin(i),r.push(c.x,c.y,c.z),d.push(0,0,1),l.x=(r[n]/e+1)/2,l.y=(r[n+1]/e+1)/2,u.push(l.x,l.y)}for(let e=1;e<=s;e++)h.push(e,e+1,0);this.setIndex(h),this.setAttribute("position",new i(r,3)),this.setAttribute("normal",new i(d,3)),this.setAttribute("uv",new i(u,2))}static fromJSON(e){return new Hn(e.radius,e.segments,e.thetaStart,e.thetaLength)}}class ot extends r{constructor(e=1,s=1,o=1,a=8,r=1,c=!1,l=0,d=Math.PI*2){super(),this.type="CylinderGeometry",this.parameters={radiusTop:e,radiusBottom:s,height:o,radialSegments:a,heightSegments:r,openEnded:c,thetaStart:l,thetaLength:d};const j=this;a=Math.floor(a),r=Math.floor(r);const u=[],f=[],p=[],g=[];let h=0;const m=[],b=o/2;let v=0;_(),c===!1&&(e>0&&y(!0),s>0&&y(!1)),this.setIndex(u),this.setAttribute("position",new i(f,3)),this.setAttribute("normal",new i(p,3)),this.setAttribute("uv",new i(g,2));function _(){const i=new t,n=new t;let c=0;const y=(s-e)/o;for(let t=0;t<=r;t++){const u=[],c=t/r,v=c*(s-e)+e;for(let e=0;e<=a;e++){const t=e/a,s=t*d+l,r=Math.sin(s),m=Math.cos(s);n.x=v*r,n.y=-c*o+b,n.z=v*m,f.push(n.x,n.y,n.z),i.set(r,y,m).normalize(),p.push(i.x,i.y,i.z),g.push(t,1-c),u.push(h++)}m.push(u)}for(let e=0;e<a;e++)for(let t=0;t<r;t++){const o=m[t][e],n=m[t+1][e],i=m[t+1][e+1],s=m[t][e+1];u.push(o,n,s),u.push(n,i,s),c+=6}j.addGroup(v,c,0),v+=c}function y(o){const _=h,c=new n,i=new t;let m=0;const y=o===!0?e:s,r=o===!0?1:-1;for(let e=1;e<=a;e++)f.push(0,b*r,0),p.push(0,r,0),g.push(.5,.5),h++;const w=h;for(let e=0;e<=a;e++){const o=e/a,t=o*d+l,n=Math.cos(t),s=Math.sin(t);i.x=y*s,i.y=b*r,i.z=y*n,f.push(i.x,i.y,i.z),p.push(0,r,0),c.x=n*.5+.5,c.y=s*.5*r+.5,g.push(c.x,c.y),h++}for(let e=0;e<a;e++){const n=_+e,t=w+e;o===!0?u.push(t,t+1,n):u.push(t+1,t,n),m+=3}j.addGroup(v,m,o===!0?1:2),v+=m}}static fromJSON(e){return new ot(e.radiusTop,e.radiusBottom,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class Pn extends ot{constructor(e=1,t=1,n=8,s=1,o=!1,i=0,a=Math.PI*2){super(0,e,t,n,s,o,i,a),this.type="ConeGeometry",this.parameters={radius:e,height:t,radialSegments:n,heightSegments:s,openEnded:o,thetaStart:i,thetaLength:a}}static fromJSON(e){return new Pn(e.radius,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class pe extends r{constructor(e=[],s=[],o=1,a=0){super(),this.type="PolyhedronGeometry",this.parameters={vertices:e,indices:s,radius:o,detail:a};const r=[],c=[];b(a),p(o),f(),this.setAttribute("position",new i(r,3)),this.setAttribute("normal",new i(r.slice(),3)),this.setAttribute("uv",new i(c,2)),a===0?this.computeVertexNormals():this.normalizeNormals();function b(e){const n=new t,o=new t,i=new t;for(let t=0;t<s.length;t+=3)u(s[t+0],n),u(s[t+1],o),u(s[t+2],i),v(n,o,i,e)}function v(e,t,n,s){const i=s+1,o=[];for(let s=0;s<=i;s++){o[s]=[];const a=e.clone().lerp(n,s/i),c=t.clone().lerp(n,s/i),r=i-s;for(let e=0;e<=r;e++)e===0&&s===i?o[s][e]=a:o[s][e]=a.clone().lerp(c,e/r)}for(let e=0;e<i;e++)for(let n=0;n<2*(i-e)-1;n++){const t=Math.floor(n/2);n%2===0?(l(o[e][t+1]),l(o[e+1][t]),l(o[e][t])):(l(o[e][t+1]),l(o[e+1][t+1]),l(o[e+1][t]))}}function p(e){const n=new t;for(let t=0;t<r.length;t+=3)n.x=r[t+0],n.y=r[t+1],n.z=r[t+2],n.normalize().multiplyScalar(e),r[t+0]=n.x,r[t+1]=n.y,r[t+2]=n.z}function f(){const e=new t;for(let t=0;t<r.length;t+=3){e.x=r[t+0],e.y=r[t+1],e.z=r[t+2];const n=h(e)/2/Math.PI+.5,s=j(e)/Math.PI+.5;c.push(n,1-s)}g(),m()}function m(){for(let e=0;e<c.length;e+=6){const t=c[e+0],n=c[e+2],s=c[e+4],o=Math.max(t,n,s),i=Math.min(t,n,s);o>.9&&i<.1&&(t<.2&&(c[e+0]+=1),n<.2&&(c[e+2]+=1),s<.2&&(c[e+4]+=1))}}function l(e){r.push(e.x,e.y,e.z)}function u(t,n){const s=t*3;n.x=e[s+0],n.y=e[s+1],n.z=e[s+2]}function g(){const e=new t,s=new t,o=new t,i=new t,a=new n,l=new n,u=new n;for(let t=0,n=0;t<r.length;t+=9,n+=6){e.set(r[t+0],r[t+1],r[t+2]),s.set(r[t+3],r[t+4],r[t+5]),o.set(r[t+6],r[t+7],r[t+8]),a.set(c[n+0],c[n+1]),l.set(c[n+2],c[n+3]),u.set(c[n+4],c[n+5]),i.copy(e).add(s).add(o).divideScalar(3);const m=h(i);d(a,n+0,e,m),d(l,n+2,s,m),d(u,n+4,o,m)}}function d(e,t,n,s){s<0&&e.x===1&&(c[t]=e.x-1),n.x===0&&n.z===0&&(c[t]=s/2/Math.PI+.5)}function h(e){return Math.atan2(e.z,-e.x)}function j(e){return Math.atan2(-e.y,Math.sqrt(e.x*e.x+e.z*e.z))}}static fromJSON(e){return new pe(e.vertices,e.indices,e.radius,e.details)}}class Rn extends pe{constructor(e=1,t=0){const n=(1+Math.sqrt(5))/2,s=1/n,o=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-s,-n,0,-s,n,0,s,-n,0,s,n,-s,-n,0,-s,n,0,s,-n,0,s,n,0,-n,0,-s,n,0,-s,-n,0,s,n,0,s],i=[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9];super(o,i,e,t),this.type="DodecahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new Rn(e.radius,e.detail)}}const _o=new t,wo=new t,Qo=new t,cs=new w;class Go extends r{constructor(e=null,t=1){if(super(),this.type="EdgesGeometry",this.parameters={geometry:e,thresholdAngle:t},e!==null){const u=4,o=Math.pow(10,u),h=Math.cos(Ye*t),r=e.getIndex(),c=e.getAttribute("position"),m=r?r.count:c.count,n=[0,0,0],d=["a","b","c"],s=new Array(3),a={},l=[];for(let e=0;e<m;e+=3){r?(n[0]=r.getX(e),n[1]=r.getX(e+1),n[2]=r.getX(e+2)):(n[0]=e,n[1]=e+1,n[2]=e+2);const{a:t,b:i,c:u}=cs;if(t.fromBufferAttribute(c,n[0]),i.fromBufferAttribute(c,n[1]),u.fromBufferAttribute(c,n[2]),cs.getNormal(Qo),s[0]=`${Math.round(t.x*o)},${Math.round(t.y*o)},${Math.round(t.z*o)}`,s[1]=`${Math.round(i.x*o)},${Math.round(i.y*o)},${Math.round(i.z*o)}`,s[2]=`${Math.round(u.x*o)},${Math.round(u.y*o)},${Math.round(u.z*o)}`,s[0]===s[1]||s[1]===s[2]||s[2]===s[0])continue;for(let e=0;e<3;e++){const o=(e+1)%3,c=s[e],u=s[o],i=cs[d[e]],r=cs[d[o]],m=`${c}_${u}`,t=`${u}_${c}`;t in a&&a[t]?(Qo.dot(a[t].normal)<=h&&(l.push(i.x,i.y,i.z),l.push(r.x,r.y,r.z)),a[t]=null):m in a||(a[m]={index0:n[e],index1:n[o],normal:Qo.clone()})}}for(const e in a)if(a[e]){const{index0:t,index1:n}=a[e];_o.fromBufferAttribute(c,t),wo.fromBufferAttribute(c,n),l.push(_o.x,_o.y,_o.z),l.push(wo.x,wo.y,wo.z)}this.setAttribute("position",new i(l,3))}}}class de extends Rt{constructor(e){super(e),this.uuid=$(),this.type="Shape",this.holes=[]}getPointsHoles(e){const t=[];for(let n=0,s=this.holes.length;n<s;n++)t[n]=this.holes[n].getPoints(e);return t}extractPoints(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}}copy(e){super.copy(e),this.holes=[];for(let t=0,n=e.holes.length;t<n;t++){const s=e.holes[t];this.holes.push(s.clone())}return this}toJSON(){const e=super.toJSON();e.uuid=this.uuid,e.holes=[];for(let t=0,n=this.holes.length;t<n;t++){const s=this.holes[t];e.holes.push(s.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.uuid=e.uuid,this.holes=[];for(let t=0,n=e.holes.length;t<n;t++){const s=e.holes[t];this.holes.push((new Rt).fromJSON(s))}return this}}const v4={triangulate:function(e,t,n=2){const h=t&&t.length,m=h?t[0]*n:e.length;let s=$d(e,0,m,n,!0);const u=[];if(!s||s.next===s.prev)return u;let o,i,l,d,a,r,c;if(h&&(s=C4(e,t,s,n)),e.length>80*n){o=l=e[0],i=d=e[1];for(let t=n;t<m;t+=n)a=e[t],r=e[t+1],a<o&&(o=a),r<i&&(i=r),a>l&&(l=a),r>d&&(d=r);c=Math.max(l-o,d-i),c=c!==0?1/c:0}return En(s,u,n,o,i,c),u}};function $d(e,t,n,s,o){let i,a;if(o===Y4(e,t,n,s)>0)for(i=t;i<n;i+=s)a=Ad(i,e[i],e[i+1],a);else for(i=n-s;i>=t;i-=s)a=Ad(i,e[i],e[i+1],a);return a&&Ao(a,a.next)&&(_n(a),a=a.next),a}function Se(e,t){if(!e)return e;t||(t=e);let n=e,s;do if(s=!1,!n.steiner&&(Ao(n,n.next)||g(n.prev,n,n.next)===0)){if(_n(n),n=t=n.prev,n===n.next)break;s=!0}else n=n.next;while(s||n!==t)return t}function En(e,t,n,s,o,i,a){if(!e)return;!a&&i&&M4(e,s,o,i);let c=e,l,r;for(;e.prev!==e.next;){if(l=e.prev,r=e.next,i?w4(e,s,o,i):_4(e)){t.push(l.i/n),t.push(e.i/n),t.push(r.i/n),_n(e),e=r.next,c=r.next;continue}if(e=r,e===c){a?a===1?(e=O4(Se(e),t,n),En(e,t,n,s,o,i,2)):a===2&&x4(e,t,n,s,o,i):En(Se(e),t,n,s,o,i,1);break}}}function _4(e){const n=e.prev,s=e,o=e.next;if(g(n,s,o)>=0)return!1;let t=e.next.next;for(;t!==e.prev;){if(sn(n.x,n.y,s.x,s.y,o.x,o.y,t.x,t.y)&&g(t.prev,t,t.next)>=0)return!1;t=t.next}return!0}function w4(e,t,n,s){const r=e.prev,c=e,o=e.next;if(g(r,c,o)>=0)return!1;const u=r.x<c.x?r.x<o.x?r.x:o.x:c.x<o.x?c.x:o.x,h=r.y<c.y?r.y<o.y?r.y:o.y:c.y<o.y?c.y:o.y,m=r.x>c.x?r.x>o.x?r.x:o.x:c.x>o.x?c.x:o.x,f=r.y>c.y?r.y>o.y?r.y:o.y:c.y>o.y?c.y:o.y,l=Wo(u,h,t,n,s),d=Wo(m,f,t,n,s);let i=e.prevZ,a=e.nextZ;for(;i&&i.z>=l&&a&&a.z<=d;){if(i!==e.prev&&i!==e.next&&sn(r.x,r.y,c.x,c.y,o.x,o.y,i.x,i.y)&&g(i.prev,i,i.next)>=0)return!1;if(i=i.prevZ,a!==e.prev&&a!==e.next&&sn(r.x,r.y,c.x,c.y,o.x,o.y,a.x,a.y)&&g(a.prev,a,a.next)>=0)return!1;a=a.nextZ}for(;i&&i.z>=l;){if(i!==e.prev&&i!==e.next&&sn(r.x,r.y,c.x,c.y,o.x,o.y,i.x,i.y)&&g(i.prev,i,i.next)>=0)return!1;i=i.prevZ}for(;a&&a.z<=d;){if(a!==e.prev&&a!==e.next&&sn(r.x,r.y,c.x,c.y,o.x,o.y,a.x,a.y)&&g(a.prev,a,a.next)>=0)return!1;a=a.nextZ}return!0}function O4(e,t,n){let s=e;do{const i=s.prev,o=s.next.next;!Ao(i,o)&&Ld(i,s,s.next,o)&&Cn(i,o)&&Cn(o,i)&&(t.push(i.i/n),t.push(s.i/n),t.push(o.i/n),_n(s),_n(s.next),s=e=o),s=s.next}while(s!==e)return Se(s)}function x4(e,t,n,s,o,i){let a=e;do{let e=a.next.next;for(;e!==a.prev;){if(a.i!==e.i&&N4(a,e)){let r=Md(a,e);a=Se(a,a.next),r=Se(r,r.next),En(a,t,n,s,o,i),En(r,t,n,s,o,i);return}e=e.next}a=a.next}while(a!==e)}function C4(e,t,n,s){const a=[];let o,r,c,l,i;for(o=0,r=t.length;o<r;o++)c=t[o]*s,l=o<r-1?t[o+1]*s:e.length,i=$d(e,c,l,s,!1),i===i.next&&(i.steiner=!0),a.push(z4(i));a.sort(E4);for(o=0;o<a.length;o++)k4(a[o],n),n=Se(n,n.next);return n}function E4(e,t){return e.x-t.x}function k4(e,t){if(t=A4(e,t),t){const n=Md(t,e);Se(t,t.next),Se(n,n.next)}}function A4(e,t){let n=t;const i=e.x,o=e.y;let a=-(1/0),s;do{if(o<=n.y&&o>=n.next.y&&n.next.y!==n.y){const e=n.x+(o-n.y)*(n.next.x-n.x)/(n.next.y-n.y);if(e<=i&&e>a){if(a=e,e===i){if(o===n.y)return n;if(o===n.next.y)return n.next}s=n.x<n.next.x?n:n.next}}n=n.next}while(n!==t)if(!s)return null;if(i===a)return s;const u=s,d=s.x,c=s.y;let l=1/0,r;n=s;do i>=n.x&&n.x>=d&&i!==n.x&&sn(o<c?i:a,o,d,c,o<c?a:i,o,n.x,n.y)&&(r=Math.abs(o-n.y)/(i-n.x),Cn(n,e)&&(r<l||r===l&&(n.x>s.x||n.x===s.x&&S4(s,n)))&&(s=n,l=r)),n=n.next;while(n!==u)return s}function S4(e,t){return g(e.prev,e,t.prev)<0&&g(t.next,e,e.next)<0}function M4(e,t,n,s){let o=e;do o.z===null&&(o.z=Wo(o.x,o.y,t,n,s)),o.prevZ=o.prev,o.nextZ=o.next,o=o.next;while(o!==e)o.prevZ.nextZ=null,o.prevZ=null,F4(o)}function F4(e){let r,n,t,s,o,c,i,a,l=1;do{for(n=e,e=null,o=null,c=0;n;){c++,t=n,i=0;for(r=0;r<l;r++)if(i++,t=t.nextZ,!t)break;for(a=l;i>0||a>0&&t;)i!==0&&(a===0||!t||n.z<=t.z)?(s=n,n=n.nextZ,i--):(s=t,t=t.nextZ,a--),o?o.nextZ=s:e=s,s.prevZ=o,o=s;n=t}o.nextZ=null,l*=2}while(c>1)return e}function Wo(e,t,n,s,o){return e=32767*(e-n)*o,t=32767*(t-s)*o,e=(e|e<<8)&16711935,e=(e|e<<4)&252645135,e=(e|e<<2)&858993459,e=(e|e<<1)&1431655765,t=(t|t<<8)&16711935,t=(t|t<<4)&252645135,t=(t|t<<2)&858993459,t=(t|t<<1)&1431655765,e|t<<1}function z4(e){let t=e,n=e;do(t.x<n.x||t.x===n.x&&t.y<n.y)&&(n=t),t=t.next;while(t!==e)return n}function sn(e,t,n,s,o,i,a,r){return(o-a)*(t-r)-(e-a)*(i-r)>=0&&(e-a)*(s-r)-(n-a)*(t-r)>=0&&(n-a)*(i-r)-(o-a)*(s-r)>=0}function N4(e,t){return e.next.i!==t.i&&e.prev.i!==t.i&&!B4(e,t)&&(Cn(e,t)&&Cn(t,e)&&$4(e,t)&&(g(e.prev,e,t.prev)||g(e,t.prev,t))||Ao(e,t)&&g(e.prev,e,e.next)>0&&g(t.prev,t,t.next)>0)}function g(e,t,n){return(t.y-e.y)*(n.x-t.x)-(t.x-e.x)*(n.y-t.y)}function Ao(e,t){return e.x===t.x&&e.y===t.y}function Ld(e,t,n,s){const o=Fo(g(e,t,n)),i=Fo(g(e,t,s)),a=Fo(g(n,s,e)),r=Fo(g(n,s,t));return o!==i&&a!==r||!!(o===0&&So(e,n,t))||!!(i===0&&So(e,s,t))||!!(a===0&&So(n,e,s))||!!(r===0&&So(n,t,s))}function So(e,t,n){return t.x<=Math.max(e.x,n.x)&&t.x>=Math.min(e.x,n.x)&&t.y<=Math.max(e.y,n.y)&&t.y>=Math.min(e.y,n.y)}function Fo(e){return e>0?1:e<0?-1:0}function B4(e,t){let n=e;do{if(n.i!==e.i&&n.next.i!==e.i&&n.i!==t.i&&n.next.i!==t.i&&Ld(n,n.next,e,t))return!0;n=n.next}while(n!==e)return!1}function Cn(e,t){return g(e.prev,e,e.next)<0?g(e,t,e.next)>=0&&g(e,e.prev,t)>=0:g(e,t,e.prev)<0||g(e,e.next,t)<0}function $4(e,t){let n=e,s=!1;const i=(e.x+t.x)/2,o=(e.y+t.y)/2;do n.y>o!==n.next.y>o&&n.next.y!==n.y&&i<(n.next.x-n.x)*(o-n.y)/(n.next.y-n.y)+n.x&&(s=!s),n=n.next;while(n!==e)return s}function Md(e,t){const s=new Io(e.i,e.x,e.y),n=new Io(t.i,t.x,t.y),o=e.next,i=t.prev;return e.next=t,t.prev=e,s.next=o,o.prev=s,n.next=s,s.prev=n,i.next=n,n.prev=i,n}function Ad(e,t,n,s){const o=new Io(e,t,n);return s?(o.next=s.next,o.prev=s,s.next.prev=o,s.next=o):(o.prev=o,o.next=o),o}function _n(e){e.next.prev=e.prev,e.prev.next=e.next,e.prevZ&&(e.prevZ.nextZ=e.nextZ),e.nextZ&&(e.nextZ.prevZ=e.prevZ)}function Io(e,t,n){this.i=e,this.x=t,this.y=n,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function Y4(e,t,n,s){let o=0;for(let i=t,a=n-s;i<n;i+=s)o+=(e[a]-e[i])*(e[i+1]+e[a+1]),a=i;return o}class Ce{static area(e){const t=e.length;let n=0;for(let o=t-1,s=0;s<t;o=s++)n+=e[o].x*e[s].y-e[s].x*e[o].y;return n*.5}static isClockWise(e){return Ce.area(e)<0}static triangulateShape(e,t){const n=[],s=[],o=[];xd(e),yd(n,e);let i=e.length;t.forEach(xd);for(let e=0;e<t.length;e++)s.push(i),i+=t[e].length,yd(n,t[e]);const a=v4.triangulate(n,s);for(let e=0;e<a.length;e+=3)o.push(a.slice(e,e+3));return o}}function xd(e){const t=e.length;t>2&&e[t-1].equals(e[0])&&e.pop()}function yd(e,t){for(let n=0;n<t.length;n++)e.push(t[n].x),e.push(t[n].y)}class me extends r{constructor(e=new de([new n(.5,.5),new n(-.5,.5),new n(-.5,-.5),new n(.5,-.5)]),s={}){super(),this.type="ExtrudeGeometry",this.parameters={shapes:e,options:s},e=Array.isArray(e)?e:[e];const a=this,o=[],r=[];for(let t=0,n=e.length;t<n;t++){const s=e[t];c(s)}this.setAttribute("position",new i(o,3)),this.setAttribute("uv",new i(r,2)),this.computeVertexNormals();function c(e){const b=[],K=s.curveSegments!==void 0?s.curveSegments:12,l=s.steps!==void 0?s.steps:1;let D=s.depth!==void 0?s.depth:1,_=s.bevelEnabled===void 0||s.bevelEnabled,M=s.bevelThickness!==void 0?s.bevelThickness:.2,S=s.bevelSize!==void 0?s.bevelSize:M-.1,A=s.bevelOffset!==void 0?s.bevelOffset:0,v=s.bevelSegments!==void 0?s.bevelSegments:3;const N=s.extrudePath,R=s.UVGenerator!==void 0?s.UVGenerator:J4;s.amount!==void 0&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),D=s.amount);let C,T=!1,O,x,w,h;N&&(C=N.getSpacedPoints(l),T=!0,_=!1,O=N.computeFrenetFrames(l,!1),x=new t,w=new t,h=new t),_||(v=0,M=0,S=0,A=0);const B=e.extractPoints(K);let c=B.shape;const i=B.holes,W=!Ce.isClockWise(c);if(W){c=c.reverse();for(let e=0,n=i.length;e<n;e++){const t=i[e];Ce.isClockWise(t)&&(i[e]=t.reverse())}}const y=Ce.triangulateShape(c,i),d=c;for(let e=0,t=i.length;e<t;e++){const n=i[e];c=c.concat(n)}function j(e,t,n){return t||console.error("THREE.ExtrudeGeometry: vec does not exist"),t.clone().multiplyScalar(n).add(e)}const f=c.length,F=y.length;function I(e,t,s){let r,c,d;const o=e.x-t.x,i=e.y-t.y,a=s.x-e.x,l=s.y-e.y,u=o*o+i*i,h=o*l-i*a;if(Math.abs(h)>Number.EPSILON){const h=Math.sqrt(u),m=Math.sqrt(a*a+l*l),f=t.x-i/h,p=t.y+o/h,b=s.x-l/m,j=s.y+a/m,g=((b-f)*l-(j-p)*a)/(o*l-i*a);r=f+o*g-e.x,c=p+i*g-e.y;const v=r*r+c*c;if(v<=2)return new n(r,c);d=Math.sqrt(v/2)}else{let e=!1;o>Number.EPSILON?a>Number.EPSILON&&(e=!0):o<-Number.EPSILON?a<-Number.EPSILON&&(e=!0):Math.sign(i)===Math.sign(l)&&(e=!0),e?(r=-i,c=o,d=Math.sqrt(u)):(r=o,c=i,d=Math.sqrt(u/2))}return new n(r/d,c/d)}const z=[];for(let e=0,t=d.length,n=t-1,s=e+1;e<t;e++,n++,s++)n===t&&(n=0),s===t&&(s=0),z[e]=I(d[e],d[n],d[s]);const L=[];let g,k=z.concat();for(let t=0,n=i.length;t<n;t++){const e=i[t];g=[];for(let t=0,n=e.length,s=n-1,o=t+1;t<n;t++,s++,o++)s===n&&(s=0),o===n&&(o=0),g[t]=I(e[t],e[s],e[o]);L.push(g),k=k.concat(g)}for(let e=0;e<v;e++){const t=e/v,n=M*Math.cos(t*Math.PI/2),s=S*Math.sin(t*Math.PI/2)+A;for(let e=0,o=d.length;e<o;e++){const t=j(d[e],z[e],s);m(t.x,t.y,-n)}for(let e=0,o=i.length;e<o;e++){const t=i[e];g=L[e];for(let e=0,i=t.length;e<i;e++){const o=j(t[e],g[e],s);m(o.x,o.y,-n)}}}const P=S+A;for(let e=0;e<f;e++){const t=_?j(c[e],k[e],P):c[e];T?(w.copy(O.normals[0]).multiplyScalar(t.x),x.copy(O.binormals[0]).multiplyScalar(t.y),h.copy(C[0]).add(w).add(x),m(h.x,h.y,h.z)):m(t.x,t.y,0)}for(let e=1;e<=l;e++)for(let t=0;t<f;t++){const n=_?j(c[t],k[t],P):c[t];T?(w.copy(O.normals[e]).multiplyScalar(n.x),x.copy(O.binormals[e]).multiplyScalar(n.y),h.copy(C[e]).add(w).add(x),m(h.x,h.y,h.z)):m(n.x,n.y,D/l*e)}for(let e=v-1;e>=0;e--){const n=e/v,t=M*Math.cos(n*Math.PI/2),s=S*Math.sin(n*Math.PI/2)+A;for(let e=0,o=d.length;e<o;e++){const n=j(d[e],z[e],s);m(n.x,n.y,D+t)}for(let e=0,o=i.length;e<o;e++){const n=i[e];g=L[e];for(let e=0,i=n.length;e<i;e++){const o=j(n[e],g[e],s);T?m(o.x,o.y+C[l-1].y,C[l-1].x+t):m(o.x,o.y,D+t)}}}V(),$();function V(){const e=o.length/3;if(_){let t=0,e=f*t;for(let t=0;t<F;t++){const n=y[t];E(n[2]+e,n[1]+e,n[0]+e)}t=l+v*2,e=f*t;for(let t=0;t<F;t++){const n=y[t];E(n[0]+e,n[1]+e,n[2]+e)}}else{for(let e=0;e<F;e++){const t=y[e];E(t[2],t[1],t[0])}for(let e=0;e<F;e++){const t=y[e];E(t[0]+f*l,t[1]+f*l,t[2]+f*l)}}a.addGroup(e,o.length/3-e,0)}function $(){const t=o.length/3;let e=0;H(d,e),e+=d.length;for(let t=0,s=i.length;t<s;t++){const n=i[t];H(n,e),e+=n.length}a.addGroup(t,o.length/3-t,1)}function H(e,t){let n=e.length;for(;--n>=0;){const o=n;let s=n-1;s<0&&(s=e.length-1);for(let e=0,a=l+v*2;e<a;e++){const n=f*e,i=f*(e+1),r=t+o+n,c=t+s+n,d=t+s+i,u=t+o+i;U(r,c,d,u)}}}function m(e,t,n){b.push(e),b.push(t),b.push(n)}function E(e,t,n){p(e),p(t),p(n);const s=o.length/3,i=R.generateTopUV(a,o,s-3,s-2,s-1);u(i[0]),u(i[1]),u(i[2])}function U(e,t,n,s){p(e),p(t),p(s),p(t),p(n),p(s);const r=o.length/3,i=R.generateSideWallUV(a,o,r-6,r-3,r-2,r-1);u(i[0]),u(i[1]),u(i[3]),u(i[1]),u(i[2]),u(i[3])}function p(e){o.push(b[e*3+0]),o.push(b[e*3+1]),o.push(b[e*3+2])}function u(e){r.push(e.x),r.push(e.y)}}}toJSON(){const e=super.toJSON(),t=this.parameters.shapes,n=this.parameters.options;return e0(t,n,e)}static fromJSON(e,t){const s=[];for(let n=0,o=e.shapes.length;n<o;n++){const i=t[e.shapes[n]];s.push(i)}const n=e.options.extrudePath;return n!==void 0&&(e.options.extrudePath=(new jo[n.type]).fromJSON(n)),new me(s,e.options)}}const J4={generateTopUV:function(e,t,s,o,i){const a=t[s*3],r=t[s*3+1],c=t[o*3],l=t[o*3+1],d=t[i*3],u=t[i*3+1];return[new n(a,r),new n(c,l),new n(d,u)]},generateSideWallUV:function(e,t,s,o,i,a){const r=t[s*3],c=t[s*3+1],l=t[s*3+2],d=t[o*3],u=t[o*3+1],h=t[o*3+2],p=t[i*3],g=t[i*3+1],m=t[i*3+2],v=t[a*3],b=t[a*3+1],f=t[a*3+2];return Math.abs(c-u)<Math.abs(r-d)?[new n(r,1-l),new n(d,1-h),new n(p,1-m),new n(v,1-f)]:[new n(c,1-l),new n(u,1-h),new n(g,1-m),new n(b,1-f)]}};function e0(e,t,n){if(n.shapes=[],Array.isArray(e))for(let t=0,s=e.length;t<s;t++){const o=e[t];n.shapes.push(o.uuid)}else n.shapes.push(e.uuid);return t.extrudePath!==void 0&&(n.options.extrudePath=t.extrudePath.toJSON()),n}class vn extends pe{constructor(e=1,t=0){const n=(1+Math.sqrt(5))/2,s=[-1,n,0,1,n,0,-1,-n,0,1,-n,0,0,-1,n,0,1,n,0,-1,-n,0,1,-n,n,0,-1,n,0,1,-n,0,-1,-n,0,1],o=[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];super(s,o,e,t),this.type="IcosahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new vn(e.radius,e.detail)}}class Ut extends pe{constructor(e=1,t=0){const n=[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],s=[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2];super(n,s,e,t),this.type="OctahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new Ut(e.radius,e.detail)}}class fn extends r{constructor(e=.5,s=1,o=8,a=1,r=0,c=Math.PI*2){super(),this.type="RingGeometry",this.parameters={innerRadius:e,outerRadius:s,thetaSegments:o,phiSegments:a,thetaStart:r,thetaLength:c},o=Math.max(3,o),a=Math.max(1,a);const u=[],m=[],f=[],p=[];let h=e;const g=(s-e)/a,l=new t,d=new n;for(let e=0;e<=a;e++){for(let e=0;e<=o;e++){const t=r+e/o*c;l.x=h*Math.cos(t),l.y=h*Math.sin(t),m.push(l.x,l.y,l.z),f.push(0,0,1),d.x=(l.x/s+1)/2,d.y=(l.y/s+1)/2,p.push(d.x,d.y)}h+=g}for(let e=0;e<a;e++){const t=e*(o+1);for(let n=0;n<o;n++){const e=n+t,a=e,s=e+o+1,r=e+o+2,i=e+1;u.push(a,s,i),u.push(s,r,i)}}this.setIndex(u),this.setAttribute("position",new i(m,3)),this.setAttribute("normal",new i(f,3)),this.setAttribute("uv",new i(p,2))}static fromJSON(e){return new fn(e.innerRadius,e.outerRadius,e.thetaSegments,e.phiSegments,e.thetaStart,e.thetaLength)}}class Yt extends r{constructor(e=new de([new n(0,.5),new n(-.5,-.5),new n(.5,-.5)]),t=12){super(),this.type="ShapeGeometry",this.parameters={shapes:e,curveSegments:t};const a=[],o=[],r=[],c=[];let l=0,s=0;if(Array.isArray(e)===!1)d(e);else for(let t=0;t<e.length;t++)d(e[t]),this.addGroup(l,s,t),l+=s,s=0;this.setIndex(a),this.setAttribute("position",new i(o,3)),this.setAttribute("normal",new i(r,3)),this.setAttribute("uv",new i(c,2));function d(e){const l=o.length/3,d=e.extractPoints(t);let n=d.shape;const i=d.holes;Ce.isClockWise(n)===!1&&(n=n.reverse());for(let e=0,n=i.length;e<n;e++){const t=i[e];Ce.isClockWise(t)===!0&&(i[e]=t.reverse())}const u=Ce.triangulateShape(n,i);for(let e=0,t=i.length;e<t;e++){const s=i[e];n=n.concat(s)}for(let t=0,s=n.length;t<s;t++){const e=n[t];o.push(e.x,e.y,0),r.push(0,0,1),c.push(e.x,e.y)}for(let e=0,n=u.length;e<n;e++){const t=u[e],o=t[0]+l,i=t[1]+l,r=t[2]+l;a.push(o,i,r),s+=3}}}toJSON(){const e=super.toJSON(),t=this.parameters.shapes;return i0(t,e)}static fromJSON(e,t){const n=[];for(let s=0,o=e.shapes.length;s<o;s++){const i=t[e.shapes[s]];n.push(i)}return new Yt(n,e.curveSegments)}}function i0(e,t){if(t.shapes=[],Array.isArray(e))for(let n=0,s=e.length;n<s;n++){const o=e[n];t.shapes.push(o.uuid)}else t.shapes.push(e.uuid);return t}class hn extends r{constructor(e=1,n=32,s=16,o=0,a=Math.PI*2,r=0,c=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:n,heightSegments:s,phiStart:o,phiLength:a,thetaStart:r,thetaLength:c},n=Math.max(3,Math.floor(n)),s=Math.max(2,Math.floor(s));const m=Math.min(r+c,Math.PI);let v=0;const d=[],l=new t,u=new t,h=[],f=[],p=[],g=[];for(let t=0;t<=s;t++){const b=[],i=t/s;let h=0;t==0&&r==0?h=.5/n:t==s&&m==Math.PI&&(h=-.5/n);for(let t=0;t<=n;t++){const s=t/n;l.x=-e*Math.cos(o+s*a)*Math.sin(r+i*c),l.y=e*Math.cos(r+i*c),l.z=e*Math.sin(o+s*a)*Math.sin(r+i*c),f.push(l.x,l.y,l.z),u.copy(l).normalize(),p.push(u.x,u.y,u.z),g.push(s+h,1-i),b.push(v++)}d.push(b)}for(let e=0;e<s;e++)for(let t=0;t<n;t++){const a=d[e][t+1],o=d[e][t],c=d[e+1][t],i=d[e+1][t+1];(e!==0||r>0)&&h.push(a,o,i),(e!==s-1||m<Math.PI)&&h.push(o,c,i)}this.setIndex(h),this.setAttribute("position",new i(f,3)),this.setAttribute("normal",new i(p,3)),this.setAttribute("uv",new i(g,2))}static fromJSON(e){return new hn(e.radius,e.widthSegments,e.heightSegments,e.phiStart,e.phiLength,e.thetaStart,e.thetaLength)}}class jn extends pe{constructor(e=1,t=0){const n=[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],s=[2,1,0,0,3,2,1,3,0,2,3,1];super(n,s,e,t),this.type="TetrahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new jn(e.radius,e.detail)}}class yn extends r{constructor(e=1,n=.4,s=8,o=6,a=Math.PI*2){super(),this.type="TorusGeometry",this.parameters={radius:e,tube:n,radialSegments:s,tubularSegments:o,arc:a},s=Math.floor(s),o=Math.floor(o);const l=[],h=[],m=[],d=[],u=new t,r=new t,c=new t;for(let t=0;t<=s;t++)for(let i=0;i<=o;i++){const l=i/o*a,f=t/s*Math.PI*2;r.x=(e+n*Math.cos(f))*Math.cos(l),r.y=(e+n*Math.cos(f))*Math.sin(l),r.z=n*Math.sin(f),h.push(r.x,r.y,r.z),u.x=e*Math.cos(l),u.y=e*Math.sin(l),c.subVectors(r,u).normalize(),m.push(c.x,c.y,c.z),d.push(i/o),d.push(t/s)}for(let e=1;e<=s;e++)for(let t=1;t<=o;t++){const i=(o+1)*e+t-1,n=(o+1)*(e-1)+t-1,a=(o+1)*(e-1)+t,s=(o+1)*e+t;l.push(i,n,s),l.push(n,a,s)}this.setIndex(l),this.setAttribute("position",new i(h,3)),this.setAttribute("normal",new i(m,3)),this.setAttribute("uv",new i(d,2))}static fromJSON(e){return new yn(e.radius,e.tube,e.radialSegments,e.tubularSegments,e.arc)}}class wn extends r{constructor(e=1,n=.4,s=64,o=8,a=2,r=3){super(),this.type="TorusKnotGeometry",this.parameters={radius:e,tube:n,tubularSegments:s,radialSegments:o,p:a,q:r},s=Math.floor(s),o=Math.floor(o);const m=[],v=[],b=[],f=[],c=new t,h=new t,l=new t,p=new t,u=new t,g=new t,d=new t;for(let t=0;t<=s;++t){const i=t/s*a*Math.PI*2;j(i,a,r,e,l),j(i+.01,a,r,e,p),g.subVectors(p,l),d.addVectors(p,l),u.crossVectors(g,d),d.crossVectors(u,g),u.normalize(),d.normalize();for(let e=0;e<=o;++e){const r=e/o*Math.PI*2,i=-n*Math.cos(r),a=n*Math.sin(r);c.x=l.x+(i*d.x+a*u.x),c.y=l.y+(i*d.y+a*u.y),c.z=l.z+(i*d.z+a*u.z),v.push(c.x,c.y,c.z),h.subVectors(c,l).normalize(),b.push(h.x,h.y,h.z),f.push(t/s),f.push(e/o)}}for(let e=1;e<=s;e++)for(let t=1;t<=o;t++){const i=(o+1)*(e-1)+(t-1),n=(o+1)*e+(t-1),a=(o+1)*e+t,s=(o+1)*(e-1)+t;m.push(i,n,s),m.push(n,a,s)}this.setIndex(m),this.setAttribute("position",new i(v,3)),this.setAttribute("normal",new i(b,3)),this.setAttribute("uv",new i(f,2));function j(e,t,n,s,o){const r=Math.cos(e),c=Math.sin(e),i=n/t*e,a=Math.cos(i);o.x=s*(2+a)*.5*r,o.y=s*(2+a)*c*.5,o.z=s*Math.sin(i)*.5}}static fromJSON(e){return new wn(e.radius,e.tube,e.tubularSegments,e.radialSegments,e.p,e.q)}}class On extends r{constructor(e=new vo(new t(-1,-1,0),new t(-1,1,0),new t(1,1,0)),s=64,o=1,a=8,r=!1){super(),this.type="TubeGeometry",this.parameters={path:e,tubularSegments:s,radius:o,radialSegments:a,closed:r};const d=e.computeFrenetFrames(s,r);this.tangents=d.tangents,this.normals=d.normals,this.binormals=d.binormals;const l=new t,c=new t,h=new n;let u=new t;const g=[],f=[],p=[],m=[];b(),this.setIndex(m),this.setAttribute("position",new i(g,3)),this.setAttribute("normal",new i(f,3)),this.setAttribute("uv",new i(p,2));function b(){for(let e=0;e<s;e++)v(e);v(r===!1?s:0),y(),j()}function v(t){u=e.getPointAt(t/s,u);const n=d.normals[t],i=d.binormals[t];for(let e=0;e<=a;e++){const r=e/a*Math.PI*2,t=Math.sin(r),s=-Math.cos(r);c.x=s*n.x+t*i.x,c.y=s*n.y+t*i.y,c.z=s*n.z+t*i.z,c.normalize(),f.push(c.x,c.y,c.z),l.x=u.x+o*c.x,l.y=u.y+o*c.y,l.z=u.z+o*c.z,g.push(l.x,l.y,l.z)}}function j(){for(let e=1;e<=s;e++)for(let t=1;t<=a;t++){const o=(a+1)*(e-1)+(t-1),n=(a+1)*e+(t-1),i=(a+1)*e+t,s=(a+1)*(e-1)+t;m.push(o,n,s),m.push(n,i,s)}}function y(){for(let e=0;e<=s;e++)for(let t=0;t<=a;t++)h.x=e/s,h.y=t/a,p.push(h.x,h.y)}}toJSON(){const e=super.toJSON();return e.path=this.parameters.path.toJSON(),e}static fromJSON(e){return new On((new jo[e.path.type]).fromJSON(e.path),e.tubularSegments,e.radius,e.radialSegments,e.closed)}}class Ro extends r{constructor(e=null){if(super(),this.type="WireframeGeometry",this.parameters={geometry:e},e!==null){const o=[],a=new Set,n=new t,s=new t;if(e.index!==null){const r=e.attributes.position,i=e.index;let t=e.groups;t.length===0&&(t=[{start:0,count:i.count,materialIndex:0}]);for(let e=0,d=t.length;e<d;++e){const c=t[e],l=c.start,u=c.count;for(let e=l,t=l+u;e<t;e+=3)for(let t=0;t<3;t++){const c=i.getX(e+t),l=i.getX(e+(t+1)%3);n.fromBufferAttribute(r,c),s.fromBufferAttribute(r,l),nd(n,s,a)===!0&&(o.push(n.x,n.y,n.z),o.push(s.x,s.y,s.z))}}}else{const t=e.attributes.position;for(let e=0,i=t.count/3;e<i;e++)for(let i=0;i<3;i++){const r=3*e+i,c=3*e+(i+1)%3;n.fromBufferAttribute(t,r),s.fromBufferAttribute(t,c),nd(n,s,a)===!0&&(o.push(n.x,n.y,n.z),o.push(s.x,s.y,s.z))}}this.setAttribute("position",new i(o,3))}}}function nd(e,t,n){const s=`${e.x},${e.y},${e.z}-${t.x},${t.y},${t.z}`,o=`${t.x},${t.y},${t.z}-${e.x},${e.y},${e.z}`;return n.has(s)!==!0&&n.has(o)!==!0&&(n.add(s),n.add(o),!0)}Lo=Object.freeze({__proto__:null,BoxGeometry:Ae,BoxBufferGeometry:Ae,CapsuleGeometry:In,CapsuleBufferGeometry:In,CircleGeometry:Hn,CircleBufferGeometry:Hn,ConeGeometry:Pn,ConeBufferGeometry:Pn,CylinderGeometry:ot,CylinderBufferGeometry:ot,DodecahedronGeometry:Rn,DodecahedronBufferGeometry:Rn,EdgesGeometry:Go,ExtrudeGeometry:me,ExtrudeBufferGeometry:me,IcosahedronGeometry:vn,IcosahedronBufferGeometry:vn,LatheGeometry:Ht,LatheBufferGeometry:Ht,OctahedronGeometry:Ut,OctahedronBufferGeometry:Ut,PlaneGeometry:zt,PlaneBufferGeometry:zt,PolyhedronGeometry:pe,PolyhedronBufferGeometry:pe,RingGeometry:fn,RingBufferGeometry:fn,ShapeGeometry:Yt,ShapeBufferGeometry:Yt,SphereGeometry:hn,SphereBufferGeometry:hn,TetrahedronGeometry:jn,TetrahedronBufferGeometry:jn,TorusGeometry:yn,TorusBufferGeometry:yn,TorusKnotGeometry:wn,TorusKnotBufferGeometry:wn,TubeGeometry:On,TubeBufferGeometry:On,WireframeGeometry:Ro});class No extends y{constructor(e){super(),this.type="ShadowMaterial",this.color=new o(0),this.transparent=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this}}No.prototype.isShadowMaterial=!0;class Do extends G{constructor(e){super(e),this.type="RawShaderMaterial"}}Do.prototype.isRawShaderMaterial=!0;class Mo extends y{constructor(e){super(),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new o(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new o(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=mt,this.normalScale=new n(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.setValues(e)}copy(e){return super.copy(e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapIntensity=e.envMapIntensity,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this}}Mo.prototype.isMeshStandardMaterial=!0;class Vo extends Mo{constructor(e){super(),this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new n(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return b(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(e){this.ior=(1+.4*e)/(1-.4*e)}}),this.sheenColor=new o(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=0,this.attenuationColor=new o(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new o(1,1,1),this.specularColorMap=null,this._sheen=0,this._clearcoat=0,this._transmission=0,this.setValues(e)}get sheen(){return this._sheen}set sheen(e){this._sheen>0!==e>0&&this.version++,this._sheen=e}get clearcoat(){return this._clearcoat}set clearcoat(e){this._clearcoat>0!==e>0&&this.version++,this._clearcoat=e}get transmission(){return this._transmission}set transmission(e){this._transmission>0!==e>0&&this.version++,this._transmission=e}copy(e){return super.copy(e),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=e.clearcoat,this.clearcoatMap=e.clearcoatMap,this.clearcoatRoughness=e.clearcoatRoughness,this.clearcoatRoughnessMap=e.clearcoatRoughnessMap,this.clearcoatNormalMap=e.clearcoatNormalMap,this.clearcoatNormalScale.copy(e.clearcoatNormalScale),this.ior=e.ior,this.sheen=e.sheen,this.sheenColor.copy(e.sheenColor),this.sheenColorMap=e.sheenColorMap,this.sheenRoughness=e.sheenRoughness,this.sheenRoughnessMap=e.sheenRoughnessMap,this.transmission=e.transmission,this.transmissionMap=e.transmissionMap,this.thickness=e.thickness,this.thicknessMap=e.thicknessMap,this.attenuationDistance=e.attenuationDistance,this.attenuationColor.copy(e.attenuationColor),this.specularIntensity=e.specularIntensity,this.specularIntensityMap=e.specularIntensityMap,this.specularColor.copy(e.specularColor),this.specularColorMap=e.specularColorMap,this}}Vo.prototype.isMeshPhysicalMaterial=!0;class $o extends y{constructor(e){super(),this.type="MeshPhongMaterial",this.color=new o(16777215),this.specular=new o(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new o(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=mt,this.normalScale=new n(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=gn,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this}}$o.prototype.isMeshPhongMaterial=!0;class Uo extends y{constructor(e){super(),this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new o(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new o(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=mt,this.normalScale=new n(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.gradientMap=e.gradientMap,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this}}Uo.prototype.isMeshToonMaterial=!0;class qo extends y{constructor(e){super(),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=mt,this.normalScale=new n(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.flatShading=!1,this.setValues(e)}copy(e){return super.copy(e),this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.flatShading=e.flatShading,this}}qo.prototype.isMeshNormalMaterial=!0;class Yo extends y{constructor(e){super(),this.type="MeshLambertMaterial",this.color=new o(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new o(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=gn,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this}}Yo.prototype.isMeshLambertMaterial=!0;class Xo extends y{constructor(e){super(),this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new o(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=mt,this.normalScale=new n(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.setValues(e)}copy(e){return super.copy(e),this.defines={MATCAP:""},this.color.copy(e.color),this.matcap=e.matcap,this.map=e.map,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.flatShading=e.flatShading,this}}Xo.prototype.isMeshMatcapMaterial=!0;class Zo extends S{constructor(e){super(),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(e)}copy(e){return super.copy(e),this.scale=e.scale,this.dashSize=e.dashSize,this.gapSize=e.gapSize,this}}Zo.prototype.isLineDashedMaterial=!0;const x0={ShadowMaterial:No,SpriteMaterial:Es,RawShaderMaterial:Do,ShaderMaterial:G,PointsMaterial:rt,MeshPhysicalMaterial:Vo,MeshStandardMaterial:Mo,MeshPhongMaterial:$o,MeshToonMaterial:Uo,MeshNormalMaterial:qo,MeshLambertMaterial:Yo,MeshDepthMaterial:fs,MeshDistanceMaterial:gs,MeshBasicMaterial:ve,MeshMatcapMaterial:Xo,LineDashedMaterial:Zo,LineBasicMaterial:S,Material:y};y.fromType=function(e){return new x0[e]};const f={arraySlice:function(e,t,n){return f.isTypedArray(e)?new e.constructor(e.subarray(t,n!==void 0?n:e.length)):e.slice(t,n)},convertArray:function(e,t,n){return!e||!n&&e.constructor===t?e:typeof t.BYTES_PER_ELEMENT=="number"?new t(e):Array.prototype.slice.call(e)},isTypedArray:function(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)},getKeyframeOrder:function(e){function s(t,n){return e[t]-e[n]}const n=e.length,t=new Array(n);for(let e=0;e!==n;++e)t[e]=e;return t.sort(s),t},sortedArray:function(e,t,n){const s=e.length,o=new e.constructor(s);for(let i=0,a=0;a!==s;++i){const r=n[i]*t;for(let n=0;n!==t;++n)o[a++]=e[r+n]}return o},flattenJSON:function(e,t,n,s){let a=1,o=e[0];for(;o!==void 0&&o[s]===void 0;)o=e[a++];if(o===void 0)return;let i=o[s];if(i===void 0)return;if(Array.isArray(i))do i=o[s],i!==void 0&&(t.push(o.time),n.push.apply(n,i)),o=e[a++];while(o!==void 0)else if(i.toArray!==void 0)do i=o[s],i!==void 0&&(t.push(o.time),i.toArray(n,n.length)),o=e[a++];while(o!==void 0)else do i=o[s],i!==void 0&&(t.push(o.time),n.push(i)),o=e[a++];while(o!==void 0)},subclip:function(e,t,n,s,o=30){const i=e.clone();i.name=t;const r=[];for(let t=0;t<i.tracks.length;++t){const e=i.tracks[t],c=e.getValueSize(),a=[],l=[];for(let t=0;t<e.times.length;++t){const i=e.times[t]*o;if(i<n||i>=s)continue;a.push(e.times[t]);for(let n=0;n<c;++n)l.push(e.values[t*c+n])}if(a.length===0)continue;e.times=f.convertArray(a,e.times.constructor),e.values=f.convertArray(l,e.values.constructor),r.push(e)}i.tracks=r;let a=1/0;for(let e=0;e<i.tracks.length;++e)a>i.tracks[e].times[0]&&(a=i.tracks[e].times[0]);for(let e=0;e<i.tracks.length;++e)i.tracks[e].shift(-1*a);return i.resetDuration(),i},makeClipAdditive:function(e,t=0,n=e,s=30){s<=0&&(s=30);const i=n.tracks.length,o=t/s;for(let d=0;d<i;++d){const t=n.tracks[d],c=t.ValueTypeName;if(c==="bool"||c==="string")continue;const s=e.tracks.find(function(e){return e.name===t.name&&e.ValueTypeName===c});if(s===void 0)continue;let a=0;const l=t.getValueSize();t.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(a=l/3);let u=0;const h=s.getValueSize();s.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(u=h/3);const m=t.times.length-1;let r;if(o<=t.times[0]){const e=a,n=l-a;r=f.arraySlice(t.values,e,n)}else if(o>=t.times[m]){const e=m*l+a,n=e+l-a;r=f.arraySlice(t.values,e,n)}else{const e=t.createInterpolant(),n=a,s=l-a;e.evaluate(o),r=f.arraySlice(e.resultBuffer,n,s)}if(c==="quaternion"){const e=(new T).fromArray(r).normalize().conjugate();e.toArray(r)}const p=s.times.length;for(let e=0;e<p;++e){const t=e*h+u;if(c==="quaternion")T.multiplyQuaternionsFlat(s.values,t,r,0,s.values,t);else{const e=h-u*2;for(let n=0;n<e;++n)s.values[t+n]-=r[n]}}}return e.blendMode=Ri,e}};class _e{constructor(e,t,n,s){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=s!==void 0?s:new t.constructor(n),this.sampleValues=t,this.valueSize=n,this.settings=null,this.DefaultSettings_={}}evaluate(e){const o=this.parameterPositions;let t=this._cachedIndex,s=o[t],n=o[t-1];validate_interval:{seek:{let i;linear_scan:{forward_scan:if(!(e<s)){for(let i=t+2;;){if(s===void 0){if(e<n)break forward_scan;return t=o.length,this._cachedIndex=t,this.afterEnd_(t-1,e,n)}if(t===i)break;if(n=s,s=o[++t],e<s)break seek}i=o.length;break linear_scan}if(!(e>=n)){const a=o[1];e<a&&(t=2,n=a);for(let i=t-2;;){if(n===void 0)return this._cachedIndex=0,this.beforeStart_(0,e,s);if(t===i)break;if(s=n,n=o[--t-1],e>=n)break seek}i=t,t=0;break linear_scan}break validate_interval}for(;t<i;){const n=t+i>>>1;e<o[n]?i=n:t=n+1}if(s=o[t],n=o[t-1],n===void 0)return this._cachedIndex=0,this.beforeStart_(0,e,s);if(s===void 0)return t=o.length,this._cachedIndex=t,this.afterEnd_(t-1,n,e)}this._cachedIndex=t,this.intervalChanged_(t,n,s)}return this.interpolate_(t,n,e,s)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(e){const t=this.resultBuffer,s=this.sampleValues,n=this.valueSize,o=e*n;for(let e=0;e!==n;++e)t[e]=s[o+e];return t}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}_e.prototype.beforeStart_=_e.prototype.copySampleValue_,_e.prototype.afterEnd_=_e.prototype.copySampleValue_;class Ql extends _e{constructor(e,t,n,s){super(e,t,n,s),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:wt,endingEnd:wt}}intervalChanged_(e,t,n){const s=this.parameterPositions;let o=e-2,i=e+1,a=s[o],r=s[i];if(a===void 0)switch(this.getSettings_().endingStart){case Ot:o=e,a=2*t-n;break;case Gn:o=s.length-2,a=t+s[o]-s[o+1];break;default:o=e,a=n}if(r===void 0)switch(this.getSettings_().endingEnd){case Ot:i=e,r=2*n-t;break;case Gn:i=1,r=n+s[1]-s[0];break;default:i=e-1,r=t}const c=(n-t)*.5,l=this.valueSize;this._weightPrev=c/(t-a),this._weightNext=c/(r-n),this._offsetPrev=o*l,this._offsetNext=i*l}interpolate_(e,t,n,s){const h=this.resultBuffer,r=this.sampleValues,d=this.valueSize,u=e*d,m=u-d,p=this._offsetPrev,f=this._offsetNext,i=this._weightPrev,l=this._weightNext,o=(n-t)/(s-t),a=o*o,c=a*o,g=-i*c+2*i*a-i*o,v=(1+i)*c+(-1.5-2*i)*a+(-.5+i)*o+1,b=(-1-l)*c+(1.5+l)*a+.5*o,j=l*c-l*a;for(let e=0;e!==d;++e)h[e]=g*r[p+e]+v*r[m+e]+b*r[u+e]+j*r[f+e];return h}}class ei extends _e{constructor(e,t,n,s){super(e,t,n,s)}interpolate_(e,t,n,s){const i=this.resultBuffer,a=this.sampleValues,o=this.valueSize,r=e*o,l=r-o,c=(n-t)/(s-t),d=1-c;for(let e=0;e!==o;++e)i[e]=a[l+e]*d+a[r+e]*c;return i}}class Xl extends _e{constructor(e,t,n,s){super(e,t,n,s)}interpolate_(e){return this.copySampleValue_(e-1)}}class ne{constructor(e,t,n,s){if(e===void 0)throw new Error("THREE.KeyframeTrack: track name is undefined");if(t===void 0||t.length===0)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+e);this.name=e,this.times=f.convertArray(t,this.TimeBufferType),this.values=f.convertArray(n,this.ValueBufferType),this.setInterpolation(s||this.DefaultInterpolation)}static toJSON(e){const n=e.constructor;let t;if(n.toJSON!==this.toJSON)t=n.toJSON(e);else{t={name:e.name,times:f.convertArray(e.times,Array),values:f.convertArray(e.values,Array)};const n=e.getInterpolation();n!==e.DefaultInterpolation&&(t.interpolation=n)}return t.type=e.ValueTypeName,t}InterpolantFactoryMethodDiscrete(e){return new Xl(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodLinear(e){return new ei(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodSmooth(e){return new Ql(this.times,this.values,this.getValueSize(),e)}setInterpolation(e){let t;switch(e){case Zn:t=this.InterpolantFactoryMethodDiscrete;break;case Qn:t=this.InterpolantFactoryMethodLinear;break;case $s:t=this.InterpolantFactoryMethodSmooth;break}if(t===void 0){const t="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===void 0)if(e!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);else throw new Error(t);return console.warn("THREE.KeyframeTrack:",t),this}return this.createInterpolant=t,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return Zn;case this.InterpolantFactoryMethodLinear:return Qn;case this.InterpolantFactoryMethodSmooth:return $s}}getValueSize(){return this.values.length/this.times.length}shift(e){if(e!==0){const t=this.times;for(let n=0,s=t.length;n!==s;++n)t[n]+=e}return this}scale(e){if(e!==1){const t=this.times;for(let n=0,s=t.length;n!==s;++n)t[n]*=e}return this}trim(e,t){const o=this.times,i=o.length;let s=0,n=i-1;for(;s!==i&&o[s]<e;)++s;for(;n!==-1&&o[n]>t;)--n;if(++n,s!==0||n!==i){s>=n&&(n=Math.max(n,1),s=n-1);const e=this.getValueSize();this.times=f.arraySlice(o,s,n),this.values=f.arraySlice(this.values,s*e,n*e)}return this}validate(){let e=!0;const s=this.getValueSize();s-Math.floor(s)!==0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),e=!1);const o=this.times,t=this.values,i=o.length;i===0&&(console.error("THREE.KeyframeTrack: Track is empty.",this),e=!1);let n=null;for(let s=0;s!==i;s++){const t=o[s];if(typeof t=="number"&&isNaN(t)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,s,t),e=!1;break}if(n!==null&&n>t){console.error("THREE.KeyframeTrack: Out of order keys.",this,s,t,n),e=!1;break}n=t}if(t!==void 0&&f.isTypedArray(t))for(let n=0,o=t.length;n!==o;++n){const s=t[n];if(isNaN(s)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,n,s),e=!1;break}}return e}optimize(){const e=f.arraySlice(this.times),s=f.arraySlice(this.values),t=this.getValueSize(),i=this.getInterpolation()===$s,o=e.length-1;let n=1;for(let a=1;a<o;++a){let r=!1;const c=e[a],l=e[a+1];if(c!==l&&(a!==1||c!==e[0]))if(i)r=!0;else{const e=a*t,n=e-t,o=e+t;for(let i=0;i!==t;++i){const a=s[e+i];if(a!==s[n+i]||a!==s[o+i]){r=!0;break}}}if(r){if(a!==n){e[n]=e[a];const o=a*t,i=n*t;for(let e=0;e!==t;++e)s[i+e]=s[o+e]}++n}}if(o>0){e[n]=e[o];for(let i=o*t,a=n*t,e=0;e!==t;++e)s[a+e]=s[i+e];++n}return n!==e.length?(this.times=f.arraySlice(e,0,n),this.values=f.arraySlice(s,0,n*t)):(this.times=e,this.values=s),this}clone(){const t=f.arraySlice(this.times,0),n=f.arraySlice(this.values,0),s=this.constructor,e=new s(this.name,t,n);return e.createInterpolant=this.createInterpolant,e}}ne.prototype.TimeBufferType=Float32Array,ne.prototype.ValueBufferType=Float32Array,ne.prototype.DefaultInterpolation=Qn;class Xe extends ne{}Xe.prototype.ValueTypeName="bool",Xe.prototype.ValueBufferType=Array,Xe.prototype.DefaultInterpolation=Zn,Xe.prototype.InterpolantFactoryMethodLinear=void 0,Xe.prototype.InterpolantFactoryMethodSmooth=void 0;class ti extends ne{}ti.prototype.ValueTypeName="color";class kn extends ne{}kn.prototype.ValueTypeName="number";class Ul extends _e{constructor(e,t,n,s){super(e,t,n,s)}interpolate_(e,t,n,s){const a=this.resultBuffer,r=this.sampleValues,i=this.valueSize,c=(n-t)/(s-t);let o=e*i;for(let e=o+i;o!==e;o+=4)T.slerpFlat(a,0,r,o-i,r,o,c);return a}}class Jt extends ne{InterpolantFactoryMethodLinear(e){return new Ul(this.times,this.values,this.getValueSize(),e)}}Jt.prototype.ValueTypeName="quaternion",Jt.prototype.DefaultInterpolation=Qn,Jt.prototype.InterpolantFactoryMethodSmooth=void 0;class Qe extends ne{}Qe.prototype.ValueTypeName="string",Qe.prototype.ValueBufferType=Array,Qe.prototype.DefaultInterpolation=Zn,Qe.prototype.InterpolantFactoryMethodLinear=void 0,Qe.prototype.InterpolantFactoryMethodSmooth=void 0;class Mn extends ne{}Mn.prototype.ValueTypeName="vector";class Fn{constructor(e,t=-1,n,s=Ws){this.name=e,this.tracks=n,this.duration=t,this.blendMode=s,this.uuid=$(),this.duration<0&&this.resetDuration()}static parse(e){const t=[],n=e.tracks,o=1/(e.fps||1);for(let e=0,s=n.length;e!==s;++e)t.push(I0(n[e]).scale(o));const s=new this(e.name,e.duration,t,e.blendMode);return s.uuid=e.uuid,s}static toJSON(e){const t=[],n=e.tracks,s={name:e.name,duration:e.duration,tracks:t,uuid:e.uuid,blendMode:e.blendMode};for(let e=0,s=n.length;e!==s;++e)t.push(ne.toJSON(n[e]));return s}static CreateFromMorphTargetSequence(e,t,n,s){const o=t.length,i=[];for(let a=0;a<o;a++){let e=[],r=[];e.push((a+o-1)%o,a,(a+1)%o),r.push(0,1,0);const c=f.getKeyframeOrder(e);e=f.sortedArray(e,1,c),r=f.sortedArray(r,1,c),!s&&e[0]===0&&(e.push(o),r.push(r[0])),i.push(new kn(".morphTargetInfluences["+t[a].name+"]",e,r).scale(1/n))}return new this(e,-1,i)}static findByName(e,t){let n=e;if(!Array.isArray(e)){const t=e;n=t.geometry&&t.geometry.animations||t.animations}for(let e=0;e<n.length;e++)if(n[e].name===t)return n[e];return null}static CreateClipsFromMorphTargetSequences(e,t,n){const s={},i=/^([\w-]*?)([\d]+)$/;for(let t=0,a=e.length;t<a;t++){const o=e[t],n=o.name.match(i);if(n&&n.length>1){const t=n[1];let e=s[t];e||(s[t]=e=[]),e.push(o)}}const o=[];for(const e in s)o.push(this.CreateFromMorphTargetSequence(e,s[e],t,n));return o}static parseAnimation(e,t){if(!e)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const s=function(e,t,n,s,o){if(n.length!==0){const i=[],a=[];f.flattenJSON(n,i,a,s),i.length!==0&&o.push(new e(t,i,a))}},n=[],a=e.name||"default",r=e.fps||30,c=e.blendMode;let o=e.length||-1;const i=e.hierarchy||[];for(let a=0;a<i.length;a++){const e=i[a].keys;if(!e||e.length===0)continue;if(e[0].morphTargets){const s={};let t;for(t=0;t<e.length;t++)if(e[t].morphTargets)for(let n=0;n<e[t].morphTargets.length;n++)s[e[t].morphTargets[n]]=-1;for(const o in s){const i=[],a=[];for(let n=0;n!==e[t].morphTargets.length;++n){const s=e[t];i.push(s.time),a.push(s.morphTarget===o?1:0)}n.push(new kn(".morphTargetInfluence["+o+"]",i,a))}o=s.length*r}else{const o=".bones["+t[a].name+"]";s(Mn,o+".position",e,"pos",n),s(Jt,o+".quaternion",e,"rot",n),s(Mn,o+".scale",e,"scl",n)}}if(n.length===0)return null;const l=new this(a,o,n,c);return l}resetDuration(){const t=this.tracks;let e=0;for(let n=0,o=t.length;n!==o;++n){const s=this.tracks[n];e=Math.max(e,s.times[s.times.length-1])}return this.duration=e,this}trim(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].trim(0,this.duration);return this}validate(){let e=!0;for(let t=0;t<this.tracks.length;t++)e=e&&this.tracks[t].validate();return e}optimize(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].optimize();return this}clone(){const e=[];for(let t=0;t<this.tracks.length;t++)e.push(this.tracks[t].clone());return new this.constructor(this.name,this.duration,e,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function H0(e){switch(e.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return kn;case"vector":case"vector2":case"vector3":case"vector4":return Mn;case"color":return ti;case"quaternion":return Jt;case"bool":case"boolean":return Xe;case"string":return Qe}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+e)}function I0(e){if(e.type===void 0)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const t=H0(e.type);if(e.times===void 0){const t=[],n=[];f.flattenJSON(e.keys,t,n,"value"),e.times=t,e.values=n}return t.parse!==void 0?t.parse(e):new t(e.name,e.times,e.values,e.interpolation)}const et={enabled:!1,files:{},add:function(e,t){if(this.enabled===!1)return;this.files[e]=t},get:function(e){if(this.enabled===!1)return;return this.files[e]},remove:function(e){delete this.files[e]},clear:function(){this.files={}}};class ii{constructor(e,t,n){const s=this;let r=!1,i=0,a=0,c=void 0;const o=[];this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=n,this.itemStart=function(e){a++,r===!1&&s.onStart!==void 0&&s.onStart(e,i,a),r=!0},this.itemEnd=function(e){i++,s.onProgress!==void 0&&s.onProgress(e,i,a),i===a&&(r=!1,s.onLoad!==void 0&&s.onLoad())},this.itemError=function(e){s.onError!==void 0&&s.onError(e)},this.resolveURL=function(e){return c?c(e):e},this.setURLModifier=function(e){return c=e,this},this.addHandler=function(e,t){return o.push(e,t),this},this.removeHandler=function(e){const t=o.indexOf(e);return t!==-1&&o.splice(t,2),this},this.getHandler=function(e){for(let t=0,s=o.length;t<s;t+=2){const n=o[t],i=o[t+1];if(n.global&&(n.lastIndex=0),n.test(e))return i}return null}}}const Hl=new ii;class P{constructor(e){this.manager=e!==void 0?e:Hl,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(e,t){const n=this;return new Promise(function(s,o){n.load(e,s,t,o)})}parse(){}setCrossOrigin(e){return this.crossOrigin=e,this}setWithCredentials(e){return this.withCredentials=e,this}setPath(e){return this.path=e,this}setResourcePath(e){return this.resourcePath=e,this}setRequestHeader(e){return this.requestHeader=e,this}}const je={};class ae extends P{constructor(e){super(e)}load(e,t,n,s){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const o=et.get(e);if(o!==void 0)return this.manager.itemStart(e),setTimeout(()=>{t&&t(o),this.manager.itemEnd(e)},0),o;if(je[e]!==void 0){je[e].push({onLoad:t,onProgress:n,onError:s});return}je[e]=[],je[e].push({onLoad:t,onProgress:n,onError:s});const a=new Request(e,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),i=this.mimeType,r=this.responseType;fetch(a).then(t=>{if(t.status===200||t.status===0){if(t.status===0&&console.warn("THREE.FileLoader: HTTP Status 0 received."),typeof ReadableStream=="undefined"||t.body===void 0||t.body.getReader===void 0)return t;const n=je[e],a=t.body.getReader(),s=t.headers.get("Content-Length"),o=s?parseInt(s):0,r=o!==0;let i=0;const c=new ReadableStream({start(e){t();function t(){a.read().then(({done:s,value:a})=>{if(s)e.close();else{i+=a.byteLength;const s=new ProgressEvent("progress",{lengthComputable:r,loaded:i,total:o});for(let e=0,o=n.length;e<o;e++){const t=n[e];t.onProgress&&t.onProgress(s)}e.enqueue(a),t()}})}}});return new Response(c)}throw Error(`fetch for "${t.url}" responded with ${t.status}: ${t.statusText}`)}).then(e=>{switch(r){case"arraybuffer":return e.arrayBuffer();case"blob":return e.blob();case"document":return e.text().then(e=>{const t=new DOMParser;return t.parseFromString(e,i)});case"json":return e.json();default:if(i===void 0)return e.text();const n=/charset="?([^;"\s]*)"?/i,t=n.exec(i),s=t&&t[1]?t[1].toLowerCase():void 0,o=new TextDecoder(s);return e.arrayBuffer().then(e=>o.decode(e))}}).then(t=>{et.add(e,t);const n=je[e];delete je[e];for(let e=0,o=n.length;e<o;e++){const s=n[e];s.onLoad&&s.onLoad(t)}}).catch(t=>{const n=je[e];if(n===void 0)throw this.manager.itemError(e),t;delete je[e];for(let e=0,o=n.length;e<o;e++){const s=n[e];s.onError&&s.onError(t)}this.manager.itemError(e)}).finally(()=>{this.manager.itemEnd(e)}),this.manager.itemStart(e)}setResponseType(e){return this.responseType=e,this}setMimeType(e){return this.mimeType=e,this}}class q0 extends P{constructor(e){super(e)}load(e,t,n,s){const i=this,o=new ae(this.manager);o.setPath(this.path),o.setRequestHeader(this.requestHeader),o.setWithCredentials(this.withCredentials),o.load(e,function(n){try{t(i.parse(JSON.parse(n)))}catch(t){s?s(t):console.error(t),i.manager.itemError(e)}},n,s)}parse(e){const t=[];for(let n=0;n<e.length;n++){const s=Fn.parse(e[n]);t.push(s)}return t}}class Y0 extends P{constructor(e){super(e)}load(e,t,n,s){const r=this,i=[],o=new Mi,a=new ae(this.manager);a.setPath(this.path),a.setResponseType("arraybuffer"),a.setRequestHeader(this.requestHeader),a.setWithCredentials(r.withCredentials);let c=0;function l(l){a.load(e[l],function(e){const n=r.parse(e,!0);i[l]={width:n.width,height:n.height,format:n.format,mipmaps:n.mipmaps},c+=1,c===6&&(n.mipmapCount===1&&(o.minFilter=j),o.image=i,o.format=n.format,o.needsUpdate=!0,t&&t(o))},n,s)}if(Array.isArray(e))for(let t=0,n=e.length;t<n;++t)l(t);else a.load(e,function(e){const n=r.parse(e,!0);if(n.isCubemap){const e=n.mipmaps.length/n.mipmapCount;for(let t=0;t<e;t++){i[t]={mipmaps:[]};for(let e=0;e<n.mipmapCount;e++)i[t].mipmaps.push(n.mipmaps[t*n.mipmapCount+e]),i[t].format=n.format,i[t].width=n.width,i[t].height=n.height}o.image=i}else o.image.width=n.width,o.image.height=n.height,o.mipmaps=n.mipmaps;n.mipmapCount===1&&(o.minFilter=j),o.format=n.format,o.needsUpdate=!0,t&&t(o)},n,s);return o}}class Ln extends P{constructor(e){super(e)}load(e,t,n,s){this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const i=this,a=et.get(e);if(a!==void 0)return i.manager.itemStart(e),setTimeout(function(){t&&t(a),i.manager.itemEnd(e)},0),a;const o=qn("img");function r(){l(),et.add(e,this),t&&t(this),i.manager.itemEnd(e)}function c(t){l(),s&&s(t),i.manager.itemError(e),i.manager.itemEnd(e)}function l(){o.removeEventListener("load",r,!1),o.removeEventListener("error",c,!1)}return o.addEventListener("load",r,!1),o.addEventListener("error",c,!1),e.slice(0,5)!=="data:"&&this.crossOrigin!==void 0&&(o.crossOrigin=this.crossOrigin),i.manager.itemStart(e),o.src=e,o}}class Nl extends P{constructor(e){super(e)}load(e,t,n,s){const o=new St,i=new Ln(this.manager);i.setCrossOrigin(this.crossOrigin),i.setPath(this.path);let a=0;function r(n){i.load(e[n],function(e){o.images[n]=e,a++,a===6&&(o.needsUpdate=!0,t&&t(o))},void 0,s)}for(let t=0;t<e.length;++t)r(t);return o}}class zl extends P{constructor(e){super(e)}load(e,t,n,s){const a=this,o=new nt,i=new ae(this.manager);return i.setResponseType("arraybuffer"),i.setRequestHeader(this.requestHeader),i.setPath(this.path),i.setWithCredentials(a.withCredentials),i.load(e,function(e){const n=a.parse(e);if(!n)return;n.image!==void 0?o.image=n.image:n.data!==void 0&&(o.image.width=n.width,o.image.height=n.height,o.image.data=n.data),o.wrapS=n.wrapS!==void 0?n.wrapS:R,o.wrapT=n.wrapT!==void 0?n.wrapT:R,o.magFilter=n.magFilter!==void 0?n.magFilter:j,o.minFilter=n.minFilter!==void 0?n.minFilter:j,o.anisotropy=n.anisotropy!==void 0?n.anisotropy:1,n.encoding!==void 0&&(o.encoding=n.encoding),n.flipY!==void 0&&(o.flipY=n.flipY),n.format!==void 0&&(o.format=n.format),n.type!==void 0&&(o.type=n.type),n.mipmaps!==void 0&&(o.mipmaps=n.mipmaps,o.minFilter=ct),n.mipmapCount===1&&(o.minFilter=j),n.generateMipmaps!==void 0&&(o.generateMipmaps=n.generateMipmaps),o.needsUpdate=!0,t&&t(o,n)},n,s),o}}class Tl extends P{constructor(e){super(e)}load(e,t,n,s){const o=new A,i=new Ln(this.manager);return i.setCrossOrigin(this.crossOrigin),i.setPath(this.path),i.load(e,function(e){o.image=e,o.needsUpdate=!0,t!==void 0&&t(o)},n,s),o}}class ie extends l{constructor(e,t=1){super(),this.type="Light",this.color=new o(e),this.intensity=t}dispose(){}copy(e){return super.copy(e),this.color.copy(e.color),this.intensity=e.intensity,this}toJSON(e){const t=super.toJSON(e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,this.groundColor!==void 0&&(t.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(t.object.distance=this.distance),this.angle!==void 0&&(t.object.angle=this.angle),this.decay!==void 0&&(t.object.decay=this.decay),this.penumbra!==void 0&&(t.object.penumbra=this.penumbra),this.shadow!==void 0&&(t.object.shadow=this.shadow.toJSON()),t}}ie.prototype.isLight=!0;class pi extends ie{constructor(e,t,n){super(e,n),this.type="HemisphereLight",this.position.copy(l.DefaultUp),this.updateMatrix(),this.groundColor=new o(t)}copy(e){return ie.prototype.copy.call(this,e),this.groundColor.copy(e.groundColor),this}}pi.prototype.isHemisphereLight=!0;const Sl=new a,Al=new t,kl=new t;class gi{constructor(e){this.camera=e,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new n(512,512),this.map=null,this.mapPass=null,this.matrix=new a,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new Jn,this._frameExtents=new n(1,1),this._viewportCount=1,this._viewports=[new h(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(e){const t=this.camera,n=this.matrix;Al.setFromMatrixPosition(e.matrixWorld),t.position.copy(Al),kl.setFromMatrixPosition(e.target.matrixWorld),t.lookAt(kl),t.updateMatrixWorld(),Sl.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Sl),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(t.projectionMatrix),n.multiply(t.matrixWorldInverse)}getViewport(e){return this._viewports[e]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(e){return this.camera=e.camera.clone(),this.bias=e.bias,this.radius=e.radius,this.mapSize.copy(e.mapSize),this}clone(){return(new this.constructor).copy(this)}toJSON(){const e={};return this.bias!==0&&(e.bias=this.bias),this.normalBias!==0&&(e.normalBias=this.normalBias),this.radius!==1&&(e.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}}class El extends gi{constructor(){super(new F(50,1,.5,500)),this.focus=1}updateMatrices(e){const t=this.camera,n=bn*2*e.angle*this.focus,s=this.mapSize.width/this.mapSize.height,o=e.distance||t.far;(n!==t.fov||s!==t.aspect||o!==t.far)&&(t.fov=n,t.aspect=s,t.far=o,t.updateProjectionMatrix()),super.updateMatrices(e)}copy(e){return super.copy(e),this.focus=e.focus,this}}El.prototype.isSpotLightShadow=!0;class bi extends ie{constructor(e,t,n=0,s=Math.PI/3,o=0,i=1){super(e,t),this.type="SpotLight",this.position.copy(l.DefaultUp),this.updateMatrix(),this.target=new l,this.distance=n,this.angle=s,this.penumbra=o,this.decay=i,this.shadow=new El}get power(){return this.intensity*Math.PI}set power(e){this.intensity=e/Math.PI}dispose(){this.shadow.dispose()}copy(e){return super.copy(e),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}bi.prototype.isSpotLight=!0;const xl=new a,Vn=new t,ji=new t;class _l extends gi{constructor(){super(new F(90,1,.5,500)),this._frameExtents=new n(4,2),this._viewportCount=6,this._viewports=[new h(2,1,1,1),new h(0,1,1,1),new h(3,1,1,1),new h(1,1,1,1),new h(3,0,1,1),new h(1,0,1,1)],this._cubeDirections=[new t(1,0,0),new t(-1,0,0),new t(0,0,1),new t(0,0,-1),new t(0,1,0),new t(0,-1,0)],this._cubeUps=[new t(0,1,0),new t(0,1,0),new t(0,1,0),new t(0,1,0),new t(0,0,1),new t(0,0,-1)]}updateMatrices(e,t=0){const n=this.camera,o=this.matrix,s=e.distance||n.far;s!==n.far&&(n.far=s,n.updateProjectionMatrix()),Vn.setFromMatrixPosition(e.matrixWorld),n.position.copy(Vn),ji.copy(n.position),ji.add(this._cubeDirections[t]),n.up.copy(this._cubeUps[t]),n.lookAt(ji),n.updateMatrixWorld(),o.makeTranslation(-Vn.x,-Vn.y,-Vn.z),xl.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix(xl)}}_l.prototype.isPointLightShadow=!0;class _i extends ie{constructor(e,t,n=0,s=1){super(e,t),this.type="PointLight",this.distance=n,this.decay=s,this.shadow=new _l}get power(){return this.intensity*4*Math.PI}set power(e){this.intensity=e/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(e){return super.copy(e),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}}_i.prototype.isPointLight=!0;class yl extends gi{constructor(){super(new ns(-5,5,5,-5,.5,500))}}yl.prototype.isDirectionalLightShadow=!0;class wi extends ie{constructor(e,t){super(e,t),this.type="DirectionalLight",this.position.copy(l.DefaultUp),this.updateMatrix(),this.target=new l,this.shadow=new yl}dispose(){this.shadow.dispose()}copy(e){return super.copy(e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}wi.prototype.isDirectionalLight=!0;class xi extends ie{constructor(e,t){super(e,t),this.type="AmbientLight"}}xi.prototype.isAmbientLight=!0;class ki extends ie{constructor(e,t,n=10,s=10){super(e,t),this.type="RectAreaLight",this.width=n,this.height=s}get power(){return this.intensity*this.width*this.height*Math.PI}set power(e){this.intensity=e/(this.width*this.height*Math.PI)}copy(e){return super.copy(e),this.width=e.width,this.height=e.height,this}toJSON(e){const t=super.toJSON(e);return t.object.width=this.width,t.object.height=this.height,t}}ki.prototype.isRectAreaLight=!0;class Fi{constructor(){this.coefficients=[];for(let e=0;e<9;e++)this.coefficients.push(new t)}set(e){for(let t=0;t<9;t++)this.coefficients[t].copy(e[t]);return this}zero(){for(let e=0;e<9;e++)this.coefficients[e].set(0,0,0);return this}getAt(e,t){const s=e.x,o=e.y,i=e.z,n=this.coefficients;return t.copy(n[0]).multiplyScalar(.282095),t.addScaledVector(n[1],.488603*o),t.addScaledVector(n[2],.488603*i),t.addScaledVector(n[3],.488603*s),t.addScaledVector(n[4],1.092548*(s*o)),t.addScaledVector(n[5],1.092548*(o*i)),t.addScaledVector(n[6],.315392*(3*i*i-1)),t.addScaledVector(n[7],1.092548*(s*i)),t.addScaledVector(n[8],.546274*(s*s-o*o)),t}getIrradianceAt(e,t){const s=e.x,o=e.y,i=e.z,n=this.coefficients;return t.copy(n[0]).multiplyScalar(.886227),t.addScaledVector(n[1],2*.511664*o),t.addScaledVector(n[2],2*.511664*i),t.addScaledVector(n[3],2*.511664*s),t.addScaledVector(n[4],2*.429043*s*o),t.addScaledVector(n[5],2*.429043*o*i),t.addScaledVector(n[6],.743125*i*i-.247708),t.addScaledVector(n[7],2*.429043*s*i),t.addScaledVector(n[8],.429043*(s*s-o*o)),t}add(e){for(let t=0;t<9;t++)this.coefficients[t].add(e.coefficients[t]);return this}addScaledSH(e,t){for(let n=0;n<9;n++)this.coefficients[n].addScaledVector(e.coefficients[n],t);return this}scale(e){for(let t=0;t<9;t++)this.coefficients[t].multiplyScalar(e);return this}lerp(e,t){for(let n=0;n<9;n++)this.coefficients[n].lerp(e.coefficients[n],t);return this}equals(e){for(let t=0;t<9;t++)if(!this.coefficients[t].equals(e.coefficients[t]))return!1;return!0}copy(e){return this.set(e.coefficients)}clone(){return(new this.constructor).copy(this)}fromArray(e,t=0){const n=this.coefficients;for(let s=0;s<9;s++)n[s].fromArray(e,t+s*3);return this}toArray(e=[],t=0){const n=this.coefficients;for(let s=0;s<9;s++)n[s].toArray(e,t+s*3);return e}static getBasisAt(e,t){const n=e.x,s=e.y,o=e.z;t[0]=.282095,t[1]=.488603*s,t[2]=.488603*o,t[3]=.488603*n,t[4]=1.092548*n*s,t[5]=1.092548*s*o,t[6]=.315392*(3*o*o-1),t[7]=1.092548*n*o,t[8]=.546274*(n*n-s*s)}}Fi.prototype.isSphericalHarmonics3=!0;class $n extends ie{constructor(e=new Fi,t=1){super(void 0,t),this.sh=e}copy(e){return super.copy(e),this.sh.copy(e.sh),this}fromJSON(e){return this.intensity=e.intensity,this.sh.fromArray(e.sh),this}toJSON(e){const t=super.toJSON(e);return t.object.sh=this.sh.toArray(),t}}$n.prototype.isLightProbe=!0;class jl extends P{constructor(e){super(e),this.textures={}}load(e,t,n,s){const o=this,i=new ae(o.manager);i.setPath(o.path),i.setRequestHeader(o.requestHeader),i.setWithCredentials(o.withCredentials),i.load(e,function(n){try{t(o.parse(JSON.parse(n)))}catch(t){s?s(t):console.error(t),o.manager.itemError(e)}},n,s)}parse(e){const r=this.textures;function i(e){return r[e]===void 0&&console.warn("THREE.MaterialLoader: Undefined texture",e),r[e]}const s=y.fromType(e.type);if(e.uuid!==void 0&&(s.uuid=e.uuid),e.name!==void 0&&(s.name=e.name),e.color!==void 0&&s.color!==void 0&&s.color.setHex(e.color),e.roughness!==void 0&&(s.roughness=e.roughness),e.metalness!==void 0&&(s.metalness=e.metalness),e.sheen!==void 0&&(s.sheen=e.sheen),e.sheenColor!==void 0&&(s.sheenColor=(new o).setHex(e.sheenColor)),e.sheenRoughness!==void 0&&(s.sheenRoughness=e.sheenRoughness),e.emissive!==void 0&&s.emissive!==void 0&&s.emissive.setHex(e.emissive),e.specular!==void 0&&s.specular!==void 0&&s.specular.setHex(e.specular),e.specularIntensity!==void 0&&(s.specularIntensity=e.specularIntensity),e.specularColor!==void 0&&s.specularColor!==void 0&&s.specularColor.setHex(e.specularColor),e.shininess!==void 0&&(s.shininess=e.shininess),e.clearcoat!==void 0&&(s.clearcoat=e.clearcoat),e.clearcoatRoughness!==void 0&&(s.clearcoatRoughness=e.clearcoatRoughness),e.transmission!==void 0&&(s.transmission=e.transmission),e.thickness!==void 0&&(s.thickness=e.thickness),e.attenuationDistance!==void 0&&(s.attenuationDistance=e.attenuationDistance),e.attenuationColor!==void 0&&s.attenuationColor!==void 0&&s.attenuationColor.setHex(e.attenuationColor),e.fog!==void 0&&(s.fog=e.fog),e.flatShading!==void 0&&(s.flatShading=e.flatShading),e.blending!==void 0&&(s.blending=e.blending),e.combine!==void 0&&(s.combine=e.combine),e.side!==void 0&&(s.side=e.side),e.shadowSide!==void 0&&(s.shadowSide=e.shadowSide),e.opacity!==void 0&&(s.opacity=e.opacity),e.transparent!==void 0&&(s.transparent=e.transparent),e.alphaTest!==void 0&&(s.alphaTest=e.alphaTest),e.depthTest!==void 0&&(s.depthTest=e.depthTest),e.depthWrite!==void 0&&(s.depthWrite=e.depthWrite),e.colorWrite!==void 0&&(s.colorWrite=e.colorWrite),e.stencilWrite!==void 0&&(s.stencilWrite=e.stencilWrite),e.stencilWriteMask!==void 0&&(s.stencilWriteMask=e.stencilWriteMask),e.stencilFunc!==void 0&&(s.stencilFunc=e.stencilFunc),e.stencilRef!==void 0&&(s.stencilRef=e.stencilRef),e.stencilFuncMask!==void 0&&(s.stencilFuncMask=e.stencilFuncMask),e.stencilFail!==void 0&&(s.stencilFail=e.stencilFail),e.stencilZFail!==void 0&&(s.stencilZFail=e.stencilZFail),e.stencilZPass!==void 0&&(s.stencilZPass=e.stencilZPass),e.wireframe!==void 0&&(s.wireframe=e.wireframe),e.wireframeLinewidth!==void 0&&(s.wireframeLinewidth=e.wireframeLinewidth),e.wireframeLinecap!==void 0&&(s.wireframeLinecap=e.wireframeLinecap),e.wireframeLinejoin!==void 0&&(s.wireframeLinejoin=e.wireframeLinejoin),e.rotation!==void 0&&(s.rotation=e.rotation),e.linewidth!==1&&(s.linewidth=e.linewidth),e.dashSize!==void 0&&(s.dashSize=e.dashSize),e.gapSize!==void 0&&(s.gapSize=e.gapSize),e.scale!==void 0&&(s.scale=e.scale),e.polygonOffset!==void 0&&(s.polygonOffset=e.polygonOffset),e.polygonOffsetFactor!==void 0&&(s.polygonOffsetFactor=e.polygonOffsetFactor),e.polygonOffsetUnits!==void 0&&(s.polygonOffsetUnits=e.polygonOffsetUnits),e.dithering!==void 0&&(s.dithering=e.dithering),e.alphaToCoverage!==void 0&&(s.alphaToCoverage=e.alphaToCoverage),e.premultipliedAlpha!==void 0&&(s.premultipliedAlpha=e.premultipliedAlpha),e.visible!==void 0&&(s.visible=e.visible),e.toneMapped!==void 0&&(s.toneMapped=e.toneMapped),e.userData!==void 0&&(s.userData=e.userData),e.vertexColors!==void 0&&(typeof e.vertexColors=="number"?s.vertexColors=e.vertexColors>0:s.vertexColors=e.vertexColors),e.uniforms!==void 0)for(const r in e.uniforms){const c=e.uniforms[r];switch(s.uniforms[r]={},c.type){case"t":s.uniforms[r].value=i(c.value);break;case"c":s.uniforms[r].value=(new o).setHex(c.value);break;case"v2":s.uniforms[r].value=(new n).fromArray(c.value);break;case"v3":s.uniforms[r].value=(new t).fromArray(c.value);break;case"v4":s.uniforms[r].value=(new h).fromArray(c.value);break;case"m3":s.uniforms[r].value=(new E).fromArray(c.value);break;case"m4":s.uniforms[r].value=(new a).fromArray(c.value);break;default:s.uniforms[r].value=c.value}}if(e.defines!==void 0&&(s.defines=e.defines),e.vertexShader!==void 0&&(s.vertexShader=e.vertexShader),e.fragmentShader!==void 0&&(s.fragmentShader=e.fragmentShader),e.extensions!==void 0)for(const t in e.extensions)s.extensions[t]=e.extensions[t];if(e.shading!==void 0&&(s.flatShading=e.shading===1),e.size!==void 0&&(s.size=e.size),e.sizeAttenuation!==void 0&&(s.sizeAttenuation=e.sizeAttenuation),e.map!==void 0&&(s.map=i(e.map)),e.matcap!==void 0&&(s.matcap=i(e.matcap)),e.alphaMap!==void 0&&(s.alphaMap=i(e.alphaMap)),e.bumpMap!==void 0&&(s.bumpMap=i(e.bumpMap)),e.bumpScale!==void 0&&(s.bumpScale=e.bumpScale),e.normalMap!==void 0&&(s.normalMap=i(e.normalMap)),e.normalMapType!==void 0&&(s.normalMapType=e.normalMapType),e.normalScale!==void 0){let t=e.normalScale;Array.isArray(t)===!1&&(t=[t,t]),s.normalScale=(new n).fromArray(t)}return e.displacementMap!==void 0&&(s.displacementMap=i(e.displacementMap)),e.displacementScale!==void 0&&(s.displacementScale=e.displacementScale),e.displacementBias!==void 0&&(s.displacementBias=e.displacementBias),e.roughnessMap!==void 0&&(s.roughnessMap=i(e.roughnessMap)),e.metalnessMap!==void 0&&(s.metalnessMap=i(e.metalnessMap)),e.emissiveMap!==void 0&&(s.emissiveMap=i(e.emissiveMap)),e.emissiveIntensity!==void 0&&(s.emissiveIntensity=e.emissiveIntensity),e.specularMap!==void 0&&(s.specularMap=i(e.specularMap)),e.specularIntensityMap!==void 0&&(s.specularIntensityMap=i(e.specularIntensityMap)),e.specularColorMap!==void 0&&(s.specularColorMap=i(e.specularColorMap)),e.envMap!==void 0&&(s.envMap=i(e.envMap)),e.envMapIntensity!==void 0&&(s.envMapIntensity=e.envMapIntensity),e.reflectivity!==void 0&&(s.reflectivity=e.reflectivity),e.refractionRatio!==void 0&&(s.refractionRatio=e.refractionRatio),e.lightMap!==void 0&&(s.lightMap=i(e.lightMap)),e.lightMapIntensity!==void 0&&(s.lightMapIntensity=e.lightMapIntensity),e.aoMap!==void 0&&(s.aoMap=i(e.aoMap)),e.aoMapIntensity!==void 0&&(s.aoMapIntensity=e.aoMapIntensity),e.gradientMap!==void 0&&(s.gradientMap=i(e.gradientMap)),e.clearcoatMap!==void 0&&(s.clearcoatMap=i(e.clearcoatMap)),e.clearcoatRoughnessMap!==void 0&&(s.clearcoatRoughnessMap=i(e.clearcoatRoughnessMap)),e.clearcoatNormalMap!==void 0&&(s.clearcoatNormalMap=i(e.clearcoatNormalMap)),e.clearcoatNormalScale!==void 0&&(s.clearcoatNormalScale=(new n).fromArray(e.clearcoatNormalScale)),e.transmissionMap!==void 0&&(s.transmissionMap=i(e.transmissionMap)),e.thicknessMap!==void 0&&(s.thicknessMap=i(e.thicknessMap)),e.sheenColorMap!==void 0&&(s.sheenColorMap=i(e.sheenColorMap)),e.sheenRoughnessMap!==void 0&&(s.sheenRoughnessMap=i(e.sheenRoughnessMap)),s}setTextures(e){return this.textures=e,this}}class Qs{static decodeText(e){if(typeof TextDecoder!="undefined")return(new TextDecoder).decode(e);let t="";for(let n=0,s=e.length;n<s;n++)t+=String.fromCharCode(e[n]);try{return decodeURIComponent(escape(t))}catch{return t}}static extractUrlBase(e){const t=e.lastIndexOf("/");return t===-1?"./":e.slice(0,t+1)}static resolveURL(e,t){return typeof e!="string"||e===""?"":(/^https?:\/\//i.test(t)&&/^\//.test(e)&&(t=t.replace(/(^https?:\/\/[^/]+).*/i,"$1")),/^(https?:)?\/\//i.test(e)?e:/^data:.*,.*$/i.test(e)?e:/^blob:.*$/i.test(e)?e:t+e)}}class Ni extends r{constructor(){super(),this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(e){return super.copy(e),this.instanceCount=e.instanceCount,this}clone(){return(new this.constructor).copy(this)}toJSON(){const e=super.toJSON(this);return e.instanceCount=this.instanceCount,e.isInstancedBufferGeometry=!0,e}}Ni.prototype.isInstancedBufferGeometry=!0;class bl extends P{constructor(e){super(e)}load(e,t,n,s){const o=this,i=new ae(o.manager);i.setPath(o.path),i.setRequestHeader(o.requestHeader),i.setWithCredentials(o.withCredentials),i.load(e,function(n){try{t(o.parse(JSON.parse(n)))}catch(t){s?s(t):console.error(t),o.manager.itemError(e)}},n,s)}parse(e){const o={},i={};function u(e,t){if(o[t]!==void 0)return o[t];const i=e.interleavedBuffers,n=i[t],a=m(e,n.buffer),r=Mt(n.type,a),s=new tt(r,n.stride);return s.uuid=n.uuid,o[t]=s,s}function m(e,t){if(i[t]!==void 0)return i[t];const s=e.arrayBuffers,o=s[t],n=new Uint32Array(o).buffer;return i[t]=n,n}const n=e.isInstancedBufferGeometry?new Ni:new r,a=e.data.index;if(a!==void 0){const e=Mt(a.type,a.array);n.setIndex(new d(e,1))}const h=e.data.attributes;for(const o in h){const t=h[o];let s;if(t.isInterleavedBufferAttribute){const n=u(e.data,t.data);s=new Je(n,t.itemSize,t.offset,t.normalized)}else{const e=Mt(t.type,t.array),n=t.isInstancedBufferAttribute?it:d;s=new n(e,t.itemSize,t.normalized)}t.name!==void 0&&(s.name=t.name),t.usage!==void 0&&s.setUsage(t.usage),t.updateRange!==void 0&&(s.updateRange.offset=t.updateRange.offset,s.updateRange.count=t.updateRange.count),n.setAttribute(o,s)}const c=e.data.morphAttributes;if(c)for(const t in c){const s=c[t],o=[];for(let i=0,a=s.length;i<a;i++){const t=s[i];let n;if(t.isInterleavedBufferAttribute){const s=u(e.data,t.data);n=new Je(s,t.itemSize,t.offset,t.normalized)}else{const e=Mt(t.type,t.array);n=new d(e,t.itemSize,t.normalized)}t.name!==void 0&&(n.name=t.name),o.push(n)}n.morphAttributes[t]=o}const f=e.data.morphTargetsRelative;f&&(n.morphTargetsRelative=!0);const l=e.data.groups||e.data.drawcalls||e.data.offsets;if(l!==void 0)for(let e=0,s=l.length;e!==s;++e){const t=l[e];n.addGroup(t.start,t.count,t.materialIndex)}const s=e.data.boundingSphere;if(s!==void 0){const e=new t;s.center!==void 0&&e.fromArray(s.center),n.boundingSphere=new ke(e,s.radius)}return e.name&&(n.name=e.name),e.userData&&(n.userData=e.userData),n}}class w2 extends P{constructor(e){super(e)}load(e,t,n,s){const i=this,a=this.path===""?Qs.extractUrlBase(e):this.path;this.resourcePath=this.resourcePath||a;const o=new ae(this.manager);o.setPath(this.path),o.setRequestHeader(this.requestHeader),o.setWithCredentials(this.withCredentials),o.load(e,function(n){let o=null;try{o=JSON.parse(n)}catch(t){s!==void 0&&s(t),console.error("THREE:ObjectLoader: Can't parse "+e+".",t.message);return}const a=o.metadata;if(a===void 0||a.type===void 0||a.type.toLowerCase()==="geometry"){console.error("THREE.ObjectLoader: Can't load "+e);return}i.parse(o,t)},n,s)}async loadAsync(e,t){const i=this,a=this.path===""?Qs.extractUrlBase(e):this.path;this.resourcePath=this.resourcePath||a;const n=new ae(this.manager);n.setPath(this.path),n.setRequestHeader(this.requestHeader),n.setWithCredentials(this.withCredentials);const r=await n.loadAsync(e,t),o=JSON.parse(r),s=o.metadata;if(s===void 0||s.type===void 0||s.type.toLowerCase()==="geometry")throw new Error("THREE.ObjectLoader: Can't load "+e);return await i.parseAsync(o)}parse(e,t){const i=this.parseAnimations(e.animations),a=this.parseShapes(e.shapes),r=this.parseGeometries(e.geometries,a),s=this.parseImages(e.images,function(){t!==void 0&&t(n)}),o=this.parseTextures(e.textures,s),c=this.parseMaterials(e.materials,o),n=this.parseObject(e.object,r,c,o,i),l=this.parseSkeletons(e.skeletons,n);if(this.bindSkeletons(n,l),t!==void 0){let e=!1;for(const t in s)if(s[t]instanceof HTMLImageElement){e=!0;break}e===!1&&t(n)}return n}async parseAsync(e){const s=this.parseAnimations(e.animations),o=this.parseShapes(e.shapes),i=this.parseGeometries(e.geometries,o),a=await this.parseImagesAsync(e.images),n=this.parseTextures(e.textures,a),r=this.parseMaterials(e.materials,n),t=this.parseObject(e.object,i,r,n,s),c=this.parseSkeletons(e.skeletons,t);return this.bindSkeletons(t,c),t}parseShapes(e){const t={};if(e!==void 0)for(let n=0,o=e.length;n<o;n++){const s=(new de).fromJSON(e[n]);t[s.uuid]=s}return t}parseSkeletons(e,t){const n={},s={};if(t.traverse(function(e){e.isBone&&(s[e.uuid]=e)}),e!==void 0)for(let t=0,i=e.length;t<i;t++){const o=(new qi).fromJSON(e[t],s);n[o.uuid]=o}return n}parseGeometries(e,t){const n={};if(e!==void 0){const s=new bl;for(let a=0,r=e.length;a<r;a++){let i;const o=e[a];switch(o.type){case"BufferGeometry":case"InstancedBufferGeometry":i=s.parse(o);break;case"Geometry":console.error("THREE.ObjectLoader: The legacy Geometry type is no longer supported.");break;default:o.type in Lo?i=Lo[o.type].fromJSON(o,t):console.warn(`THREE.ObjectLoader: Unsupported geometry type "${o.type}"`)}i.uuid=o.uuid,o.name!==void 0&&(i.name=o.name),i.isBufferGeometry===!0&&o.userData!==void 0&&(i.userData=o.userData),n[o.uuid]=i}}return n}parseMaterials(e,t){const n={},s={};if(e!==void 0){const o=new jl;o.setTextures(t);for(let i=0,a=e.length;i<a;i++){const t=e[i];if(t.type==="MultiMaterial"){const e=[];for(let i=0;i<t.materials.length;i++){const s=t.materials[i];n[s.uuid]===void 0&&(n[s.uuid]=o.parse(s)),e.push(n[s.uuid])}s[t.uuid]=e}else n[t.uuid]===void 0&&(n[t.uuid]=o.parse(t)),s[t.uuid]=n[t.uuid]}}return s}parseAnimations(e){const t={};if(e!==void 0)for(let n=0;n<e.length;n++){const o=e[n],s=Fn.parse(o);t[s.uuid]=s}return t}parseImages(e,t){const n=this,s={};let o;function a(e){return n.manager.itemStart(e),o.load(e,function(){n.manager.itemEnd(e)},void 0,function(){n.manager.itemError(e),n.manager.itemEnd(e)})}function i(e){if(typeof e=="string"){const t=e,s=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(t)?t:n.resourcePath+t;return a(s)}return e.data?{data:Mt(e.type,e.data),width:e.width,height:e.height}:null}if(e!==void 0&&e.length>0){const n=new ii(t);o=new Ln(n),o.setCrossOrigin(this.crossOrigin);for(let n=0,a=e.length;n<a;n++){const t=e[n],o=t.url;if(Array.isArray(o)){const e=[];for(let n=0,s=o.length;n<s;n++){const a=o[n],t=i(a);t!==null&&(t instanceof HTMLImageElement?e.push(t):e.push(new nt(t.data,t.width,t.height)))}s[t.uuid]=new st(e)}else{const e=i(t.url);s[t.uuid]=new st(e)}}}return s}async parseImagesAsync(e){const o=this,t={};let n;async function s(e){if(typeof e=="string"){const t=e,s=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(t)?t:o.resourcePath+t;return await n.loadAsync(s)}return e.data?{data:Mt(e.type,e.data),width:e.width,height:e.height}:null}if(e!==void 0&&e.length>0){n=new Ln(this.manager),n.setCrossOrigin(this.crossOrigin);for(let o=0,a=e.length;o<a;o++){const n=e[o],i=n.url;if(Array.isArray(i)){const e=[];for(let n=0,o=i.length;n<o;n++){const a=i[n],t=await s(a);t!==null&&(t instanceof HTMLImageElement?e.push(t):e.push(new nt(t.data,t.width,t.height)))}t[n.uuid]=new st(e)}else{const e=await s(n.url);t[n.uuid]=new st(e)}}}return t}parseTextures(e,t){function n(e,t){return typeof e=="number"?e:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",e),t[e])}const s={};if(e!==void 0)for(let r=0,l=e.length;r<l;r++){const o=e[r];o.image===void 0&&console.warn('THREE.ObjectLoader: No "image" specified for',o.uuid),t[o.image]===void 0&&console.warn("THREE.ObjectLoader: Undefined image",o.image);const c=t[o.image],a=c.data;let i;Array.isArray(a)?(i=new St,a.length===6&&(i.needsUpdate=!0)):(a&&a.data?i=new nt:i=new A,a&&(i.needsUpdate=!0)),i.source=c,i.uuid=o.uuid,o.name!==void 0&&(i.name=o.name),o.mapping!==void 0&&(i.mapping=n(o.mapping,O2)),o.offset!==void 0&&i.offset.fromArray(o.offset),o.repeat!==void 0&&i.repeat.fromArray(o.repeat),o.center!==void 0&&i.center.fromArray(o.center),o.rotation!==void 0&&(i.rotation=o.rotation),o.wrap!==void 0&&(i.wrapS=n(o.wrap[0],ol),i.wrapT=n(o.wrap[1],ol)),o.format!==void 0&&(i.format=o.format),o.type!==void 0&&(i.type=o.type),o.encoding!==void 0&&(i.encoding=o.encoding),o.minFilter!==void 0&&(i.minFilter=n(o.minFilter,sl)),o.magFilter!==void 0&&(i.magFilter=n(o.magFilter,sl)),o.anisotropy!==void 0&&(i.anisotropy=o.anisotropy),o.flipY!==void 0&&(i.flipY=o.flipY),o.premultiplyAlpha!==void 0&&(i.premultiplyAlpha=o.premultiplyAlpha),o.unpackAlignment!==void 0&&(i.unpackAlignment=o.unpackAlignment),o.userData!==void 0&&(i.userData=o.userData),s[o.uuid]=i}return s}parseObject(e,t,n,s,i){let a;function c(e){return t[e]===void 0&&console.warn("THREE.ObjectLoader: Undefined geometry",e),t[e]}function r(e){if(e===void 0)return void 0;if(Array.isArray(e)){const t=[];for(let s=0,i=e.length;s<i;s++){const o=e[s];n[o]===void 0&&console.warn("THREE.ObjectLoader: Undefined material",o),t.push(n[o])}return t}return n[e]===void 0&&console.warn("THREE.ObjectLoader: Undefined material",e),n[e]}function h(e){return s[e]===void 0&&console.warn("THREE.ObjectLoader: Undefined texture",e),s[e]}let d,u;switch(e.type){case"Scene":a=new Os,e.background!==void 0&&(Number.isInteger(e.background)?a.background=new o(e.background):a.background=h(e.background)),e.environment!==void 0&&(a.environment=h(e.environment)),e.fog!==void 0&&(e.fog.type==="Fog"?a.fog=new _s(e.fog.color,e.fog.near,e.fog.far):e.fog.type==="FogExp2"&&(a.fog=new bs(e.fog.color,e.fog.density)));break;case"PerspectiveCamera":a=new F(e.fov,e.aspect,e.near,e.far),e.focus!==void 0&&(a.focus=e.focus),e.zoom!==void 0&&(a.zoom=e.zoom),e.filmGauge!==void 0&&(a.filmGauge=e.filmGauge),e.filmOffset!==void 0&&(a.filmOffset=e.filmOffset),e.view!==void 0&&(a.view=Object.assign({},e.view));break;case"OrthographicCamera":a=new ns(e.left,e.right,e.top,e.bottom,e.near,e.far),e.zoom!==void 0&&(a.zoom=e.zoom),e.view!==void 0&&(a.view=Object.assign({},e.view));break;case"AmbientLight":a=new xi(e.color,e.intensity);break;case"DirectionalLight":a=new wi(e.color,e.intensity);break;case"PointLight":a=new _i(e.color,e.intensity,e.distance,e.decay);break;case"RectAreaLight":a=new ki(e.color,e.intensity,e.width,e.height);break;case"SpotLight":a=new bi(e.color,e.intensity,e.distance,e.angle,e.penumbra,e.decay);break;case"HemisphereLight":a=new pi(e.color,e.groundColor,e.intensity);break;case"LightProbe":a=(new $n).fromJSON(e);break;case"SkinnedMesh":d=c(e.geometry),u=r(e.material),a=new Rs(d,u),e.bindMode!==void 0&&(a.bindMode=e.bindMode),e.bindMatrix!==void 0&&a.bindMatrix.fromArray(e.bindMatrix),e.skeleton!==void 0&&(a.skeleton=e.skeleton);break;case"Mesh":d=c(e.geometry),u=r(e.material),a=new x(d,u);break;case"InstancedMesh":d=c(e.geometry),u=r(e.material);const n=e.count,s=e.instanceMatrix,t=e.instanceColor;a=new Bi(d,u,n),a.instanceMatrix=new it(new Float32Array(s.array),16),t!==void 0&&(a.instanceColor=new it(new Float32Array(t.array),t.itemSize));break;case"LOD":a=new $u;break;case"Line":a=new ge(c(e.geometry),r(e.material));break;case"LineLoop":a=new Di(c(e.geometry),r(e.material));break;case"LineSegments":a=new B(c(e.geometry),r(e.material));break;case"PointCloud":case"Points":a=new ts(c(e.geometry),r(e.material));break;case"Sprite":a=new Ts(r(e.material));break;case"Group":a=new Ke;break;case"Bone":a=new ls;break;default:a=new l}if(a.uuid=e.uuid,e.name!==void 0&&(a.name=e.name),e.matrix!==void 0?(a.matrix.fromArray(e.matrix),e.matrixAutoUpdate!==void 0&&(a.matrixAutoUpdate=e.matrixAutoUpdate),a.matrixAutoUpdate&&a.matrix.decompose(a.position,a.quaternion,a.scale)):(e.position!==void 0&&a.position.fromArray(e.position),e.rotation!==void 0&&a.rotation.fromArray(e.rotation),e.quaternion!==void 0&&a.quaternion.fromArray(e.quaternion),e.scale!==void 0&&a.scale.fromArray(e.scale)),e.castShadow!==void 0&&(a.castShadow=e.castShadow),e.receiveShadow!==void 0&&(a.receiveShadow=e.receiveShadow),e.shadow&&(e.shadow.bias!==void 0&&(a.shadow.bias=e.shadow.bias),e.shadow.normalBias!==void 0&&(a.shadow.normalBias=e.shadow.normalBias),e.shadow.radius!==void 0&&(a.shadow.radius=e.shadow.radius),e.shadow.mapSize!==void 0&&a.shadow.mapSize.fromArray(e.shadow.mapSize),e.shadow.camera!==void 0&&(a.shadow.camera=this.parseObject(e.shadow.camera))),e.visible!==void 0&&(a.visible=e.visible),e.frustumCulled!==void 0&&(a.frustumCulled=e.frustumCulled),e.renderOrder!==void 0&&(a.renderOrder=e.renderOrder),e.userData!==void 0&&(a.userData=e.userData),e.layers!==void 0&&(a.layers.mask=e.layers),e.children!==void 0){const o=e.children;for(let e=0;e<o.length;e++)a.add(this.parseObject(o[e],t,n,s,i))}if(e.animations!==void 0){const t=e.animations;for(let e=0;e<t.length;e++){const n=t[e];a.animations.push(i[n])}}if(e.type==="LOD"){e.autoUpdate!==void 0&&(a.autoUpdate=e.autoUpdate);const t=e.levels;for(let e=0;e<t.length;e++){const n=t[e],s=a.getObjectByProperty("uuid",n.object);s!==void 0&&a.addLevel(s,n.distance)}}return a}bindSkeletons(e,t){if(Object.keys(t).length===0)return;e.traverse(function(e){if(e.isSkinnedMesh===!0&&e.skeleton!==void 0){const n=t[e.skeleton];n===void 0?console.warn("THREE.ObjectLoader: No skeleton found with UUID:",e.skeleton):e.bind(n,e.bindMatrix)}})}setTexturePath(e){return console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath()."),this.setResourcePath(e)}}const O2={UVMapping:Eo,CubeReflectionMapping:Be,CubeRefractionMapping:Ve,EquirectangularReflectionMapping:mn,EquirectangularRefractionMapping:Sn,CubeUVReflectionMapping:Qt},ol={RepeatWrapping:Tn,ClampToEdgeWrapping:R,MirroredRepeatWrapping:Dn},sl={NearestFilter:O,NearestMipmapNearestFilter:xo,NearestMipmapLinearFilter:yo,LinearFilter:j,LinearMipmapNearestFilter:ni,LinearMipmapLinearFilter:ct};class tl extends P{constructor(e){super(e),typeof createImageBitmap=="undefined"&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),typeof fetch=="undefined"&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(e){return this.options=e,this}load(e,t,n,s){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const o=this,i=et.get(e);if(i!==void 0)return o.manager.itemStart(e),setTimeout(function(){t&&t(i),o.manager.itemEnd(e)},0),i;const a={};a.credentials=this.crossOrigin==="anonymous"?"same-origin":"include",a.headers=this.requestHeader,fetch(e,a).then(function(e){return e.blob()}).then(function(e){return createImageBitmap(e,Object.assign(o.options,{colorSpaceConversion:"none"}))}).then(function(n){et.add(e,n),t&&t(n),o.manager.itemEnd(e)}).catch(function(t){s&&s(t),o.manager.itemError(e),o.manager.itemEnd(e)}),o.manager.itemStart(e)}}tl.prototype.isImageBitmapLoader=!0;let Ks;const $i={getContext:function(){return Ks===void 0&&(Ks=new(window.AudioContext||window.webkitAudioContext)),Ks},setContext:function(e){Ks=e}};class el extends P{constructor(e){super(e)}load(e,t,n,s){const i=this,o=new ae(this.manager);o.setResponseType("arraybuffer"),o.setPath(this.path),o.setRequestHeader(this.requestHeader),o.setWithCredentials(this.withCredentials),o.load(e,function(n){try{const e=n.slice(0),s=$i.getContext();s.decodeAudioData(e,function(e){t(e)})}catch(t){s?s(t):console.error(t),i.manager.itemError(e)}},n,s)}}class Jc extends $n{constructor(e,n,s=1){super(void 0,s);const i=(new o).set(e),a=(new o).set(n),r=new t(i.r,i.g,i.b),c=new t(a.r,a.g,a.b),l=Math.sqrt(Math.PI),d=l*Math.sqrt(.75);this.sh.coefficients[0].copy(r).add(c).multiplyScalar(l),this.sh.coefficients[1].copy(r).sub(c).multiplyScalar(d)}}Jc.prototype.isHemisphereLightProbe=!0;class Zc extends $n{constructor(e,t=1){super(void 0,t);const n=(new o).set(e);this.sh.coefficients[0].set(n.r,n.g,n.b).multiplyScalar(2*Math.sqrt(Math.PI))}}Zc.prototype.isAmbientLightProbe=!0;const Qc=new a,Xc=new a,jt=new a;class N2{constructor(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new F,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new F,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}update(e){const t=this._cache,n=t.focus!==e.focus||t.fov!==e.fov||t.aspect!==e.aspect*this.aspect||t.near!==e.near||t.far!==e.far||t.zoom!==e.zoom||t.eyeSep!==this.eyeSep;if(n){t.focus=e.focus,t.fov=e.fov,t.aspect=e.aspect*this.aspect,t.near=e.near,t.far=e.far,t.zoom=e.zoom,t.eyeSep=this.eyeSep,jt.copy(e.projectionMatrix);const a=t.eyeSep/2,o=a*t.near/t.focus,i=t.near*Math.tan(Ye*t.fov*.5)/t.zoom;let n,s;Xc.elements[12]=-a,Qc.elements[12]=a,n=-i*t.aspect+o,s=i*t.aspect+o,jt.elements[0]=2*t.near/(s-n),jt.elements[8]=(s+n)/(s-n),this.cameraL.projectionMatrix.copy(jt),n=-i*t.aspect-o,s=i*t.aspect-o,jt.elements[0]=2*t.near/(s-n),jt.elements[8]=(s+n)/(s-n),this.cameraR.projectionMatrix.copy(jt)}this.cameraL.matrixWorld.copy(e.matrixWorld).multiply(Xc),this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(Qc)}}class Gc{constructor(e=!0){this.autoStart=e,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=Uc(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let e=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const t=Uc();e=(t-this.oldTime)/1e3,this.oldTime=t,this.elapsedTime+=e}return e}}function Uc(){return(typeof performance=="undefined"?Date:performance).now()}const _t=new t,Mc=new T,I2=new t,yt=new t;class V2 extends l{constructor(){super(),this.type="AudioListener",this.context=$i.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new Gc}getInput(){return this.gain}removeFilter(){return this.filter!==null&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this}getFilter(){return this.filter}setFilter(e){return this.filter!==null?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=e,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this}updateMatrixWorld(e){super.updateMatrixWorld(e);const t=this.context.listener,n=this.up;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(_t,Mc,I2),yt.set(0,0,-1).applyQuaternion(Mc),t.positionX){const e=this.context.currentTime+this.timeDelta;t.positionX.linearRampToValueAtTime(_t.x,e),t.positionY.linearRampToValueAtTime(_t.y,e),t.positionZ.linearRampToValueAtTime(_t.z,e),t.forwardX.linearRampToValueAtTime(yt.x,e),t.forwardY.linearRampToValueAtTime(yt.y,e),t.forwardZ.linearRampToValueAtTime(yt.z,e),t.upX.linearRampToValueAtTime(n.x,e),t.upY.linearRampToValueAtTime(n.y,e),t.upZ.linearRampToValueAtTime(n.z,e)}else t.setPosition(_t.x,_t.y,_t.z),t.setOrientation(yt.x,yt.y,yt.z,n.x,n.y,n.z)}}class Yi extends l{constructor(e){super(),this.type="Audio",this.listener=e,this.context=e.context,this.gain=this.context.createGain(),this.gain.connect(e.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(e){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=e,this.connect(),this}setMediaElementSource(e){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(e),this.connect(),this}setMediaStreamSource(e){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(e),this.connect(),this}setBuffer(e){return this.buffer=e,this.sourceType="buffer",this.autoplay&&this.play(),this}play(e=0){if(this.isPlaying===!0){console.warn("THREE.Audio: Audio is already playing.");return}if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}this._startedAt=this.context.currentTime+e;const t=this.context.createBufferSource();return t.buffer=this.buffer,t.loop=this.loop,t.loopStart=this.loopStart,t.loopEnd=this.loopEnd,t.onended=this.onEnded.bind(this),t.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=t,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.isPlaying===!0&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,this.loop===!0&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this}stop(){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this._progress=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let e=1,t=this.filters.length;e<t;e++)this.filters[e-1].connect(this.filters[e]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let e=1,t=this.filters.length;e<t;e++)this.filters[e-1].disconnect(this.filters[e]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}getFilters(){return this.filters}setFilters(e){return e||(e=[]),this._connected===!0?(this.disconnect(),this.filters=e.slice(),this.connect()):this.filters=e.slice(),this}setDetune(e){if(this.detune=e,this.source.detune===void 0)return;return this.isPlaying===!0&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(e){return this.setFilters(e?[e]:[])}setPlaybackRate(e){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.playbackRate=e,this.isPlaying===!0&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return this.hasPlaybackControl===!1?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(e){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.loop=e,this.isPlaying===!0&&(this.source.loop=this.loop),this}setLoopStart(e){return this.loopStart=e,this}setLoopEnd(e){return this.loopEnd=e,this}getVolume(){return this.gain.gain.value}setVolume(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this}}const bt=new t,Sc=new T,K2=new t,at=new t;class Y2 extends Yi{constructor(e){super(e),this.panner=this.context.createPanner(),this.panner.panningModel="HRTF",this.panner.connect(this.gain)}disconnect(){super.disconnect(),this.panner.disconnect(this.gain)}getOutput(){return this.panner}getRefDistance(){return this.panner.refDistance}setRefDistance(e){return this.panner.refDistance=e,this}getRolloffFactor(){return this.panner.rolloffFactor}setRolloffFactor(e){return this.panner.rolloffFactor=e,this}getDistanceModel(){return this.panner.distanceModel}setDistanceModel(e){return this.panner.distanceModel=e,this}getMaxDistance(){return this.panner.maxDistance}setMaxDistance(e){return this.panner.maxDistance=e,this}setDirectionalCone(e,t,n){return this.panner.coneInnerAngle=e,this.panner.coneOuterAngle=t,this.panner.coneOuterGain=n,this}updateMatrixWorld(e){if(super.updateMatrixWorld(e),this.hasPlaybackControl===!0&&this.isPlaying===!1)return;this.matrixWorld.decompose(bt,Sc,K2),at.set(0,0,1).applyQuaternion(Sc);const t=this.panner;if(t.positionX){const e=this.context.currentTime+this.listener.timeDelta;t.positionX.linearRampToValueAtTime(bt.x,e),t.positionY.linearRampToValueAtTime(bt.y,e),t.positionZ.linearRampToValueAtTime(bt.z,e),t.orientationX.linearRampToValueAtTime(at.x,e),t.orientationY.linearRampToValueAtTime(at.y,e),t.orientationZ.linearRampToValueAtTime(at.z,e)}else t.setPosition(bt.x,bt.y,bt.z),t.setOrientation(at.x,at.y,at.z)}}class kc{constructor(e,t=2048){this.analyser=e.context.createAnalyser(),this.analyser.fftSize=t,this.data=new Uint8Array(this.analyser.frequencyBinCount),e.getOutput().connect(this.analyser)}getFrequencyData(){return this.analyser.getByteFrequencyData(this.data),this.data}getAverageFrequency(){let t=0;const e=this.getFrequencyData();for(let n=0;n<e.length;n++)t+=e[n];return t/e.length}}class Ec{constructor(e,t,n){this.binding=e,this.valueSize=n;let s,o,i;switch(t){case"quaternion":s=this._slerp,o=this._slerpAdditive,i=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(n*6),this._workIndex=5;break;case"string":case"bool":s=this._select,o=this._select,i=this._setAdditiveIdentityOther,this.buffer=new Array(n*5);break;default:s=this._lerp,o=this._lerpAdditive,i=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(n*5)}this._mixBufferRegion=s,this._mixBufferRegionAdditive=o,this._setIdentity=i,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(e,t){const o=this.buffer,s=this.valueSize,i=e*s+s;let n=this.cumulativeWeight;if(n===0){for(let e=0;e!==s;++e)o[i+e]=o[e];n=t}else{n+=t;const e=t/n;this._mixBufferRegion(o,i,0,e,s)}this.cumulativeWeight=n}accumulateAdditive(e){const n=this.buffer,t=this.valueSize,s=t*this._addIndex;this.cumulativeWeightAdditive===0&&this._setIdentity(),this._mixBufferRegionAdditive(n,s,0,e,t),this.cumulativeWeightAdditive+=e}apply(e){const t=this.valueSize,n=this.buffer,s=e*t+t,o=this.cumulativeWeight,i=this.cumulativeWeightAdditive,a=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,o<1){const e=t*this._origIndex;this._mixBufferRegion(n,s,e,1-o,t)}i>0&&this._mixBufferRegionAdditive(n,s,this._addIndex*t,1,t);for(let e=t,o=t+t;e!==o;++e)if(n[e]!==n[e+t]){a.setValue(n,s);break}}saveOriginalState(){const s=this.binding,e=this.buffer,t=this.valueSize,n=t*this._origIndex;s.getValue(e,n);for(let s=t,o=n;s!==o;++s)e[s]=e[n+s%t];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const e=this.valueSize*3;this.binding.setValue(this.buffer,e)}_setAdditiveIdentityNumeric(){const e=this._addIndex*this.valueSize,t=e+this.valueSize;for(let n=e;n<t;n++)this.buffer[n]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const e=this._origIndex*this.valueSize,t=this._addIndex*this.valueSize;for(let n=0;n<this.valueSize;n++)this.buffer[t+n]=this.buffer[e+n]}_select(e,t,n,s,o){if(s>=.5)for(let s=0;s!==o;++s)e[t+s]=e[n+s]}_slerp(e,t,n,s){T.slerpFlat(e,t,e,t,e,n,s)}_slerpAdditive(e,t,n,s,o){const i=this._workIndex*o;T.multiplyQuaternionsFlat(e,i,e,t,e,n),T.slerpFlat(e,t,e,t,e,i,s)}_lerp(e,t,n,s,o){const i=1-s;for(let a=0;a!==o;++a){const r=t+a;e[r]=e[r]*i+e[n+a]*s}}_lerpAdditive(e,t,n,s,o){for(let i=0;i!==o;++i){const a=t+i;e[a]=e[a]+e[n+i]*s}}}const Zi="\\[\\]\\.:\\/",Z2=new RegExp("["+Zi+"]","g"),Ji="[^"+Zi+"]",e3="[^"+Zi.replace("\\.","")+"]",t3=/((?:WC+[/:])*)/.source.replace("WC",Ji),n3=/(WCOD+)?/.source.replace("WCOD",e3),s3=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",Ji),o3=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",Ji),i3=new RegExp("^"+t3+n3+s3+o3+"$"),a3=["material","materials","bones"];class r3{constructor(e,t,n){const s=n||u.parseTrackName(t);this._targetGroup=e,this._bindings=e.subscribe_(t,s)}getValue(e,t){this.bind();const s=this._targetGroup.nCachedObjects_,n=this._bindings[s];n!==void 0&&n.getValue(e,t)}setValue(e,t){const n=this._bindings;for(let s=this._targetGroup.nCachedObjects_,o=n.length;s!==o;++s)n[s].setValue(e,t)}bind(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].bind()}unbind(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].unbind()}}class u{constructor(e,t,n){this.path=t,this.parsedPath=n||u.parseTrackName(t),this.node=u.findNode(e,this.parsedPath.nodeName)||e,this.rootNode=e,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(e,t,n){return e&&e.isAnimationObjectGroup?new u.Composite(e,t,n):new u(e,t,n)}static sanitizeNodeName(e){return e.replace(/\s/g,"_").replace(Z2,"")}static parseTrackName(e){const n=i3.exec(e);if(n===null)throw new Error("PropertyBinding: Cannot parse trackName: "+e);const t={nodeName:n[2],objectName:n[3],objectIndex:n[4],propertyName:n[5],propertyIndex:n[6]},s=t.nodeName&&t.nodeName.lastIndexOf(".");if(s!==void 0&&s!==-1){const e=t.nodeName.substring(s+1);a3.indexOf(e)!==-1&&(t.nodeName=t.nodeName.substring(0,s),t.objectName=e)}if(t.propertyName===null||t.propertyName.length===0)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+e);return t}static findNode(e,t){if(t===void 0||t===""||t==="."||t===-1||t===e.name||t===e.uuid)return e;if(e.skeleton){const n=e.skeleton.getBoneByName(t);if(n!==void 0)return n}if(e.children){const n=function(e){for(let o=0;o<e.length;o++){const s=e[o];if(s.name===t||s.uuid===t)return s;const i=n(s.children);if(i)return i}return null},s=n(e.children);if(s)return s}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(e,t){e[t]=this.targetObject[this.propertyName]}_getValue_array(e,t){const n=this.resolvedProperty;for(let s=0,o=n.length;s!==o;++s)e[t++]=n[s]}_getValue_arrayElement(e,t){e[t]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(e,t){this.resolvedProperty.toArray(e,t)}_setValue_direct(e,t){this.targetObject[this.propertyName]=e[t]}_setValue_direct_setNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(e,t){const n=this.resolvedProperty;for(let s=0,o=n.length;s!==o;++s)n[s]=e[t++]}_setValue_array_setNeedsUpdate(e,t){const n=this.resolvedProperty;for(let s=0,o=n.length;s!==o;++s)n[s]=e[t++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(e,t){const n=this.resolvedProperty;for(let s=0,o=n.length;s!==o;++s)n[s]=e[t++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(e,t){this.resolvedProperty[this.propertyIndex]=e[t]}_setValue_arrayElement_setNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(e,t){this.resolvedProperty.fromArray(e,t)}_setValue_fromArray_setNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(e,t){this.bind(),this.getValue(e,t)}_setValue_unbound(e,t){this.bind(),this.setValue(e,t)}bind(){let e=this.node;const n=this.parsedPath,i=n.objectName,a=n.propertyName;let s=n.propertyIndex;if(e||(e=u.findNode(this.rootNode,n.nodeName)||this.rootNode,this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!e){console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");return}if(i){let t=n.objectIndex;switch(i){case"materials":if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}e=e.material.materials;break;case"bones":if(!e.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}e=e.skeleton.bones;for(let n=0;n<e.length;n++)if(e[n].name===t){t=n;break}break;default:if(e[i]===void 0){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}e=e[i]}if(t!==void 0){if(e[t]===void 0){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,e);return}e=e[t]}}const t=e[a];if(t===void 0){const t=n.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+t+"."+a+" but it wasn't found.",e);return}let r=this.Versioning.None;this.targetObject=e,e.needsUpdate!==void 0?r=this.Versioning.NeedsUpdate:e.matrixWorldNeedsUpdate!==void 0&&(r=this.Versioning.MatrixWorldNeedsUpdate);let o=this.BindingType.Direct;if(s!==void 0){if(a==="morphTargetInfluences"){if(!e.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(e.geometry.isBufferGeometry){if(!e.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}e.morphTargetDictionary[s]!==void 0&&(s=e.morphTargetDictionary[s])}else{console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.",this);return}}o=this.BindingType.ArrayElement,this.resolvedProperty=t,this.propertyIndex=s}else t.fromArray!==void 0&&t.toArray!==void 0?(o=this.BindingType.HasFromToArray,this.resolvedProperty=t):Array.isArray(t)?(o=this.BindingType.EntireArray,this.resolvedProperty=t):this.propertyName=a;this.getValue=this.GetterByBindingType[o],this.setValue=this.SetterByBindingTypeAndVersioning[o][r]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}u.Composite=r3,u.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},u.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},u.prototype.GetterByBindingType=[u.prototype._getValue_direct,u.prototype._getValue_array,u.prototype._getValue_arrayElement,u.prototype._getValue_toArray],u.prototype.SetterByBindingTypeAndVersioning=[[u.prototype._setValue_direct,u.prototype._setValue_direct_setNeedsUpdate,u.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[u.prototype._setValue_array,u.prototype._setValue_array_setNeedsUpdate,u.prototype._setValue_array_setMatrixWorldNeedsUpdate],[u.prototype._setValue_arrayElement,u.prototype._setValue_arrayElement_setNeedsUpdate,u.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[u.prototype._setValue_fromArray,u.prototype._setValue_fromArray_setNeedsUpdate,u.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class _c{constructor(){this.uuid=$(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;const t={};this._indicesByUUID=t;for(let e=0,n=arguments.length;e!==n;++e)t[arguments[e].uuid]=e;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};const e=this;this.stats={objects:{get total(){return e._objects.length},get inUse(){return this.total-e.nCachedObjects_}},get bindingsPerObject(){return e._bindings.length}}}add(){const e=this._objects,t=this._indicesByUUID,o=this._paths,i=this._parsedPaths,n=this._bindings,a=n.length;let r=void 0,c=e.length,s=this.nCachedObjects_;for(let h=0,f=arguments.length;h!==f;++h){const d=arguments[h],m=d.uuid;let l=t[m];if(l===void 0){l=c++,t[m]=l,e.push(d);for(let e=0,t=a;e!==t;++e)n[e].push(new u(d,o[e],i[e]))}else if(l<s){r=e[l];const c=--s,h=e[c];t[h.uuid]=l,e[l]=h,t[m]=c,e[c]=d;for(let e=0,r=a;e!==r;++e){const t=n[e],h=t[c];let s=t[l];t[l]=h,s===void 0&&(s=new u(d,o[e],i[e])),t[c]=s}}else e[l]!==r&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=s}remove(){const e=this._objects,t=this._indicesByUUID,s=this._bindings,o=s.length;let n=this.nCachedObjects_;for(let a=0,l=arguments.length;a!==l;++a){const r=arguments[a],c=r.uuid,i=t[c];if(i!==void 0&&i>=n){const a=n++,l=e[a];t[l.uuid]=i,e[i]=l,t[c]=a,e[a]=r;for(let t=0,n=o;t!==n;++t){const e=s[t],r=e[a],c=e[i];e[i]=r,e[a]=c}}}this.nCachedObjects_=n}uncache(){const e=this._objects,t=this._indicesByUUID,n=this._bindings,o=n.length;let s=this.nCachedObjects_,i=e.length;for(let r=0,l=arguments.length;r!==l;++r){const d=arguments[r],c=d.uuid,a=t[c];if(a!==void 0)if(delete t[c],a<s){const r=--s,c=e[r],l=--i,d=e[l];t[c.uuid]=a,e[a]=c,t[d.uuid]=r,e[r]=d,e.pop();for(let t=0,s=o;t!==s;++t){const e=n[t],i=e[r],c=e[l];e[a]=i,e[r]=c,e.pop()}}else{const s=--i,r=e[s];s>0&&(t[r.uuid]=a),e[a]=r,e.pop();for(let e=0,i=o;e!==i;++e){const t=n[e];t[a]=t[s],t.pop()}}}this.nCachedObjects_=s}subscribe_(e,t){const a=this._bindingsIndicesByPath;let n=a[e];const s=this._bindings;if(n!==void 0)return s[n];const r=this._paths,c=this._parsedPaths,o=this._objects,l=o.length,d=this.nCachedObjects_,i=new Array(l);n=s.length,a[e]=n,r.push(e),c.push(t),s.push(i);for(let n=d,s=o.length;n!==s;++n){const a=o[n];i[n]=new u(a,e,t)}return i}unsubscribe_(e){const n=this._bindingsIndicesByPath,t=n[e];if(t!==void 0){const i=this._paths,a=this._parsedPaths,s=this._bindings,o=s.length-1,r=s[o],c=e[o];n[c]=t,s[t]=r,s.pop(),a[t]=a[o],a.pop(),i[t]=i[o],i.pop()}}}_c.prototype.isAnimationObjectGroup=!0;class d3{constructor(e,t,n=null,s=t.blendMode){this._mixer=e,this._clip=t,this._localRoot=n,this.blendMode=s;const i=t.tracks,o=i.length,a=new Array(o),r={endingStart:wt,endingEnd:wt};for(let e=0;e!==o;++e){const t=i[e].createInterpolant(null);a[e]=t,t.settings=r}this._interpolantSettings=r,this._interpolants=a,this._propertyBindings=new Array(o),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=Qu,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&this.timeScale!==0&&this._startTime===null&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(e){return this._startTime=e,this}setLoop(e,t){return this.loop=e,this.repetitions=t,this}setEffectiveWeight(e){return this.weight=e,this._effectiveWeight=this.enabled?e:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(e){return this._scheduleFading(e,0,1)}fadeOut(e){return this._scheduleFading(e,1,0)}crossFadeFrom(e,t,n){if(e.fadeOut(t),this.fadeIn(t),n){const n=this._clip.duration,s=e._clip.duration,o=s/n,i=n/s;e.warp(1,o,t),this.warp(i,1,t)}return this}crossFadeTo(e,t,n){return e.crossFadeFrom(this,t,n)}stopFading(){const e=this._weightInterpolant;return e!==null&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this}setEffectiveTimeScale(e){return this.timeScale=e,this._effectiveTimeScale=this.paused?0:e,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(e){return this.timeScale=this._clip.duration/e,this.stopWarping()}syncWith(e){return this.time=e.time,this.timeScale=e.timeScale,this.stopWarping()}halt(e){return this.warp(this._effectiveTimeScale,0,e)}warp(e,t,n){const o=this._mixer,i=o.time,a=this.timeScale;let s=this._timeScaleInterpolant;s===null&&(s=o._lendControlInterpolant(),this._timeScaleInterpolant=s);const r=s.parameterPositions,c=s.sampleValues;return r[0]=i,r[1]=i+n,c[0]=e/a,c[1]=t/a,this}stopWarping(){const e=this._timeScaleInterpolant;return e!==null&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(e,t,n,s){if(!this.enabled){this._updateWeight(e);return}const i=this._startTime;if(i!==null){const s=(e-i)*n;if(s<0||n===0)return;this._startTime=null,t=n*s}t*=this._updateTimeScale(e);const a=this._updateTime(t),o=this._updateWeight(e);if(o>0){const e=this._interpolants,t=this._propertyBindings;switch(this.blendMode){case Ri:for(let n=0,s=e.length;n!==s;++n)e[n].evaluate(a),t[n].accumulateAdditive(o);break;case Ws:default:for(let n=0,i=e.length;n!==i;++n)e[n].evaluate(a),t[n].accumulate(s,o)}}}_updateWeight(e){let t=0;if(this.enabled){t=this.weight;const n=this._weightInterpolant;if(n!==null){const s=n.evaluate(e)[0];t*=s,e>n.parameterPositions[1]&&(this.stopFading(),s===0&&(this.enabled=!1))}}return this._effectiveWeight=t,t}_updateTimeScale(e){let t=0;if(!this.paused){t=this.timeScale;const n=this._timeScaleInterpolant;if(n!==null){const s=n.evaluate(e)[0];t*=s,e>n.parameterPositions[1]&&(this.stopWarping(),t===0?this.paused=!0:this.timeScale=t)}}return this._effectiveTimeScale=t,t}_updateTime(e){const s=this._clip.duration,i=this.loop;let t=this.time+e,n=this._loopCount;const o=i===o1;if(e===0)return n===-1?t:o&&(n&1)===1?s-t:t;if(i===wc){n===-1&&(this._loopCount=0,this._setEndings(!0,!0,!1));handle_stop:{if(t>=s)t=s;else if(t<0)t=0;else{this.time=t;break handle_stop}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=t,this._mixer.dispatchEvent({type:"finished",action:this,direction:e<0?-1:1})}}else{if(n===-1&&(e>=0?(n=0,this._setEndings(!0,this.repetitions===0,o)):this._setEndings(this.repetitions===0,!0,o)),t>=s||t<0){const i=Math.floor(t/s);t-=s*i,n+=Math.abs(i);const a=this.repetitions-n;if(a<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,t=e>0?s:0,this.time=t,this._mixer.dispatchEvent({type:"finished",action:this,direction:e>0?1:-1});else{if(a===1){const t=e<0;this._setEndings(t,!t,o)}else this._setEndings(!1,!1,o);this._loopCount=n,this.time=t,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:i})}}else this.time=t;if(o&&(n&1)===1)return s-t}return t}_setEndings(e,t,n){const s=this._interpolantSettings;n?(s.endingStart=Ot,s.endingEnd=Ot):(e?s.endingStart=this.zeroSlopeAtStart?Ot:wt:s.endingStart=Gn,t?s.endingEnd=this.zeroSlopeAtEnd?Ot:wt:s.endingEnd=Gn)}_scheduleFading(e,t,n){const o=this._mixer,i=o.time;let s=this._weightInterpolant;s===null&&(s=o._lendControlInterpolant(),this._weightInterpolant=s);const a=s.parameterPositions,r=s.sampleValues;return a[0]=i,r[0]=t,a[1]=i+e,r[1]=n,this}}class yc extends Ee{constructor(e){super(),this._root=e,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(e,t){const i=e._localRoot||this._root,a=e._clip.tracks,c=a.length,o=e._propertyBindings,l=e._interpolants,n=i.uuid,r=this._bindingsByRootAndName;let s=r[n];s===void 0&&(s={},r[n]=s);for(let r=0;r!==c;++r){const h=a[r],d=h.name;let e=s[d];if(e!==void 0)++e.referenceCount,o[r]=e;else{if(e=o[r],e!==void 0){e._cacheIndex===null&&(++e.referenceCount,this._addInactiveBinding(e,n,d));continue}const s=t&&t._propertyBindings[r].binding.parsedPath;e=new Ec(u.create(i,d,s),h.ValueTypeName,h.getValueSize()),++e.referenceCount,this._addInactiveBinding(e,n,d),o[r]=e}l[r].resultBuffer=e.buffer}}_activateAction(e){if(!this._isActiveAction(e)){if(e._cacheIndex===null){const s=(e._localRoot||this._root).uuid,t=e._clip.uuid,n=this._actionsByClip[t];this._bindAction(e,n&&n.knownActions[0]),this._addInactiveAction(e,t,s)}const t=e._propertyBindings;for(let e=0,s=t.length;e!==s;++e){const n=t[e];n.useCount++===0&&(this._lendBinding(n),n.saveOriginalState())}this._lendAction(e)}}_deactivateAction(e){if(this._isActiveAction(e)){const t=e._propertyBindings;for(let e=0,s=t.length;e!==s;++e){const n=t[e];--n.useCount===0&&(n.restoreOriginalState(),this._takeBackBinding(n))}this._takeBackAction(e)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const e=this;this.stats={actions:{get total(){return e._actions.length},get inUse(){return e._nActiveActions}},bindings:{get total(){return e._bindings.length},get inUse(){return e._nActiveBindings}},controlInterpolants:{get total(){return e._controlInterpolants.length},get inUse(){return e._nActiveControlInterpolants}}}}_isActiveAction(e){const t=e._cacheIndex;return t!==null&&t<this._nActiveActions}_addInactiveAction(e,t,n){const o=this._actions,i=this._actionsByClip;let s=i[t];if(s===void 0)s={knownActions:[e],actionByRoot:{}},e._byClipCacheIndex=0,i[t]=s;else{const t=s.knownActions;e._byClipCacheIndex=t.length,t.push(e)}e._cacheIndex=o.length,o.push(e),s.actionByRoot[n]=e}_removeInactiveAction(e){const n=this._actions,s=n[n.length-1],o=e._cacheIndex;s._cacheIndex=o,n[o]=s,n.pop(),e._cacheIndex=null;const i=e._clip.uuid,a=this._actionsByClip,r=a[i],t=r.knownActions,c=t[t.length-1],l=e._byClipCacheIndex;c._byClipCacheIndex=l,t[l]=c,t.pop(),e._byClipCacheIndex=null;const d=r.actionByRoot,u=(e._localRoot||this._root).uuid;delete d[u],t.length===0&&delete a[i],this._removeInactiveBindingsForAction(e)}_removeInactiveBindingsForAction(e){const t=e._propertyBindings;for(let e=0,s=t.length;e!==s;++e){const n=t[e];--n.referenceCount===0&&this._removeInactiveBinding(n)}}_lendAction(e){const t=this._actions,s=e._cacheIndex,n=this._nActiveActions++,o=t[n];e._cacheIndex=n,t[n]=e,o._cacheIndex=s,t[s]=o}_takeBackAction(e){const t=this._actions,s=e._cacheIndex,n=--this._nActiveActions,o=t[n];e._cacheIndex=n,t[n]=e,o._cacheIndex=s,t[s]=o}_addInactiveBinding(e,t,n){const o=this._bindingsByRootAndName,i=this._bindings;let s=o[t];s===void 0&&(s={},o[t]=s),s[n]=e,e._cacheIndex=i.length,i.push(e)}_removeInactiveBinding(e){const t=this._bindings,n=e.binding,s=n.rootNode.uuid,c=n.path,o=this._bindingsByRootAndName,i=o[s],a=t[t.length-1],r=e._cacheIndex;a._cacheIndex=r,t[r]=a,t.pop(),delete i[c],Object.keys(i).length===0&&delete o[s]}_lendBinding(e){const t=this._bindings,s=e._cacheIndex,n=this._nActiveBindings++,o=t[n];e._cacheIndex=n,t[n]=e,o._cacheIndex=s,t[s]=o}_takeBackBinding(e){const t=this._bindings,s=e._cacheIndex,n=--this._nActiveBindings,o=t[n];e._cacheIndex=n,t[n]=e,o._cacheIndex=s,t[s]=o}_lendControlInterpolant(){const n=this._controlInterpolants,t=this._nActiveControlInterpolants++;let e=n[t];return e===void 0&&(e=new ei(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),e.__cacheIndex=t,n[t]=e),e}_takeBackControlInterpolant(e){const t=this._controlInterpolants,s=e.__cacheIndex,n=--this._nActiveControlInterpolants,o=t[n];e.__cacheIndex=n,t[n]=e,o.__cacheIndex=s,t[s]=o}clipAction(e,t,n){const r=t||this._root,c=r.uuid;let s=typeof e=="string"?Fn.findByName(r,e):e;const l=s!==null?s.uuid:e,o=this._actionsByClip[l];let i=null;if(n===void 0&&(s!==null?n=s.blendMode:n=Ws),o!==void 0){const e=o.actionByRoot[c];if(e!==void 0&&e.blendMode===n)return e;i=o.knownActions[0],s===null&&(s=i._clip)}if(s===null)return null;const a=new d3(this,s,t,n);return this._bindAction(a,i),this._addInactiveAction(a,l,c),a}existingAction(e,t){const n=t||this._root,i=n.uuid,s=typeof e=="string"?Fn.findByName(n,e):e,a=s?s.uuid:e,o=this._actionsByClip[a];return o!==void 0?o.actionByRoot[i]||null:null}stopAllAction(){const e=this._actions,t=this._nActiveActions;for(let n=t-1;n>=0;--n)e[n].stop();return this}update(e){e*=this.timeScale;const n=this._actions,s=this._nActiveActions,o=this.time+=e,i=Math.sign(e),t=this._accuIndex^=1;for(let a=0;a!==s;++a){const r=n[a];r._update(o,e,i,t)}const a=this._bindings,r=this._nActiveBindings;for(let e=0;e!==r;++e)a[e].apply(t);return this}setTime(e){this.time=0;for(let e=0;e<this._actions.length;e++)this._actions[e].time=0;return this.update(e)}getRoot(){return this._root}uncacheClip(e){const t=this._actions,n=e.uuid,s=this._actionsByClip,o=s[n];if(o!==void 0){const e=o.knownActions;for(let s=0,a=e.length;s!==a;++s){const n=e[s];this._deactivateAction(n);const o=n._cacheIndex,i=t[t.length-1];n._cacheIndex=null,n._byClipCacheIndex=null,i._cacheIndex=o,t[o]=i,t.pop(),this._removeInactiveBindingsForAction(n)}delete s[n]}}uncacheRoot(e){const n=e.uuid,s=this._actionsByClip;for(const t in s){const o=s[t].actionByRoot,e=o[n];e!==void 0&&(this._deactivateAction(e),this._removeInactiveAction(e))}const o=this._bindingsByRootAndName,t=o[n];if(t!==void 0)for(const n in t){const e=t[n];e.restoreOriginalState(),this._removeInactiveBinding(e)}}uncacheAction(e,t){const n=this.existingAction(e,t);n!==null&&(this._deactivateAction(n),this._removeInactiveAction(n))}}yc.prototype._controlInterpolantsResultBuffer=new Float32Array(1);class sa{constructor(e){typeof e=="string"&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),e=arguments[1]),this.value=e}clone(){return new sa(this.value.clone===void 0?this.value:this.value.clone())}}class jc extends tt{constructor(e,t,n=1){super(e,t),this.meshPerAttribute=n}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}clone(e){const t=super.clone(e);return t.meshPerAttribute=this.meshPerAttribute,t}toJSON(e){const t=super.toJSON(e);return t.isInstancedInterleavedBuffer=!0,t.meshPerAttribute=this.meshPerAttribute,t}}jc.prototype.isInstancedInterleavedBuffer=!0;class bc{constructor(e,t,n,s,o){this.buffer=e,this.type=t,this.itemSize=n,this.elementSize=s,this.count=o,this.version=0}set needsUpdate(e){e===!0&&this.version++}setBuffer(e){return this.buffer=e,this}setType(e,t){return this.type=e,this.elementSize=t,this}setItemSize(e){return this.itemSize=e,this}setCount(e){return this.count=e,this}}bc.prototype.isGLBufferAttribute=!0;class p3{constructor(e,t,n=0,s=1/0){this.ray=new Te(e,t),this.near=n,this.far=s,this.camera=null,this.layers=new co,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(e,t){this.ray.set(e,t)}setFromCamera(e,t){t.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(e.x,e.y,.5).unproject(t).sub(this.ray.origin).normalize(),this.camera=t):t.isOrthographicCamera?(this.ray.origin.set(e.x,e.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld),this.camera=t):console.error("THREE.Raycaster: Unsupported camera type: "+t.type)}intersectObject(e,t=!0,n=[]){return oa(e,this,n,t),n.sort(vc),n}intersectObjects(e,t=!0,n=[]){for(let s=0,o=e.length;s<o;s++)oa(e[s],this,n,t);return n.sort(vc),n}}function vc(e,t){return e.distance-t.distance}function oa(e,t,n,s){if(e.layers.test(t.layers)&&e.raycast(t,n),s===!0){const s=e.children;for(let e=0,o=s.length;e<o;e++)oa(s[e],t,n,!0)}}class b3{constructor(e=1,t=0,n=0){return this.radius=e,this.phi=t,this.theta=n,this}set(e,t,n){return this.radius=e,this.phi=t,this.theta=n,this}copy(e){return this.radius=e.radius,this.phi=e.phi,this.theta=e.theta,this}makeSafe(){const e=1e-6;return this.phi=Math.max(e,Math.min(Math.PI-e,this.phi)),this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,n){return this.radius=Math.sqrt(e*e+t*t+n*n),this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e,n),this.phi=Math.acos(b(t/this.radius,-1,1))),this}clone(){return(new this.constructor).copy(this)}}class j3{constructor(e=1,t=0,n=0){return this.radius=e,this.theta=t,this.y=n,this}set(e,t,n){return this.radius=e,this.theta=t,this.y=n,this}copy(e){return this.radius=e.radius,this.theta=e.theta,this.y=e.y,this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,n){return this.radius=Math.sqrt(e*e+n*n),this.theta=Math.atan2(e,n),this.y=t,this}clone(){return(new this.constructor).copy(this)}}const gc=new n;class $t{constructor(e=new n(+(1/0),+(1/0)),t=new n(-(1/0),-(1/0))){this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const n=gc.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}clone(){return(new this.constructor).copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=+(1/0),this.max.x=this.max.y=-(1/0),this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(e){return this.isEmpty()?e.set(0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}containsPoint(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y)}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y)}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){const t=gc.copy(e).clamp(this.min,this.max);return t.sub(e).length()}intersect(e){return this.min.max(e.min),this.max.min(e.max),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}$t.prototype.isBox2=!0;const pc=new t,Cs=new t;class fc{constructor(e=new t,n=new t){this.start=e,this.end=n}set(e,t){return this.start.copy(e),this.end.copy(t),this}copy(e){return this.start.copy(e.start),this.end.copy(e.end),this}getCenter(e){return e.addVectors(this.start,this.end).multiplyScalar(.5)}delta(e){return e.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(e,t){return this.delta(t).multiplyScalar(e).add(this.start)}closestPointToPointParameter(e,t){pc.subVectors(e,this.start),Cs.subVectors(this.end,this.start);const s=Cs.dot(Cs),o=Cs.dot(pc);let n=o/s;return t&&(n=b(n,0,1)),n}closestPointToPoint(e,t,n){const s=this.closestPointToPointParameter(e,t);return this.delta(n).multiplyScalar(s).add(this.start)}applyMatrix4(e){return this.start.applyMatrix4(e),this.end.applyMatrix4(e),this}equals(e){return e.start.equals(this.start)&&e.end.equals(this.end)}clone(){return(new this.constructor).copy(this)}}const mc=new t;class E3 extends l{constructor(e,t){super(),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=t;const n=new r,s=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(let e=0,n=1,t=32;e<t;e++,n++){const o=e/t*Math.PI*2,i=n/t*Math.PI*2;s.push(Math.cos(o),Math.sin(o),1,Math.cos(i),Math.sin(i),1)}n.setAttribute("position",new i(s,3));const o=new S({fog:!1,toneMapped:!1});this.cone=new B(n,o),this.add(this.cone),this.update()}dispose(){this.cone.geometry.dispose(),this.cone.material.dispose()}update(){this.light.updateMatrixWorld();const e=this.light.distance?this.light.distance:1e3,t=e*Math.tan(this.light.angle);this.cone.scale.set(t,t,e),mc.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(mc),this.color!==void 0?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}const $e=new t,xs=new a,ma=new a;class dc extends B{constructor(e){const t=lc(e),n=new r,s=[],a=[],c=new o(0,0,1),l=new o(0,1,0);for(let e=0;e<t.length;e++){const n=t[e];n.parent&&n.parent.isBone&&(s.push(0,0,0),s.push(0,0,0),a.push(c.r,c.g,c.b),a.push(l.r,l.g,l.b))}n.setAttribute("position",new i(s,3)),n.setAttribute("color",new i(a,3));const d=new S({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0});super(n,d),this.type="SkeletonHelper",this.isSkeletonHelper=!0,this.root=e,this.bones=t,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(e){const t=this.bones,n=this.geometry,s=n.getAttribute("position");ma.copy(this.root.matrixWorld).invert();for(let n=0,o=0;n<t.length;n++){const e=t[n];e.parent&&e.parent.isBone&&(xs.multiplyMatrices(ma,e.matrixWorld),$e.setFromMatrixPosition(xs),s.setXYZ(o,$e.x,$e.y,$e.z),xs.multiplyMatrices(ma,e.parent.matrixWorld),$e.setFromMatrixPosition(xs),s.setXYZ(o+1,$e.x,$e.y,$e.z),o+=2)}n.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(e)}}function lc(e){const t=[];e.isBone===!0&&t.push(e);for(let n=0;n<e.children.length;n++)t.push.apply(t,lc(e.children[n]));return t}class T3 extends x{constructor(e,t,n){const s=new hn(t,4,2),o=new ve({wireframe:!0,fog:!1,toneMapped:!1});super(s,o),this.light=e,this.light.updateMatrixWorld(),this.color=n,this.type="PointLightHelper",this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}dispose(){this.geometry.dispose(),this.material.dispose()}update(){this.color!==void 0?this.material.color.set(this.color):this.material.color.copy(this.light.color)}}const z3=new t,cc=new o,rc=new o;class L3 extends l{constructor(e,t,n){super(),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=n;const s=new Ut(t);s.rotateY(Math.PI*.5),this.material=new ve({wireframe:!0,fog:!1,toneMapped:!1}),this.color===void 0&&(this.material.vertexColors=!0);const o=s.getAttribute("position"),i=new Float32Array(o.count*3);s.setAttribute("color",new d(i,3)),this.add(new x(s,this.material)),this.update()}dispose(){this.children[0].geometry.dispose(),this.children[0].material.dispose()}update(){const e=this.children[0];if(this.color!==void 0)this.material.color.set(this.color);else{const t=e.geometry.getAttribute("color");cc.copy(this.light.color),rc.copy(this.light.groundColor);for(let e=0,s=t.count;e<s;e++){const n=e<s/2?cc:rc;t.setXYZ(e,n.r,n.g,n.b)}t.needsUpdate=!0}e.lookAt(z3.setFromMatrixPosition(this.light.matrixWorld).negate())}}class ac extends B{constructor(e=10,t=10,n=4473924,s=8947848){n=new o(n),s=new o(s);const u=t/2,h=e/t,a=e/2,l=[],c=[];for(let r=0,e=0,o=-a;r<=t;r++,o+=h){l.push(-a,0,o,a,0,o),l.push(o,0,-a,o,0,a);const i=r===u?n:s;i.toArray(c,e),e+=3,i.toArray(c,e),e+=3,i.toArray(c,e),e+=3,i.toArray(c,e),e+=3}const d=new r;d.setAttribute("position",new i(l,3)),d.setAttribute("color",new i(c,3));const m=new S({vertexColors:!0,toneMapped:!1});super(d,m),this.type="GridHelper"}}class P3 extends B{constructor(e=10,t=16,n=8,s=64,a=4473924,c=8947848){a=new o(a),c=new o(c);const l=[],d=[];for(let s=0;s<=t;s++){const o=s/t*(Math.PI*2),i=Math.sin(o)*e,r=Math.cos(o)*e;l.push(0,0,0),l.push(i,0,r);const n=s&1?a:c;d.push(n.r,n.g,n.b),d.push(n.r,n.g,n.b)}for(let o=0;o<=n;o++){const t=o&1?a:c,i=e-e/n*o;for(let n=0;n<s;n++){let e=n/s*(Math.PI*2),o=Math.sin(e)*i,a=Math.cos(e)*i;l.push(o,0,a),d.push(t.r,t.g,t.b),e=(n+1)/s*(Math.PI*2),o=Math.sin(e)*i,a=Math.cos(e)*i,l.push(o,0,a),d.push(t.r,t.g,t.b)}}const u=new r;u.setAttribute("position",new i(l,3)),u.setAttribute("color",new i(d,3));const h=new S({vertexColors:!0,toneMapped:!1});super(u,h),this.type="PolarGridHelper"}}const ic=new t,ws=new t,sc=new t;class V3 extends l{constructor(e,t,n){super(),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=n,t===void 0&&(t=1);let s=new r;s.setAttribute("position",new i([-t,t,0,t,t,0,t,-t,0,-t,-t,0,-t,t,0],3));const o=new S({fog:!1,toneMapped:!1});this.lightPlane=new ge(s,o),this.add(this.lightPlane),s=new r,s.setAttribute("position",new i([0,0,0,0,0,1],3)),this.targetLine=new ge(s,o),this.add(this.targetLine),this.update()}dispose(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()}update(){ic.setFromMatrixPosition(this.light.matrixWorld),ws.setFromMatrixPosition(this.light.target.matrixWorld),sc.subVectors(ws,ic),this.lightPlane.lookAt(ws),this.color!==void 0?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(ws),this.targetLine.scale.z=sc.length()}}const ys=new t,v=new Wn;class U3 extends B{constructor(e){const l=new r,f=new S({color:16777215,vertexColors:!0,toneMapped:!1}),d=[],h=[],a={},n=new o(16755200),c=new o(16711680),u=new o(43775),p=new o(16777215),s=new o(3355443);t("n1","n2",n),t("n2","n4",n),t("n4","n3",n),t("n3","n1",n),t("f1","f2",n),t("f2","f4",n),t("f4","f3",n),t("f3","f1",n),t("n1","f1",n),t("n2","f2",n),t("n3","f3",n),t("n4","f4",n),t("p","n1",c),t("p","n2",c),t("p","n3",c),t("p","n4",c),t("u1","u2",u),t("u2","u3",u),t("u3","u1",u),t("c","t",p),t("p","c",s),t("cn1","cn2",s),t("cn3","cn4",s),t("cf1","cf2",s),t("cf3","cf4",s);function t(e,t,n){m(e,n),m(t,n)}function m(e,t){d.push(0,0,0),h.push(t.r,t.g,t.b),a[e]===void 0&&(a[e]=[]),a[e].push(d.length/3-1)}l.setAttribute("position",new i(d,3)),l.setAttribute("color",new i(h,3)),super(l,f),this.type="CameraHelper",this.camera=e,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=a,this.update()}update(){const e=this.geometry,t=this.pointMap,s=1,n=1;v.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),_("c",t,e,v,0,0,-1),_("t",t,e,v,0,0,1),_("n1",t,e,v,-s,-n,-1),_("n2",t,e,v,s,-n,-1),_("n3",t,e,v,-s,n,-1),_("n4",t,e,v,s,n,-1),_("f1",t,e,v,-s,-n,1),_("f2",t,e,v,s,-n,1),_("f3",t,e,v,-s,n,1),_("f4",t,e,v,s,n,1),_("u1",t,e,v,s*.7,n*1.1,-1),_("u2",t,e,v,-s*.7,n*1.1,-1),_("u3",t,e,v,0,n*2,-1),_("cf1",t,e,v,-s,0,1),_("cf2",t,e,v,s,0,1),_("cf3",t,e,v,0,-n,1),_("cf4",t,e,v,0,n,1),_("cn1",t,e,v,-s,0,-1),_("cn2",t,e,v,s,0,-1),_("cn3",t,e,v,0,-n,-1),_("cn4",t,e,v,0,n,-1),e.getAttribute("position").needsUpdate=!0}dispose(){this.geometry.dispose(),this.material.dispose()}}function _(e,t,n,s,o,i,a){ys.set(o,i,a).unproject(s);const r=t[e];if(r!==void 0){const e=n.getAttribute("position");for(let t=0,n=r.length;t<n;t++)e.setXYZ(r[t],ys.x,ys.y,ys.z)}}const vs=new Y;class Jr extends B{constructor(e,t=16776960){const s=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),o=new Float32Array(8*3),n=new r;n.setIndex(new d(s,1)),n.setAttribute("position",new d(o,3)),super(n,new S({color:t,toneMapped:!1})),this.object=e,this.type="BoxHelper",this.matrixAutoUpdate=!1,this.update()}update(e){if(e!==void 0&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),this.object!==void 0&&vs.setFromObject(this.object),vs.isEmpty())return;const n=vs.min,s=vs.max,o=this.geometry.attributes.position,t=o.array;t[0]=s.x,t[1]=s.y,t[2]=s.z,t[3]=n.x,t[4]=s.y,t[5]=s.z,t[6]=n.x,t[7]=n.y,t[8]=s.z,t[9]=s.x,t[10]=n.y,t[11]=s.z,t[12]=s.x,t[13]=s.y,t[14]=n.z,t[15]=n.x,t[16]=s.y,t[17]=n.z,t[18]=n.x,t[19]=n.y,t[20]=n.z,t[21]=s.x,t[22]=n.y,t[23]=n.z,o.needsUpdate=!0,this.geometry.computeBoundingSphere()}setFromObject(e){return this.object=e,this.update(),this}copy(e){return B.prototype.copy.call(this,e),this.object=e.object,this}}class G3 extends B{constructor(e,t=16776960){const s=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),o=[1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],n=new r;n.setIndex(new d(s,1)),n.setAttribute("position",new i(o,3)),super(n,new S({color:t,toneMapped:!1})),this.box=e,this.type="Box3Helper",this.geometry.computeBoundingSphere()}updateMatrixWorld(e){const t=this.box;if(t.isEmpty())return;t.getCenter(this.position),t.getSize(this.scale),this.scale.multiplyScalar(.5),super.updateMatrixWorld(e)}}class X3 extends ge{constructor(e,t=1,n=16776960){const a=n,c=[1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0],s=new r;s.setAttribute("position",new i(c,3)),s.computeBoundingSphere(),super(s,new S({color:a,toneMapped:!1})),this.type="PlaneHelper",this.plane=e,this.size=t;const l=[1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1],o=new r;o.setAttribute("position",new i(l,3)),o.computeBoundingSphere(),this.add(new x(o,new ve({color:a,opacity:.2,transparent:!0,depthWrite:!1,toneMapped:!1})))}updateMatrixWorld(e){let t=-this.plane.constant;Math.abs(t)<1e-8&&(t=1e-8),this.scale.set(.5*this.size,.5*this.size,t),this.children[0].material.side=t<0?U:pt,this.lookAt(this.plane.normal),super.updateMatrixWorld(e)}}const Zr=new t;let ps,wa;class eh extends l{constructor(e=new t(0,0,1),n=new t(0,0,0),s=1,o=16776960,a=s*.2,c=a*.2){super(),this.type="ArrowHelper",ps===void 0&&(ps=new r,ps.setAttribute("position",new i([0,0,0,0,1,0],3)),wa=new ot(0,.5,1,5,1),wa.translate(0,-.5,0)),this.position.copy(n),this.line=new ge(ps,new S({color:o,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new x(wa,new ve({color:o,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(e),this.setLength(s,a,c)}setDirection(e){if(e.y>.99999)this.quaternion.set(0,0,0,1);else if(e.y<-.99999)this.quaternion.set(1,0,0,0);else{Zr.set(e.z,0,-e.x).normalize();const t=Math.acos(e.y);this.quaternion.setFromAxisAngle(Zr,t)}}setLength(e,t=e*.2,n=t*.2){this.line.scale.set(1,Math.max(1e-4,e-t),1),this.line.updateMatrix(),this.cone.scale.set(n,t,n),this.cone.position.y=e,this.cone.updateMatrix()}setColor(e){this.line.material.color.set(e),this.cone.material.color.set(e)}copy(e){return super.copy(e,!1),this.line.copy(e.line),this.cone.copy(e.cone),this}}class Gr extends B{constructor(e=1){const n=[0,0,0,e,0,0,0,0,0,0,e,0,0,0,0,0,0,e],s=[1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],t=new r;t.setAttribute("position",new i(n,3)),t.setAttribute("color",new i(s,3));const o=new S({vertexColors:!0,toneMapped:!1});super(t,o),this.type="AxesHelper"}setColors(e,t,n){const s=new o,i=this.geometry.attributes.color.array;return s.set(e),s.toArray(i,0),s.toArray(i,3),s.set(t),s.toArray(i,6),s.toArray(i,9),s.set(n),s.toArray(i,12),s.toArray(i,15),this.geometry.attributes.color.needsUpdate=!0,this}dispose(){this.geometry.dispose(),this.material.dispose()}}class nh{constructor(){this.type="ShapePath",this.color=new o,this.subPaths=[],this.currentPath=null}moveTo(e,t){return this.currentPath=new Rt,this.subPaths.push(this.currentPath),this.currentPath.moveTo(e,t),this}lineTo(e,t){return this.currentPath.lineTo(e,t),this}quadraticCurveTo(e,t,n,s){return this.currentPath.quadraticCurveTo(e,t,n,s),this}bezierCurveTo(e,t,n,s,o,i){return this.currentPath.bezierCurveTo(e,t,n,s,o,i),this}splineThru(e){return this.currentPath.splineThru(e),this}toShapes(e,t){function f(e){const t=[];for(let n=0,o=e.length;n<o;n++){const i=e[n],s=new de;s.curves=i.curves,t.push(s)}return t}function g(e,t){const s=t.length;let n=!1;for(let c=s-1,r=0;r<s;c=r++){let o=t[c],i=t[r],l=i.x-o.x,a=i.y-o.y;if(Math.abs(a)>Number.EPSILON){if(a<0&&(o=t[r],l=-l,i=t[c],a=-a),e.y<o.y||e.y>i.y)continue;if(e.y===o.y){if(e.x===o.x)return!0}else{const t=a*(e.x-o.x)-l*(e.y-o.y);if(t===0)return!0;if(t<0)continue;n=!n}}else{if(e.y!==o.y)continue;if(i.x<=e.x&&e.x<=o.x||o.x<=e.x&&e.x<=i.x)return!0}}return n}const p=Ce.isClockWise,o=this.subPaths;if(o.length===0)return[];if(t===!0)return f(o);let c,a,i;const d=[];if(o.length===1)return a=o[0],i=new de,i.curves=a.curves,d.push(i),d;let l=!p(o[0].getPoints());l=e?!l:l;const u=[],n=[];let r=[],s=0,h;n[s]=void 0,r[s]=[];for(let t=0,i=o.length;t<i;t++)a=o[t],h=a.getPoints(),c=p(h),c=e?!c:c,c?(!l&&n[s]&&s++,n[s]={s:new de,p:h},n[s].s.curves=a.curves,l&&s++,r[s]=[]):r[s].push({h:a,p:h[0]});if(!n[0])return f(o);if(n.length>1){let e=!1,t=0;for(let e=0,t=n.length;e<t;e++)u[e]=[];for(let s=0,i=n.length;s<i;s++){const o=r[s];for(let i=0;i<o.length;i++){const a=o[i];let r=!0;for(let o=0;o<n.length;o++)g(a.p,n[o].p)&&(s!==o&&t++,r?(r=!1,u[o].push(a)):e=!0);r&&u[s].push(a)}}t>0&&e===!1&&(r=u)}let m;for(let e=0,t=n.length;e<t;e++){i=n[e].s,d.push(i),m=r[e];for(let e=0,t=m.length;e<t;e++)i.holes.push(m[e].h)}return d}}class sh{static toHalfFloat(e){Math.abs(e)>65504&&console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."),e=b(e,-65504,65504),qr[0]=e;const t=Kr[0],n=t>>23&511;return J[n]+((t&8388607)>>ee[n])}static fromHalfFloat(e){const t=e>>10;return Kr[0]=za[Wr[t]+(e&1023)]+Zt[t],qr[0]}}const Yr=new ArrayBuffer(4),qr=new Float32Array(Yr),Kr=new Uint32Array(Yr),J=new Uint32Array(512),ee=new Uint32Array(512);for(let e=0;e<256;++e){const t=e-127;t<-27?(J[e]=0,J[e|256]=32768,ee[e]=24,ee[e|256]=24):t<-14?(J[e]=1024>>-t-14,J[e|256]=1024>>-t-14|32768,ee[e]=-t-1,ee[e|256]=-t-1):t<=15?(J[e]=t+15<<10,J[e|256]=t+15<<10|32768,ee[e]=13,ee[e|256]=13):t<128?(J[e]=31744,J[e|256]=64512,ee[e]=24,ee[e|256]=24):(J[e]=31744,J[e|256]=64512,ee[e]=13,ee[e|256]=13)}const za=new Uint32Array(2048),Zt=new Uint32Array(64),Wr=new Uint32Array(64);for(let e=1;e<1024;++e){let t=e<<13,n=0;for(;(t&8388608)===0;)t<<=1,n-=8388608;t&=~8388608,n+=947912704,za[e]=t|n}for(let e=1024;e<2048;++e)za[e]=939524096+(e-1024<<13);for(let e=1;e<31;++e)Zt[e]=e<<23;Zt[31]=1199570944,Zt[32]=2147483648;for(let e=33;e<63;++e)Zt[e]=2147483648+(e-32<<23);Zt[63]=3347054592;for(let e=1;e<64;++e)e!==32&&(Wr[e]=1024);const hh=0,mh=1,fh=0,ph=1,gh=2;function vh(e){return console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead."),e}function bh(e=[]){return console.warn("THREE.MultiMaterial has been removed. Use an Array instead."),e.isMultiMaterial=!0,e.materials=e,e.clone=function(){return e.slice()},e}class jh extends ts{constructor(e,t){console.warn("THREE.PointCloud has been renamed to THREE.Points."),super(e,t)}}class yh extends Ts{constructor(e){console.warn("THREE.Particle has been renamed to THREE.Sprite."),super(e)}}class _h extends ts{constructor(e,t){console.warn("THREE.ParticleSystem has been renamed to THREE.Points."),super(e,t)}}class wh extends rt{constructor(e){console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial."),super(e)}}class Oh extends rt{constructor(e){console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial."),super(e)}}class xh extends rt{constructor(e){console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial."),super(e)}}class Ch extends t{constructor(e,t,n){console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead."),super(e,t,n)}}class Eh extends d{constructor(e,t){console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead."),super(e,t),this.setUsage(nn)}}class kh extends Dd{constructor(e,t){console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead."),super(e,t)}}class Ah extends Nd{constructor(e,t){console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead."),super(e,t)}}class Sh extends Rd{constructor(e,t){console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead."),super(e,t)}}class Mh extends Id{constructor(e,t){console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead."),super(e,t)}}class Fh extends ko{constructor(e,t){console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead."),super(e,t)}}class Th extends Bd{constructor(e,t){console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead."),super(e,t)}}class zh extends Co{constructor(e,t){console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead."),super(e,t)}}class Dh extends i{constructor(e,t){console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead."),super(e,t)}}class Nh extends Wd{constructor(e,t){console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead."),super(e,t)}}V.create=function(e,t){return console.log("THREE.Curve.create() has been deprecated"),e.prototype=Object.create(V.prototype),e.prototype.constructor=e,e.prototype.getPoint=t,e},Rt.prototype.fromPoints=function(e){return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(e)};class Lh extends Gr{constructor(e){console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper."),super(e)}}class Rh extends Jr{constructor(e,t){console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead."),super(e,t)}}class Ph extends B{constructor(e,t){console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead."),super(new Go(e.geometry),new S({color:t!==void 0?t:16777215}))}}ac.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},dc.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")};class Hh extends B{constructor(e,t){console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead."),super(new Ro(e.geometry),new S({color:t!==void 0?t:16777215}))}}P.prototype.extractUrlBase=function(e){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),Qs.extractUrlBase(e)},P.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}};class Ih extends ae{constructor(e){console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader."),super(e)}}class Bh extends zl{constructor(e){console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader."),super(e)}}$t.prototype.center=function(e){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(e)},$t.prototype.empty=function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},$t.prototype.isIntersectionBox=function(e){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)},$t.prototype.size=function(e){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(e)},Y.prototype.center=function(e){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(e)},Y.prototype.empty=function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},Y.prototype.isIntersectionBox=function(e){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)},Y.prototype.isIntersectionSphere=function(e){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(e)},Y.prototype.size=function(e){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(e)},Ge.prototype.toVector3=function(){console.error("THREE.Euler: .toVector3() has been removed. Use Vector3.setFromEuler() instead")},ke.prototype.empty=function(){return console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty()."),this.isEmpty()},Jn.prototype.setFromMatrix=function(e){return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."),this.setFromProjectionMatrix(e)},fc.prototype.center=function(e){return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."),this.getCenter(e)},E.prototype.flattenToArrayOffset=function(e,t){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(e,t)},E.prototype.multiplyVector3=function(e){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),e.applyMatrix3(this)},E.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},E.prototype.applyToBufferAttribute=function(e){return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."),e.applyMatrix3(this)},E.prototype.applyToVector3Array=function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")},E.prototype.getInverse=function(e){return console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(e).invert()},a.prototype.extractPosition=function(e){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(e)},a.prototype.flattenToArrayOffset=function(e,t){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(e,t)},a.prototype.getPosition=function(){return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),(new t).setFromMatrixColumn(this,3)},a.prototype.setRotationFromQuaternion=function(e){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(e)},a.prototype.multiplyToArray=function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},a.prototype.multiplyVector3=function(e){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},a.prototype.multiplyVector4=function(e){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},a.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},a.prototype.rotateAxis=function(e){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),e.transformDirection(this)},a.prototype.crossVector=function(e){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},a.prototype.translate=function(){console.error("THREE.Matrix4: .translate() has been removed.")},a.prototype.rotateX=function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},a.prototype.rotateY=function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},a.prototype.rotateZ=function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},a.prototype.rotateByAxis=function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},a.prototype.applyToBufferAttribute=function(e){return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},a.prototype.applyToVector3Array=function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},a.prototype.makeFrustum=function(e,t,n,s,o,i){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(e,t,s,n,o,i)},a.prototype.getInverse=function(e){return console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(e).invert()},re.prototype.isIntersectionLine=function(e){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(e)},T.prototype.multiplyVector3=function(e){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),e.applyQuaternion(this)},T.prototype.inverse=function(){return console.warn("THREE.Quaternion: .inverse() has been renamed to invert()."),this.invert()},Te.prototype.isIntersectionBox=function(e){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)},Te.prototype.isIntersectionPlane=function(e){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(e)},Te.prototype.isIntersectionSphere=function(e){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(e)},w.prototype.area=function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()},w.prototype.barycoordFromPoint=function(e,t){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(e,t)},w.prototype.midpoint=function(e){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(e)},w.prototypenormal=function(e){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(e)},w.prototype.plane=function(e){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(e)},w.barycoordFromPoint=function(e,t,n,s,o){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),w.getBarycoord(e,t,n,s,o)},w.normal=function(e,t,n,s){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),w.getNormal(e,t,n,s)},de.prototype.extractAllPoints=function(e){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(e)},de.prototype.extrude=function(e){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new me(this,e)},de.prototype.makeGeometry=function(e){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new Yt(this,e)},n.prototype.fromAttribute=function(e,t,n){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(e,t,n)},n.prototype.distanceToManhattan=function(e){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(e)},n.prototype.lengthManhattan=function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},t.prototype.setEulerFromRotationMatrix=function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},t.prototype.setEulerFromQuaternion=function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},t.prototype.getPositionFromMatrix=function(e){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(e)},t.prototype.getScaleFromMatrix=function(e){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(e)},t.prototype.getColumnFromMatrix=function(e,t){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(t,e)},t.prototype.applyProjection=function(e){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(e)},t.prototype.fromAttribute=function(e,t,n){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(e,t,n)},t.prototype.distanceToManhattan=function(e){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(e)},t.prototype.lengthManhattan=function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},h.prototype.fromAttribute=function(e,t,n){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(e,t,n)},h.prototype.lengthManhattan=function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},l.prototype.getChildByName=function(e){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(e)},l.prototype.renderDepth=function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},l.prototype.translate=function(e,t){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(t,e)},l.prototype.getWorldRotation=function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")},l.prototype.applyMatrix=function(e){return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(e)},Object.defineProperties(l.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(e){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=e}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),x.prototype.setDrawMode=function(){console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")},Object.defineProperties(x.prototype,{drawMode:{get:function(){return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."),h1},set:function(){console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}}}),Rs.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")},F.prototype.setLens=function(e,t){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),t!==void 0&&(this.filmGauge=t),this.setFocalLength(e)},Object.defineProperties(ie.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(e){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=e}},shadowCameraLeft:{set:function(e){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=e}},shadowCameraRight:{set:function(e){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=e}},shadowCameraTop:{set:function(e){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=e}},shadowCameraBottom:{set:function(e){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=e}},shadowCameraNear:{set:function(e){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=e}},shadowCameraFar:{set:function(e){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=e}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(e){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=e}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(e){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=e}},shadowMapHeight:{set:function(e){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=e}}}),Object.defineProperties(d.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},dynamic:{get:function(){return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.usage===nn},set:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.setUsage(nn)}}}),d.prototype.setDynamic=function(e){return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(e===!0?nn:tn),this},d.prototype.copyIndicesArray=function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},d.prototype.setArray=function(){console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")},r.prototype.addIndex=function(e){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(e)},r.prototype.addAttribute=function(e,t){return console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."),!(t&&t.isBufferAttribute)&&!(t&&t.isInterleavedBufferAttribute)?(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.setAttribute(e,new d(arguments[1],arguments[2]))):e==="index"?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(t),this):this.setAttribute(e,t)},r.prototype.addDrawCall=function(e,t,n){n!==void 0&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(e,t)},r.prototype.clearDrawCalls=function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},r.prototype.computeOffsets=function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")},r.prototype.removeAttribute=function(e){return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."),this.deleteAttribute(e)},r.prototype.applyMatrix=function(e){return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(e)},Object.defineProperties(r.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),tt.prototype.setDynamic=function(e){return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(e===!0?nn:tn),this},tt.prototype.setArray=function(){console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")},me.prototype.getArrays=function(){console.error("THREE.ExtrudeGeometry: .getArrays() has been removed.")},me.prototype.addShapeList=function(){console.error("THREE.ExtrudeGeometry: .addShapeList() has been removed.")},me.prototype.addShape=function(){console.error("THREE.ExtrudeGeometry: .addShape() has been removed.")},Os.prototype.dispose=function(){console.error("THREE.Scene: .dispose() has been removed.")},sa.prototype.onUpdate=function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this},Object.defineProperties(y.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new o}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(e){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=e===Qi}},stencilMask:{get:function(){return console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask},set:function(e){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask=e}},vertexTangents:{get:function(){console.warn("THREE."+this.type+": .vertexTangents has been removed.")},set:function(){console.warn("THREE."+this.type+": .vertexTangents has been removed.")}}}),Object.defineProperties(G.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(e){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=e}}}),m.prototype.clearTarget=function(e,t,n,s){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(e),this.clear(t,n,s)},m.prototype.animate=function(e){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(e)},m.prototype.getCurrentRenderTarget=function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()},m.prototype.getMaxAnisotropy=function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()},m.prototype.getPrecision=function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision},m.prototype.resetGLState=function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()},m.prototype.supportsFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},m.prototype.supportsHalfFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},m.prototype.supportsStandardDerivatives=function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},m.prototype.supportsCompressedTextureS3TC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},m.prototype.supportsCompressedTexturePVRTC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},m.prototype.supportsBlendMinMax=function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},m.prototype.supportsVertexTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures},m.prototype.supportsInstancedArrays=function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},m.prototype.enableScissorTest=function(e){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(e)},m.prototype.initMaterial=function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},m.prototype.addPrePlugin=function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},m.prototype.addPostPlugin=function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},m.prototype.updateShadowMap=function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")},m.prototype.setFaceCulling=function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")},m.prototype.allocTextureUnit=function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")},m.prototype.setTexture=function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")},m.prototype.setTexture2D=function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")},m.prototype.setTextureCube=function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")},m.prototype.getActiveMipMapLevel=function(){return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."),this.getActiveMipmapLevel()},Object.defineProperties(m.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(e){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=e}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(e){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=e}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."),this.getContext()}},vr:{get:function(){return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"),this.xr}},gammaInput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."),!1},set:function(){console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.")}},gammaOutput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),!1},set:function(e){console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),this.outputEncoding=e===!0?p:ce}},toneMappingWhitePoint:{get:function(){return console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed."),1},set:function(){console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.")}},gammaFactor:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaFactor has been removed."),2},set:function(){console.warn("THREE.WebGLRenderer: .gammaFactor has been removed.")}}}),Object.defineProperties(iu.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}});class Vh extends qs{constructor(e,t,n){console.warn("THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options )."),super(e,n)}}Object.defineProperties(I.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(e){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=e}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(e){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=e}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(e){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=e}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(e){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=e}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(e){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=e}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(e){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=e}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(e){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=e}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(e){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=e}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(e){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=e}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(e){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=e}}}),Yi.prototype.load=function(e){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");const t=this,n=new el;return n.load(e,function(e){t.setBuffer(e)}),this},kc.prototype.getData=function(){return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),this.getFrequencyData()},Gs.prototype.updateCubeMap=function(e,t){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(e,t)},Gs.prototype.clear=function(e,t,n,s){return console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear()."),this.renderTarget.clear(e,t,n,s)},Ue.crossOrigin=void 0,Ue.loadTexture=function(e,t,n,s){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");const o=new Tl;o.setCrossOrigin(this.crossOrigin);const i=o.load(e,n,void 0,s);return t&&(i.mapping=t),i},Ue.loadTextureCube=function(e,t,n,s){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");const o=new Nl;o.setCrossOrigin(this.crossOrigin);const i=o.load(e,n,void 0,s);return t&&(i.mapping=t),i},Ue.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},Ue.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")};function $h(){console.error("THREE.CanvasRenderer has been removed")}function Wh(){console.error("THREE.JSONLoader has been removed.")}const Uh={createMultiMaterialObject:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")},detach:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")},attach:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")}};function Kh(){console.error("THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js")}class qh extends r{constructor(){console.error("THREE.ParametricGeometry has been moved to /examples/jsm/geometries/ParametricGeometry.js"),super()}}class Yh extends r{constructor(){console.error("THREE.TextGeometry has been moved to /examples/jsm/geometries/TextGeometry.js"),super()}}function Gh(){console.error("THREE.FontLoader has been moved to /examples/jsm/loaders/FontLoader.js")}function Xh(){console.error("THREE.Font has been moved to /examples/jsm/loaders/FontLoader.js")}function Qh(){console.error("THREE.ImmediateRenderObject has been removed.")}class Zh extends I{constructor(e,t,n){console.error('THREE.WebGLMultisampleRenderTarget has been removed. Use a normal render target and set the "samples" property to greater 0 to enable multisampling.'),super(e,t,n),this.samples=4}}class Jh extends Tt{constructor(e,t,n,s){console.warn("THREE.DataTexture2DArray has been renamed to DataArrayTexture."),super(e,t,n,s)}}class em extends Xn{constructor(e,t,n,s){console.warn("THREE.DataTexture3D has been renamed to Data3DTexture."),super(e,t,n,s)}}typeof __THREE_DEVTOOLS__!="undefined"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:Oo}})),typeof window!="undefined"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=Oo),e.ACESFilmicToneMapping=Pd,e.AddEquation=ht,e.AddOperation=jd,e.AdditiveAnimationBlendMode=Ri,e.AdditiveBlending=Ki,e.AlphaFormat=ou,e.AlwaysDepth=ld,e.AlwaysStencilFunc=sd,e.AmbientLight=xi,e.AmbientLightProbe=Zc,e.AnimationClip=Fn,e.AnimationLoader=q0,e.AnimationMixer=yc,e.AnimationObjectGroup=_c,e.AnimationUtils=f,e.ArcCurve=Si,e.ArrayCamera=ya,e.ArrowHelper=eh,e.Audio=Yi,e.AudioAnalyser=kc,e.AudioContext=$i,e.AudioListener=V2,e.AudioLoader=el,e.AxesHelper=Gr,e.AxisHelper=Lh,e.BackSide=U,e.BasicDepthPacking=Ua,e.BasicShadowMap=_3,e.BinaryTextureLoader=Bh,e.Bone=ls,e.BooleanKeyframeTrack=Xe,e.BoundingBoxHelper=Rh,e.Box2=$t,e.Box3=Y,e.Box3Helper=G3,e.BoxBufferGeometry=Ae,e.BoxGeometry=Ae,e.BoxHelper=Jr,e.BufferAttribute=d,e.BufferGeometry=r,e.BufferGeometryLoader=bl,e.ByteType=qd,e.Cache=et,e.Camera=Wn,e.CameraHelper=U3,e.CanvasRenderer=$h,e.CanvasTexture=qu,e.CapsuleBufferGeometry=In,e.CapsuleGeometry=In,e.CatmullRomCurve3=di,e.CineonToneMapping=zd,e.CircleBufferGeometry=Hn,e.CircleGeometry=Hn,e.ClampToEdgeWrapping=R,e.Clock=Gc,e.Color=o,e.ColorKeyframeTrack=ti,e.ColorManagement=Q,e.CompressedTexture=Mi,e.CompressedTextureLoader=Y0,e.ConeBufferGeometry=Pn,e.ConeGeometry=Pn,e.CubeCamera=Gs,e.CubeReflectionMapping=Be,e.CubeRefractionMapping=Ve,e.CubeTexture=St,e.CubeTextureLoader=Nl,e.CubeUVReflectionMapping=Qt,e.CubicBezierCurve=po,e.CubicBezierCurve3=ci,e.CubicInterpolant=Ql,e.CullFaceBack=pa,e.CullFaceFront=nc,e.CullFaceFrontBack=k3,e.CullFaceNone=Ur,e.Curve=V,e.CurvePath=Xd,e.CustomBlending=Ol,e.CustomToneMapping=Hd,e.CylinderBufferGeometry=ot,e.CylinderGeometry=ot,e.Cylindrical=j3,e.Data3DTexture=Xn,e.DataArrayTexture=Tt,e.DataTexture=nt,e.DataTexture2DArray=Jh,e.DataTexture3D=em,e.DataTextureLoader=zl,e.DataUtils=sh,e.DecrementStencilOp=G1,e.DecrementWrapStencilOp=e4,e.DefaultLoadingManager=Hl,e.DepthFormat=Re,e.DepthStencilFormat=ft,e.DepthTexture=va,e.DirectionalLight=wi,e.DirectionalLightHelper=V3,e.DiscreteInterpolant=Xl,e.DodecahedronBufferGeometry=Rn,e.DodecahedronGeometry=Rn,e.DoubleSide=gt,e.DstAlphaFactor=Kl,e.DstColorFactor=Gl,e.DynamicBufferAttribute=Eh,e.DynamicCopyUsage=y0,e.DynamicDrawUsage=nn,e.DynamicReadUsage=v0,e.EdgesGeometry=Go,e.EdgesHelper=Ph,e.EllipseCurve=es,e.EqualDepth=md,e.EqualStencilFunc=u4,e.EquirectangularReflectionMapping=mn,e.EquirectangularRefractionMapping=Sn,e.Euler=Ge,e.EventDispatcher=Ee,e.ExtrudeBufferGeometry=me,e.ExtrudeGeometry=me,e.FaceColors=ph,e.FileLoader=ae,e.FlatShading=Qi,e.Float16BufferAttribute=Vd,e.Float32Attribute=Dh,e.Float32BufferAttribute=i,e.Float64Attribute=Nh,e.Float64BufferAttribute=Wd,e.FloatType=xe,e.Fog=_s,e.FogExp2=bs,e.Font=Xh,e.FontLoader=Gh,e.FramebufferTexture=e1,e.FrontSide=pt,e.Frustum=Jn,e.GLBufferAttribute=bc,e.GLSL1=w0,e.GLSL3=li,e.GreaterDepth=gd,e.GreaterEqualDepth=fd,e.GreaterEqualStencilFunc=r0,e.GreaterStencilFunc=p4,e.GridHelper=ac,e.Group=Ke,e.HalfFloatType=vt,e.HemisphereLight=pi,e.HemisphereLightHelper=L3,e.HemisphereLightProbe=Jc,e.IcosahedronBufferGeometry=vn,e.IcosahedronGeometry=vn,e.ImageBitmapLoader=tl,e.ImageLoader=Ln,e.ImageUtils=Ue,e.ImmediateRenderObject=Qh,e.IncrementStencilOp=Y1,e.IncrementWrapStencilOp=Z1,e.InstancedBufferAttribute=it,e.InstancedBufferGeometry=Ni,e.InstancedInterleavedBuffer=jc,e.InstancedMesh=Bi,e.Int16Attribute=Mh,e.Int16BufferAttribute=Id,e.Int32Attribute=Th,e.Int32BufferAttribute=Bd,e.Int8Attribute=kh,e.Int8BufferAttribute=Dd,e.IntType=Gd,e.InterleavedBuffer=tt,e.InterleavedBufferAttribute=Je,e.Interpolant=_e,e.InterpolateDiscrete=Zn,e.InterpolateLinear=Qn,e.InterpolateSmooth=$s,e.InvertStencilOp=t4,e.JSONLoader=Wh,e.KeepStencilOp=no,e.KeyframeTrack=ne,e.LOD=$u,e.LatheBufferGeometry=Ht,e.LatheGeometry=Ht,e.Layers=co,e.LensFlare=Kh,e.LessDepth=hd,e.LessEqualDepth=zo,e.LessEqualStencilFunc=h4,e.LessStencilFunc=d4,e.Light=ie,e.LightProbe=$n,e.Line=ge,e.Line3=fc,e.LineBasicMaterial=S,e.LineCurve=Un,e.LineCurve3=Zd,e.LineDashedMaterial=Zo,e.LineLoop=Di,e.LinePieces=mh,e.LineSegments=B,e.LineStrip=hh,e.LinearEncoding=ce,e.LinearFilter=j,e.LinearInterpolant=ei,e.LinearMipMapLinearFilter=a4,e.LinearMipMapNearestFilter=r4,e.LinearMipmapLinearFilter=ct,e.LinearMipmapNearestFilter=ni,e.LinearSRGBColorSpace=Ne,e.LinearToneMapping=Ed,e.Loader=P,e.LoaderUtils=Qs,e.LoadingManager=ii,e.LoopOnce=wc,e.LoopPingPong=o1,e.LoopRepeat=Qu,e.LuminanceAlphaFormat=v1,e.LuminanceFormat=gu,e.MOUSE=dh,e.Material=y,e.MaterialLoader=jl,e.Math=hc,e.MathUtils=hc,e.Matrix3=E,e.Matrix4=a,e.MaxEquation=ai,e.Mesh=x,e.MeshBasicMaterial=ve,e.MeshDepthMaterial=fs,e.MeshDistanceMaterial=gs,e.MeshFaceMaterial=vh,e.MeshLambertMaterial=Yo,e.MeshMatcapMaterial=Xo,e.MeshNormalMaterial=qo,e.MeshPhongMaterial=$o,e.MeshPhysicalMaterial=Vo,e.MeshStandardMaterial=Mo,e.MeshToonMaterial=Uo,e.MinEquation=fi,e.MirroredRepeatWrapping=Dn,e.MixOperation=bd,e.MultiMaterial=bh,e.MultiplyBlending=Ti,e.MultiplyOperation=gn,e.NearestFilter=O,e.NearestMipMapLinearFilter=l4,e.NearestMipMapNearestFilter=g4,e.NearestMipmapLinearFilter=yo,e.NearestMipmapNearestFilter=xo,e.NeverDepth=od,e.NeverStencilFunc=c4,e.NoBlending=fe,e.NoColorSpace=D1,e.NoColors=fh,e.NoToneMapping=le,e.NormalAnimationBlendMode=Ws,e.NormalBlending=xt,e.NotEqualDepth=vd,e.NotEqualStencilFunc=q4,e.NumberKeyframeTrack=kn,e.Object3D=l,e.ObjectLoader=w2,e.ObjectSpaceNormalMap=ru,e.OctahedronBufferGeometry=Ut,e.OctahedronGeometry=Ut,e.OneFactor=Il,e.OneMinusDstAlphaFactor=Yl,e.OneMinusDstColorFactor=Zl,e.OneMinusSrcAlphaFactor=si,e.OneMinusSrcColorFactor=Vl,e.OrthographicCamera=ns,e.PCFShadowMap=na,e.PCFSoftShadowMap=Ac,e.PMREMGenerator=Da,e.ParametricGeometry=qh,e.Particle=yh,e.ParticleBasicMaterial=Oh,e.ParticleSystem=_h,e.ParticleSystemMaterial=xh,e.Path=Rt,e.PerspectiveCamera=F,e.Plane=re,e.PlaneBufferGeometry=zt,e.PlaneGeometry=zt,e.PlaneHelper=X3,e.PointCloud=jh,e.PointCloudMaterial=wh,e.PointLight=_i,e.PointLightHelper=T3,e.Points=ts,e.PointsMaterial=rt,e.PolarGridHelper=P3,e.PolyhedronBufferGeometry=pe,e.PolyhedronGeometry=pe,e.PositionalAudio=Y2,e.PropertyBinding=u,e.PropertyMixer=Ec,e.QuadraticBezierCurve=go,e.QuadraticBezierCurve3=vo,e.Quaternion=T,e.QuaternionKeyframeTrack=Jt,e.QuaternionLinearInterpolant=Ul,e.REVISION=Oo,e.RGBADepthPacking=y1,e.RGBAFormat=q,e.RGBAIntegerFormat=i1,e.RGBA_ASTC_10x10_Format=Ia,e.RGBA_ASTC_10x5_Format=Na,e.RGBA_ASTC_10x6_Format=La,e.RGBA_ASTC_10x8_Format=Ha,e.RGBA_ASTC_12x10_Format=Ba,e.RGBA_ASTC_12x12_Format=Va,e.RGBA_ASTC_4x4_Format=ha,e.RGBA_ASTC_5x4_Format=ga,e.RGBA_ASTC_5x5_Format=ja,e.RGBA_ASTC_6x5_Format=xa,e.RGBA_ASTC_6x6_Format=Ca,e.RGBA_ASTC_8x5_Format=Aa,e.RGBA_ASTC_8x6_Format=Sa,e.RGBA_ASTC_8x8_Format=Ma,e.RGBA_BPTC_Format=$a,e.RGBA_ETC2_EAC_Format=ua,e.RGBA_PVRTC_2BPPV1_Format=ca,e.RGBA_PVRTC_4BPPV1_Format=ra,e.RGBA_S3TC_DXT1_Format=Ps,e.RGBA_S3TC_DXT3_Format=Ms,e.RGBA_S3TC_DXT5_Format=ks,e.RGBFormat=pu,e.RGB_ETC1_Format=Eu,e.RGB_ETC2_Format=da,e.RGB_PVRTC_2BPPV1_Format=aa,e.RGB_PVRTC_4BPPV1_Format=ia,e.RGB_S3TC_DXT1_Format=Hs,e.RGFormat=m1,e.RGIntegerFormat=r1,e.RawShaderMaterial=Do,e.Ray=Te,e.Raycaster=p3,e.RectAreaLight=ki,e.RedFormat=b1,e.RedIntegerFormat=g1,e.ReinhardToneMapping=kd,e.RepeatWrapping=Tn,e.ReplaceStencilOp=R1,e.ReverseSubtractEquation=Ll,e.RingBufferGeometry=fn,e.RingGeometry=fn,e.SRGBColorSpace=ue,e.Scene=Os,e.SceneUtils=Uh,e.ShaderChunk=c,e.ShaderLib=Z,e.ShaderMaterial=G,e.ShadowMaterial=No,e.Shape=de,e.ShapeBufferGeometry=Yt,e.ShapeGeometry=Yt,e.ShapePath=nh,e.ShapeUtils=Ce,e.ShortType=Yd,e.Skeleton=qi,e.SkeletonHelper=dc,e.SkinnedMesh=Rs,e.SmoothShading=B2,e.Source=st,e.Sphere=ke,e.SphereBufferGeometry=hn,e.SphereGeometry=hn,e.Spherical=b3,e.SphericalHarmonics3=Fi,e.SplineCurve=bo,e.SpotLight=bi,e.SpotLightHelper=E3,e.Sprite=Ts,e.SpriteMaterial=Es,e.SrcAlphaFactor=oi,e.SrcAlphaSaturateFactor=Jl,e.SrcColorFactor=Bl,e.StaticCopyUsage=j0,e.StaticDrawUsage=tn,e.StaticReadUsage=p0,e.StereoCamera=N2,e.StreamCopyUsage=_0,e.StreamDrawUsage=m0,e.StreamReadUsage=b0,e.StringKeyframeTrack=Qe,e.SubtractEquation=Fl,e.SubtractiveBlending=Wi,e.TOUCH=ch,e.TangentSpaceNormalMap=mt,e.TetrahedronBufferGeometry=jn,e.TetrahedronGeometry=jn,e.TextGeometry=Yh,e.Texture=A,e.TextureLoader=Tl,e.TorusBufferGeometry=yn,e.TorusGeometry=yn,e.TorusKnotBufferGeometry=wn,e.TorusKnotGeometry=wn,e.Triangle=w,e.TriangleFanDrawMode=d2,e.TriangleStripDrawMode=O1,e.TrianglesDrawMode=h1,e.TubeBufferGeometry=On,e.TubeGeometry=On,e.UVMapping=Eo,e.Uint16Attribute=Fh,e.Uint16BufferAttribute=ko,e.Uint32Attribute=zh,e.Uint32BufferAttribute=Co,e.Uint8Attribute=Ah,e.Uint8BufferAttribute=Nd,e.Uint8ClampedAttribute=Sh,e.Uint8ClampedBufferAttribute=Rd,e.Uniform=sa,e.UniformsLib=s,e.UniformsUtils=uu,e.UnsignedByteType=Fe,e.UnsignedInt248Type=Et,e.UnsignedIntType=Bn,e.UnsignedShort4444Type=eu,e.UnsignedShort5551Type=su,e.UnsignedShortType=Pt,e.VSMShadowMap=Dt,e.Vector2=n,e.Vector3=t,e.Vector4=h,e.VectorKeyframeTrack=Mn,e.Vertex=Ch,e.VertexColors=gh,e.VideoTexture=a1,e.WebGL1Renderer=bu,e.WebGL3DRenderTarget=ec,e.WebGLArrayRenderTarget=Qr,e.WebGLCubeRenderTarget=qs,e.WebGLMultipleRenderTargets=tc,e.WebGLMultisampleRenderTarget=Zh,e.WebGLRenderTarget=I,e.WebGLRenderTargetCube=Vh,e.WebGLRenderer=m,e.WebGLUtils=cu,e.WireframeGeometry=Ro,e.WireframeHelper=Hh,e.WrapAroundEnding=Gn,e.XHRLoader=Ih,e.ZeroCurvatureEnding=wt,e.ZeroFactor=Pl,e.ZeroSlopeEnding=Ot,e.ZeroStencilOp=N1,e._SRGBAFormat=mo,e.sRGBEncoding=p,Object.defineProperty(e,"__esModule",{value:!0})})